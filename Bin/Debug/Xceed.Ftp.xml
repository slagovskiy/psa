<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Xceed.Ftp</name>
    </assembly>
    <members>
        <member name="N:Xceed.Ftp">
            <summary>The Xceed.Ftp namespace implements the FtpClient and AsyncFtpClient classes which provides quick and easy access to FTP functionalities in the same style as the ActiveX version of the Xceed FTP Library.</summary>
        </member>
        <member name="T:Xceed.Ftp.AuthenticationMethod">
            <summary>Value representing the authentication method to use when connecting to an FTP server. Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="F:Xceed.Ftp.AuthenticationMethod.None">
            <summary>No SSL protocol is specified.</summary>
        </member>
        <member name="F:Xceed.Ftp.AuthenticationMethod.Ssl">
            <summary>SSL authentication will be used. AUTH SSL is sent and only SSL 3.0 is accepted.</summary>
        </member>
        <member name="F:Xceed.Ftp.AuthenticationMethod.Tls">
            <summary>TLS (SSL 3.1) authentication will be used. AUTH TLS is sent, but both TLS and SSL 3.0 are accepted.</summary>
        </member>
        <member name="T:Xceed.Ftp.CertificateStoreLocation">
            <summary>Value representing a certificate's store location. Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentService">
            <summary>The certificate store for the current service.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise downloaded from a network setting.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy downloaded from a network setting.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.Services">
            <summary>The certificate store for a specified service account; for example, an Alerter or the Event Log.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.Unknown">
            <summary>The location is unknown.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="T:Xceed.Ftp.DataChannelProtection">
            <summary>Value representing how a data channel is protected.</summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Clear">
            <summary>Do not secure the data channel. Data is sent out in clear text.</summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Integrity">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Confidential">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Private">
            <summary>The data will be encrypted and a checksum will be performed.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpClientState">
            <summary>Value representing the state of the FtpClient.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.NotConnected">
            <summary>The FTP client is not connected to an FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Connecting">
            <summary>The FTP client is in the process of connecting to the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Connected">
            <summary>The FTP client is connected to the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Authenticating">
            <summary>The FTP client is authenticating with the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.LoggingIn">
            <summary>The FTP client is logging in.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingUser">
            <summary>The FTP client is changing the current user.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingCurrentFolder">
            <summary>The FTP client is changing the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingDataChannelProtection">
            <summary>The FTP client is changing the data channel protection.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingToParentFolder">
            <summary>The FTP client is changing to the current working folder's parent folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingTransferMode">
            <summary>The FTP client is changing the transfer mode.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.CreatingFolder">
            <summary>The FTP client is creating a new folder in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.DeletingFile">
            <summary>The FTP client is deleting a file in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.DeletingFolder">
            <summary>The FTP client is deleting a folder in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.GettingCurrentFolder">
            <summary>The FTP client is retrieving the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.GettingFolderContents">
            <summary>The FTP client is retrieving the contents of the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.GettingExtendedFeatures">
            <summary>The FTP client is retrieving the extended features.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ReceivingFile">
            <summary>The FTP client is receiving a file from the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ReceivingMultipleFiles">
            <summary>The FTP client is receiving multiple files from the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.RenamingFile">
            <summary>The FTP client is renaming a file in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.SendingCustomCommand">
            <summary>The FTP client is sending a custom command to the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.SendingFile">
            <summary>The FTP client is sending a file to the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.SendingMultipleFiles">
            <summary>The FTP client is sending multiple files to FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Disconnecting">
            <summary>The FTP client is disconnecting from the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ClearingCommandChannel">
            <summary>The FTP client is clearing the command channel.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpItemType">
            <summary>Value representing the type of the item on the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.Unknown">
            <summary>The type of the item is unknown.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.File">
            <summary>The item is a file.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.Folder">
            <summary>The item is a folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.Link">
            <summary>The item is a link. A link is a shortcut to a folder or file, that can be located elsewhere than on the FTP server to which the FTP client is connected.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpReplyType">
            <summary>Value representing the type of reply received from the FTP server in response to a command.</summary>
            <remarks>    For a list of specific reply codes, consult the Number     property of the FtpReply class.</remarks>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.Incomplete">
            <summary>More lines are expected therefore this reply is still incomplete. You should never receive such a reply, as this value is used internally.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PositivePreliminary">
            <summary>The requested action is being initiated and another reply should be expected before proceeding with a new command. Any reply between 100 and 159 inclusively is a positive preliminary reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PositiveCompletion">
            <summary>The requested action has successfully completed and a new request may be initiated. Any reply between 200 and 259 inclusively is a positive completion reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PositiveIntermediate">
            <summary>The command was accepted, but the requested action is being held in abeyance, pending receipt of further information. Another command specifying this information is expected by the FTP server. Any reply between 300 and 359 inclusively is a positive intermediate reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.TransientNegativeCompletion">
            <summary>The command was not accepted and the requested action did not take place, but the error condition is not permanent and the action may be requested again once the problem is addressed. Any reply between 400 and 459 inclusively is a transient negative completion reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PermanentNegativeCompletion">
            <summary>The command was not accepted and the requested action did not take place. Any reply between 500 and 559 inclusively is a permanent negative completion reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.Invalid">
            <summary>The format of the reply received from the FTP server was not recognized.</summary>
        </member>
        <member name="T:Xceed.Ftp.HttpReplyType">
            <summary>Represents the type of reply received from the HTTP proxy server in response to a remote connection request.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.Incomplete">
            <summary>More lines are expected; therefore, this reply is still incomplete. You should never receive such a reply, as this value is used internally.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.Informational">
            <summary>Request received, continuing process.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.Success">
            <summary>The action was successfully received, understood, and accepted.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.Redirection">
            <summary>Further action must be taken in order to complete the request.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.ClientError">
            <summary>The request contains bad syntax or cannot be fulfilled.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.ServerError">
            <summary>The server failed to fulfill an apparently valid request.</summary>
        </member>
        <member name="F:Xceed.Ftp.HttpReplyType.Invalid">
            <summary>The format of the reply received from the HTTP proxy server was not recognized.</summary>
        </member>
        <member name="T:Xceed.Ftp.MultipleFileTransferErrorAction">
            <summary>Value representing the action to take when an error occurs while transferring multiple files.</summary>
        </member>
        <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Abort">
            <summary>The entire process should be aborted.</summary>
        </member>
        <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Retry">
            <summary>Attempt to retransfer the file.</summary>
        </member>
        <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Ignore">
            <summary>Skip the file and continue with the next file to transfer.</summary>
        </member>
        <member name="T:Xceed.Ftp.RepresentationType">
            <summary>Value representing the representation type to use when sending or receiving files.</summary>
        </member>
        <member name="F:Xceed.Ftp.RepresentationType.Ascii">
            <summary>The data will be sent/received using the standard 8-bit NVT-ASCII representation. This representation type is intended primarily for the transfer of text files.</summary>
        </member>
        <member name="F:Xceed.Ftp.RepresentationType.Binary">
            <summary>The data will be sent/received as contiguous bits which are packed into the 8-bit transfer bytes. This representation type is intended for the efficient storage and retrieval of files and for the transfer of binary data.</summary>
        </member>
        <member name="T:Xceed.Ftp.TransferMode">
            <summary>Value indicating the data transfer mode.</summary>
        </member>
        <member name="F:Xceed.Ftp.TransferMode.Stream">
            <summary>Data is streamed to and from an FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.TransferMode.ZLibCompressed">
            <summary>Data is compressed before sending to an FTP server and decompressed when received from a server. Also known as MODE Z.</summary>
        </member>
        <member name="T:Xceed.Ftp.VerificationAction">
            <summary>Value representing the verification action to take in the CertificateReceived event when a certificate is received from an FTP server. Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationAction.Accept">
            <summary>Accept the FTP server's certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationAction.Reject">
            <summary>Reject the FTP server's certificate and make the connection or authentication fail.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationAction.VerifyAgain">
            <summary>Verify the certificate again. The Flags property should have been updated to now accept the current reject reason. The CertificateReceived event will be raised again with the new status.</summary>
        </member>
        <member name="T:Xceed.Ftp.VerificationFlags">
            <summary>Value representing the different verification flags used to verify an FTP server's certificate. Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <remarks>    More than one verification flag can be combined using the     OR operator.</remarks>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.None">
            <summary>No flags. This is the most severe form of validation: No certificate anomalies will be accepted.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreTimeNotValid">
            <summary>Ignore certificates in the chain that are not valid either because they have expired or they are not yet in effect when determining certificate validity.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreCtlTimeNotValid">
            <summary>Ignore that the certificate trust list (CTL) is not valid, for reasons such as the CTL has expired, when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreTimeNotNested">
            <summary>Ignore that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested when verifying the certificate. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidBasicConstraints">
            <summary>Ignore that the basic constraints are not valid when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreAllTimeChecks">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.AllowUnknownCA">
            <summary>Ignore that the chain cannot be verified due to an unknown certificate authority (CA).</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreWrongUsage">
            <summary>Ignore that the certificate was not issued for the current use when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidName">
            <summary>Ignore that the certificate has an invalid name when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidPolicy">
            <summary>Ignore that the certificate has invalid policy when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreEndRevUnknown">
            <summary>Ignore that the end certificate (the user certificate) revocation is unknown when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreSignerRevUnknown">
            <summary>Ignore that the certificate trust list (CTL) signer revocation is unknown when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreCARevUnknown">
            <summary>Ignore that the certificate authority revocation is unknown when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreRootRevUnknown">
            <summary>Ignore that the root revocation is unknown when determining certificate verification.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreAllRevUnknown">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.AllowTestRoot">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.TrustTestRoot">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.AllFlags">
            <summary>All flags pertaining to verification are included.</summary>
        </member>
        <member name="T:Xceed.Ftp.VerificationStatus">
            <summary>Value representing the different certificate status values. Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.ValidCertificate">
            <summary>Specifies that the X509 chain has no errors.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.Expired">
            <summary>Specifies that the X509 chain is not valid due to an invalid time value, such as a value that indicates an expired certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidNesting">
            <summary>Specifies that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.Revoked">
            <summary>Specifies that the X509 chain is invalid due to a revoked certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidSignature">
            <summary>Specifies that the X509 chain is invalid due to an invalid certificate signature.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidPurpose">
            <summary>Specifies that the key usage is not valid.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.UntrustedRoot">
            <summary>Specifies that the X509 chain is invalid due to an untrusted root certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.RevocationFailure">
            <summary>Specifies that it is not possible to determine whether the certificate has been revoked. This can be due to the certificate revocation list (CRL) being offline or unavailable.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.Cyclic">
            <summary>Specifies that the X509 chain could not be built.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidExtension">
            <summary>Specifies that the X509 chain is invalid due to an invalid extension.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidPolicyConstraints">
            <summary>Specifies that the X509 chain is invalid due to invalid policy constraints.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidBasicConstraints">
            <summary>Specifies that the X509 chain is invalid due to invalid basic constraints.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.NoCNMatch">
            <summary>Specifies that the X509 chain is invalid due to invalid name constraints.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.HasNotSupportedNameConstraint">
            <summary>Specifies that the certificate does not have a supported name constant or has a name constant that is unsupported.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.HasNotDefinedNameConstraint">
            <summary>Specifies that the certificate has an undefined name constant.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.HasNotPermittedNameConstraint">
            <summary>Specifies that the certificate has an impermissible name constraint.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.HasExcludedNameConstraint">
            <summary>Specifies that the X509 chain is invalid because a certificate has excluded a name constraint.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.PartialChain">
            <summary>Specifies that the X509 chain could not be built up to the root certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidChain">
            <summary>Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must have a certificate policy.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.CtlNotTimeValid">
            <summary>Specifies that the certificate trust list (CTL) is not valid because of an invalid time value, such as one that indicates that the CTL has expired.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.CtlNotSignatureValid">
            <summary>Specifies that the certificate trust list (CTL) contains an invalid signature.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.CtlNotValidForUsage">
            <summary>Specifies that the certificate trust list (CTL) contains an invalid signature.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.RevocationServerOffline">
            <summary>Specifies that the online certificate revocation list (CRL) the X509 chain relies on is currently offline.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidRole">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.NoIssuanceChainPolicy">
            <summary>Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must have a certificate policy.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.ParentRevoked">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.UntrustedTestRoot">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.WrongUsage">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.OtherError">
            <summary>This value is obsolete.</summary>
        </member>
        <member name="T:Xceed.Ftp.AsyncFtpClient">
            <summary>    AsyncFtpClient's methods now call the corresponding     synchronous methods on a background thread. It is therefore     recommended to use FtpClient and assign a SynchronizingObject     to its SynchronizingObject property to improve code     readability. For this reason, the AsyncFtpClient class is now     considered obsolete.     This class provides you the with same functionalities     that you will find in the FtpClient class but also gives you     access to asynchronous FTP functionalities.</summary>
            <remarks>    Xceed FTP for .NET is a highly multi-threaded library     that uses asynchronous operations on sockets and network     streams to allow fast and robust execution. This results in     most events being called from a different thread than the one     that called the initiating method.     When building a GUI application using     System.Windows.Forms, UI elements (controls and forms) must     always be accessed from the main thread since they have     thread-affinity for the main STA thread. This is done using     Control.Invoke or Control.BeginInvoke.     To avoid the need to call Control.Invoke or     Control.BeginInvoke, the SynchronizingObject property can be     set to any object implementing the ISynchronizeInvoke     interface. In doing so, the library will take care of raising     the events on the thread of that object.     In order to avoid cross-blocking calls, the library will     call DoEvents to pump the messages on the main thread when     using blocking methods. When using the asynchronous methods,     the library will not pump messages for you. When using a     callback, there is no need to pump the messages since the     execution is not blocked. When waiting for the completion of     the operation, messages must be pumped manually by calling     DoEvents.</remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.#ctor">
            <summary>Initializes a new instance of the AsyncFtpClient class.</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAbort(System.AsyncCallback,System.Object)">
            <summary>Begins the process of aborting the current FTP command. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndAbort with it when ready to complete.     In this later case, the call to EndAbort may block until the     operation completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate">
            <summary>Begins the authentification and encryption of the current FTP connection.</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.AsyncCallback,System.Object)">
            <summary>Begins the authentification and encryption of the current FTP connection. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The Object) method that requires an authentication     method, verification flags and a client certificate can be used     in the case where the FTP server does not allow authentication     after the connection has been established.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndAuthenticate with it when ready to     complete. In this later case, the call to EndAuthenticate may     block until the operation completes.</remarks>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="dataProtection">How the data channels will be protected.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
            <summary>Begins the authentification and encryption of the current FTP connection. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The Object) method that requires an authentication     method, verification flags and a client certificate can be used     in the case where the FTP server does not allow authentication     after the connection has been established.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndAuthenticate with it when ready to     complete. In this later case, the call to EndAuthenticate may     block until the operation completes.     When using this overload of the BeginAuthenticate method,     the data channel is not secured     (DataChannelProtection.Clear).</remarks>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the current working folder of the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    Both relative and absolute paths can be provided to the     BeginChangeCurrentFolder method to change the FTP server's     current working folder, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The FTP server's current working folder is used by the     FTP server as the base folder from which to perform file     operations such as obtaining folder contents, receiving,     sending and deleting files, changing the current folder,     etc.     The     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)     methods should be used in the case where you want the parent     folder to be the new current working folder.     The current working folder can be retrieved via the     M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndChangeCurrentFolder with it when ready to complete. In this     later case, the call to EndChangeCurrentFolder may block until     the operation completes.</remarks>
            <param name="folder">The new current working folder. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeDataChannelProtection(Xceed.Ftp.DataChannelProtection,System.Security.Authentication.SslProtocols,System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the data channel protection. Don't forget to call  EndChangeDataChannelProtection!</summary>
            <param name="dataChannelProtection">The DataChannelProtection to use.</param>
            <param name="sslProtocol">The SslProtocols to use.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the current working folder of the FTP server to the parent folder. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP server's current working folder is used by the     FTP server as the base folder from which to perform file     operations such as obtaining folder contents, receiving,     sending and deleting files, changing the current folder, etc.     It can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndChangeToParentFolder with it when ready to complete. In this     later case, the call to EndChangeToParentFolder may block until     the operation completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeTransferMode(Xceed.Ftp.TransferMode,System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the transfer mode. Don't forget to call EndChangeTransferMode!</summary>
            <param name="transferMode">The new transfer mode.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser">
            <summary>Begins the process of changing the currently logged-in user to the anonymous user without disconnecting from the FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the currently logged-in user to the anonymous user without disconnecting from the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndChangeUser with it when ready to     complete. In this later case, the call to EndChangeUser may     block until the operation completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the currently logged-in user to the specified user without disconnecting from the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndChangeUser with it when ready to     complete. In this later case, the call to EndChangeUser may     block until the operation completes.</remarks>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of changing the currently logged-in user to the specified user and account without disconnecting from the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndChangeUser with it when ready to     complete. In this later case, the call to EndChangeUser may     block until the operation completes.</remarks>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginClearCommandChannel(System.AsyncCallback,System.Object)">
            <summary>Begins the process of clearing the command channel. Don't forget to call EndClearCommandChannel!</summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect">
            <summary>Begins the connection process of the FTP client to an FTP server on port 21.</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the connection process of the FTP client to an FTP server on port 21. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)     methods to log-in to the FTP server.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndConnect with it when     ready to complete. In this later case, the call to EndConnect     may block until the operation completes.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
            <summary>Begins the connection process of the FTP client to a secure FTP server on port 21. Don't forget to call IAsyncResult)! Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)     methods to log-in to the FTP server.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndConnect with it when     ready to complete. In this later case, the call to EndConnect     may block until the operation completes.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Begins the connection process of the FTP client to an FTP server using the specified hostname and port. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)     methods to log-in to the FTP server.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndConnect with it when     ready to complete. In this later case, the call to EndConnect     may block until the operation completes.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
            <summary>Begins the connection process of the FTP client to a secure FTP server using the specified hostname and port. Don't forget to call IAsyncResult)! Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)     methods to log-in to the FTP server.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndConnect with it when     ready to complete. In this later case, the call to EndConnect     may block until the operation completes.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
            <summary>Begins the connection of the FTP client to an FTP server using the specified IPEndPoint (IP address and port). Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)     methods to log-in to the FTP server.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndConnect with it when     ready to complete. In this later case, the call to EndConnect     may block until the operation completes.</remarks>
            <param name="serverAddress">An IPEndPoint representing the IP address and port of the FTP server to connect to. If 0 is specified for the port, 21 will be used.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginCreateFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of creating a folder on the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the folder will be created in the current     working folder. If you want to create the folder in another     location, you could use the Object)IAsyncResult) methods and/or     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndCreateFolder with it when ready to     complete. In this later case, the call to EndCreateFolder may     block until the operation completes.</remarks>
            <param name="folder">The name of the folder to create. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of deleting a file from the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be deleted from the current     working folder. If you want to delete the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndDeleteFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndDeleteFile     with it when ready to complete. In this later case, the call to     EndDeleteFile may block until the operation completes.</remarks>
            <param name="file">The name of the file to delete. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder">
            <summary>Begins the process of creating a folder on the FTP server. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the processing of deleting a folder from the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the folder will be deleted from the current     working folder. If you want to delete the folder from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     This overload of the BeginDeleteFolder method requires     that the folder be empty in order to delete it. Some FTP     servers will allow folders that contain child items to be     deleted, therefore, it is possible that calling this overload     of the BeginDeleteFolder method will delete a folder even if it     contains child items.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndDeleteFolder     with it when ready to complete. In this later case, the call to     EndDeleteFolder may block until the operation completes.</remarks>
            <param name="folder">The name of the folder to delete. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of deleting a folder, and optionally each item in the folder, from the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the folder will be deleted from the current     working folder. If you want to delete the folder from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     Some FTP servers will allow folders that contain child     items to be deleted, therefore, it is possible that calling     this overload of the BeginDeleteFolder method with its     recursive parameter set to false will still delete each item in     the folder (including the folder).     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndDeleteFolder     with it when ready to complete. In this later case, the call to     EndDeleteFolder may block until the operation completes.</remarks>
            <param name="folder">The name of the folder to delete. Some FTP servers may be case-sensitive!</param>
            <param name="recursive">true if each item in the folder should also be deleted; false otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>Begins the process of disconnecting the FTP client from the FTP server to which it is connected. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If the FTP client is in an invalid state, for example,     sending a file, the BeginDisconnect method will throw an     exception. It is up to the user to call Object) before calling     BeginDisconnect.     The BeginDisconnect method will send the QUIT command to     the FTP server and make sure that the command connection is     closed.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndDisconnect with it when ready to     complete. In this later case, the call to EndDisconnect may     block until the operation completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving the current working folder of the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP server's current working folder is used by the     FTP server as the base folder from which to perform file     operations such as obtaining folder contents, receiving,     sending and deleting files, changing the current folder, etc.     It can be changed using the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     and     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndGetCurrentFolder with it when ready to     complete. In this later case, the call to EndGetCurrentFolder     may block until the operation completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream">
            <summary>Begins the process of retrieving a direct access to the readonly data stream being received. Don't forget to call EndGetDownloadStream!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving a direct access to the readonly data stream being received. Don't forget to call EndGetDownloadStream!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client will remain in a "ReceivingFile" state     until the stream returned by EndGetDownloadStream     is closed.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving a direct access to the readonly data stream being received, beginning at the specified offset. Don't forget to call EndGetDownloadStream!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client will remain in a "ReceivingFile" state     until the stream returned by EndGetDownloadStream     is closed.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents">
            <summary>Begins the process of retrieving the contents of the current working folder. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving the contents of the current working folder. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     The listing lines can be manually parsed or modified via     the E:Xceed.Ftp.FtpClient.ParsingListingLine event.     If you would prefer to receive an unprocessed list of     items, you can use the     M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)/M     methods instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     BeginGetFolderContents method.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndGetFolderContents with it when ready     to complete. In this later case, the call to     EndGetFolderContents may block until the operation     completes.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can include a filtering mask to limit the files that are retrieved. For example, if Empty is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be retrieved. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving the entire contents of the current working folder. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     The listing lines can be manually parsed or modified via     the E:Xceed.Ftp.FtpClient.ParsingListingLine event.     If you would prefer to receive an unprocessed list of     items, you can use the     M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)/M     methods instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     BeginGetFolderContents method.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndGetFolderContents with it when ready     to complete. In this later case, the call to     EndGetFolderContents may block until the operation     completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawExtendedFeatures(System.AsyncCallback,System.Object)">
            <summary>Begins the process retrieving a list of the extended features that are implemented by the FTP server. Don't forget to call  EndGetRawExtendedFeatures!</summary>
            <remarks>    The list that is returned will be provided as it is     returned by the FTP server, without any modifications or     parsing. If none are implemented, an empty list will be     returned.     This method sends the FEAT command.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents">
            <summary>Begins the process of retrieving an unprocessed, clear text list representing the contents of the current working folder as sent by the FTP server and indicates if the entire listing or only filenames should be retrieved. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving an unprocessed, clear text list representing the contents of the current working folder as sent by the FTP server and indicates if the entire listing or only filenames should be retrieved. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods.     If namesOnly is set to true, the NLST command will be     sent to the FTP server and only the name of the items will be     returned.If namesOnly is set to false, the LIST command will be     sent to the FTP server all the available information will be     returned.     If you would prefer to receive a processed list of items,     you can use the     M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)/M     methods instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     BeginGetRawFolderContents/M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndGetRawFolderContents with it when ready to complete. In this     later case, the call to EndGetRawFolderContents may block until     the operation completes.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if Empty is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be retrieved. Some FTP servers may be case-sensitive!</param>
            <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving an unprocessed, clear text list representing the contents of the current working folder as sent by the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods.     If you would prefer to receive a processed list of items,     you can use the     M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)/M     methods instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     BeginGetRawFolderContents/M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndGetRawFolderContents with it when ready to complete. In this     later case, the call to EndGetRawFolderContents may block until     the operation completes.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if Empty is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be retrieved. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving an unprocessed, clear text list representing the entire contents of current working folder as sent by the FTP server and indicates if the entire listing or only filenames should be retrieved. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If namesOnly is set to true, the NLST command will be     sent to the FTP server and only the name of the items will be     returned.If namesOnly is set to false, the LIST command will be     sent to the FTP server and all the available information will     be returned.     If you want to retrieve the contents of another folder,     you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder.     The current working folder can be retrieved via the     Object)IAsyncResult) methods.     If you would prefer to receive a processed list of items,     you can use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)     methods instead.     The TYPE command will be sent regardless of the value of     the P:Xceed.Ftp.FtpClient.SendTypeCommand property when calling     the BeginGetRawFolderContents/M methods.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndGetRawFolderContents with it when     ready to complete. In this later case, the call to     EndGetRawFolderContents may block until the operation     completes.</remarks>
            <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving an unprocessed, clear text list representing the entire contents of current working folder as sent by the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     If you would prefer to receive a processed list of items,     you can use the     M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)/M     methods instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     BeginGetRawFolderContents methods.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndGetRawFolderContents with it when     ready to complete. In this later case, the call to     EndGetRawFolderContents may block until the operation     completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream">
            <summary>Begins the process of retrieving a direct access to the write-only data stream to send to.</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving a direct access to the write-only data stream to send to.</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client remains in a "SendingFile" state until the     stream returned by IAsyncResult) is closed.</remarks>
            <param name="remoteFilename">The filename of the file to write to. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retrieving a direct access to the write-only data stream to send to, indicating if existing data should be overwritten or appended to.</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client remains in a "SendingFile" state until the     stream returned by IAsyncResult) is closed.</remarks>
            <param name="remoteFilename">The filename of the file to write to. Some FTP servers may be case-sensitive!</param>
            <param name="append">true if existing data should be appended to; false otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin">
            <summary>Begins the anonymous login process of the FTP client to the FTP server to which it is connected. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>Begins the anonymous login process of the FTP client to the FTP server to which it is connected. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client must be connected to the FTP server prior     to calling this method.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndLogin with it when ready to complete.     In this later case, the call to EndLogin may block until the     operation completes.</remarks>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the login process of the FTP client to the FTP server to which it is connected using the specified username and password. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client must be connected to the FTP server prior     to calling this method.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndLogin with it when ready to complete.     In this later case, the call to EndLogin may block until the     operation completes.</remarks>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the login process of the FTP client to the FTP server to which it is connected using the specified username and password. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The FTP client must be connected to the FTP server prior     to calling this method.     When using a callback, the IAsyncResult is provided as a     parameter. You should call IAsyncResult) in that callback. When     NOT providing a callback, you should keep the returned     IAsyncResult and call EndLogin with it when ready to complete.     In this later case, the call to EndLogin may block until the     operation completes.</remarks>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile">
            <summary>Begins the process of retrieving the contents of the current working folder. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of receiving the specified file from the current working folder and stores it on the local system using the specified path and filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndReceiveFile     with it when ready to complete. In this later case, the call to     EndReceiveFile may block until the operation completes.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of receiving the specified file from the current working folder and stores it on the local system using the specified path and filename and indicates if the file should append itself to the local file if it already exists. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndReceiveFile     with it when ready to complete. In this later case, the call to     EndReceiveFile may block until the operation completes.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
            <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of receiving the specified file from the current working folder starting from the specified offset and stores it on the local system using the specified path and filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndReceiveFile     with it when ready to complete. In this later case, the call to     EndReceiveFile may block until the operation completes.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If append is true, the remote file will be appended to the end of the local file no matter what the value of offset. Therefore, to implement a real resume procedure, the size of the local file must be specified in offset and append must be set to true.</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of receiving the specified file from the current working folder starting from the specified offset and stores it on the local system using the specified path and filename indicating if the file should append itself to the local file if it already exists. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndReceiveFile     with it when ready to complete. In this later case, the call to     EndReceiveFile may block until the operation completes.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If append is true, the remote file will be appended to the end of the local file no matter what the value of offset. Therefore, to implement a real resume procedure, the size of the local file must be specified in offset and append must be set to true.</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
            <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>Begins the process of receiving the specified file from the current working folder to the specified Stream. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     The destination stream must be writable     (P:System.IO.Stream.CanWrite) and must be closed by the     user.     When using this overload of the BeginReceiveFile method,     in the E:Xceed.Ftp.FtpClient.ReceivingFile event, the     P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename property     will be F:System.String.Empty.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndReceiveFile     with it when ready to complete. In this later case, the call to     EndReceiveFile may block until the operation completes.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="destination">A reference to the Stream to which to receive the file.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>Begins the process of receiving the specified file from the FTP server's current working folder into the specified Stream, starting from the specified offset. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     The destination stream must be writable     (P:System.IO.Stream.CanWrite) and must be closed by the     user.     When using this overload of the BeginReceiveFile method,     in the E:Xceed.Ftp.FtpClient.ReceivingFile event, the     P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename property     will be F:System.String.Empty.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndReceiveFile     with it when ready to complete. In this later case, the call to     EndReceiveFile may block until the operation completes.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If append is true, the remote file will be appended to the end of the local file no matter what the value of offset. Therefore, to implement a real resume procedure, the size of the local file must be specified in offset and append must be set to true.</param>
            <param name="destination">A reference to the Stream to which to receive the file.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of retreiving the files that match the provided file mask from the current working folder and stores them on the local system in the specified folder. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    If a folder is specified in remoteFileMask, for example     "MyFiles/*" and recreateFolderStructure is set to true, the     "MyFiles" folder will be recreated locally in localFolder. If     only a file mask is specified in remoteFileMask, the     files/folders will be recreated directly in localFolder.     By default, the files that match the provided file mask     will be received from the current working folder. If you want     to receive the files from another location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     By default, if an error occurs during the multiple-file     transfer, the entire operation will be aborted. To     change this behavior, the     E:Xceed.Ftp.FtpClient.MultipleFileTransferError event must be     handled and its     P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action property     set to either Retry or Ignore.     The TYPE command will be sent regardless of the value of     the P:Xceed.Ftp.FtpClient.SendTypeCommand property when calling     the BeginReceiveMultipleFiles method during the initial listing     phase.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndReceiveMultipleFiles(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndReceiveMultipleFiles with it when ready to complete. In this     later case, the call to EndReceiveMultipleFiles may block until     the operation completes.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to receive. This parameter can include a filtering mask to limit the files that are received. For example, if Empty is specified, the entire contents of the current working folder will be received. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be received. Some FTP servers may be case-sensitive!</param>
            <param name="localFolder">The path and name of the local folder where the files will be stored.</param>
            <param name="recursive">true if the files in child folders should also be received; false otherwise.</param>
            <param name="recreateFolderStructure">true if the remote directory structure should be recreated on the local machine; false otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of renaming a file on the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be renamed in the current     working folder. If you want to rename the file in another     location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndRenameFile(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call EndRenameFile     with it when ready to complete. In this later case, the call to     EndRenameFile may block until the operation completes.</remarks>
            <param name="currentFilename">The filename of the file to rename. Some FTP servers may be case-sensitive!</param>
            <param name="newFilename">The new filename. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendCustomCommand(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending a custom command to the FTP server. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The BeginSendCustomCommand method is used to send     FTP commands. This means that commands you enter using     the Windows command-line FTP (such as "dir", "put" or "debug")     are not the commands that are actually sent to the FTP server.     Although these commands might be recognized by some FTP     servers, they are not guaranteed to work!.     When sending a custom FTP command, the local folder     separator character will not be replaced by the     ServerFolderSeparator to allow the local folder separator     character to be sent "as is".     Not all commands are supported by all FTP servers. In     order to determine which commands are supported, you can use     the     BeginSendCustomCommand/M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)     methods to send the "HELP" command. For     exampleM:Xceed.Ftp.AsyncFtpClient.BeginSendFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.BaseStoreFileFtpCommand,System.AsyncCallback,System.Object)),     RETR     (M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.RestartFtpCommand,Xceed.Ftp.Engine.RetrieveFileFtpCommand,System.AsyncCallback,System.Object)),     NLST and LIST     (M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)),     etc.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndSendCustomCommand with it when ready to complete. In this     later case, the call to EndSendCustomCommand may block until     the operation completes.</remarks>
            <param name="command">The command to send to the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile">
            <summary>Begins the process of sending the data from the specified Stream to the FTP server's current working folder. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the data from the specified Stream to the FTP server's current working folder. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using this overload of the BeginSendFile method, in     the E:Xceed.Ftp.FtpClient.SendingFile event, the     P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename property     will be F:System.String.Empty. This overload will also ignore     the value of the P:Xceed.Ftp.FtpClient.PreAllocateStorage     property.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndSendFile with it     when ready to complete. In this later case, the call to     EndSendFile may block until the operation completes.</remarks>
            <param name="source">A Stream whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using the same filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The file will be sent to the current working folder,     using the same filename. If you want to send the file to     another location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndSendFile with it     when ready to complete. In this later case, the call to     EndSendFile may block until the operation completes.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the specified file to the FTP server's current working folder using the same filename and indicating if it should append itself to the remote file if it already exists. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The file will be sent to the current working folder,     using the same filename. If you want to send the file to     another location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndSendFile with it     when ready to complete. In this later case, the call to     EndSendFile may block until the operation completes.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using the specified filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     If the remote file already exists, it will be     overwritten.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndSendFile with it     when ready to complete. In this later case, the call to     EndSendFile may block until the operation completes.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Some FTP servers may be case-sensitive!</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the specified file to the FTP server's current working folder, indicating if it should append itself to the remote file if it already exists, and stores it using the specified filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndSendFile with it     when ready to complete. In this later case, the call to     EndSendFile may block until the operation completes.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Some FTP servers may be case-sensitive!</param>
            <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the data from the specified Stream to the FTP server's current working folder, indicating if it should append itself to the remote file if it already exists, and stores it using the specified filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder. Absolute paths     can also be provided, however some FTP servers might not     support absolute paths and different server types may have     different ways of representing absolute paths.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using this overload of the BeginSendFile method, in     the E:Xceed.Ftp.FtpClient.SendingFile event, the     P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename property     will be F:System.String.Empty. This overload will also ignore     the value of the P:Xceed.Ftp.FtpClient.PreAllocateStorage     property.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult) in     that callback. When NOT providing a callback, you should     keep the returned IAsyncResult and call EndSendFile with it     when ready to complete. In this later case, the call to     EndSendFile may block until the operation completes.</remarks>
            <param name="source">A Stream whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Some FTP servers may be case-sensitive!</param>
            <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName">
            <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using a unique filename. Don't forget to call IAsyncResult)!</summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using a unique filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The file will be sent to the current working folder. If     you want to send the file to another location, you could use     the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndSendFileToUniqueName with it when ready to complete. In this     later case, the call to EndSendFileToUniqueName may block until     the operation completes.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName(System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the data from the specified Stream to the FTP server's current working folder and stores it using a unique filename. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The file will be sent to the current working folder. If     you want to send the file to another location, you could use     the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     When using this overload of the BeginSendFileToUniqueName     method, in the E:Xceed.Ftp.FtpClient.SendingFile event, the     P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename property     will be F:System.String.Empty. This overload will also ignore     the value of the P:Xceed.Ftp.FtpClient.PreAllocateStorage     property.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndSendFileToUniqueName with it when ready to complete. In this     later case, the call to EndSendFileToUniqueName may block until     the operation completes.</remarks>
            <param name="source">A Stream whose data is to be sent to the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendMultipleFiles(System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>Begins the process of sending the files that match the provided file mask to the FTP server's current working folder. Don't forget to call IAsyncResult)!</summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>    The files that match the provided file mask will be sent     to the current working folder. If you want to send the files to     another location, you could use the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)     methods and/or     M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)/M     methods to change the current working folder.     The current working folder can be retrieved via the     Object)/M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)     methods.     By default, if an error occurs during the multiple-file     transfer, the entire operation will be aborted. To     change this behavior, the     E:Xceed.Ftp.FtpClient.MultipleFileTransferError event must be     handled and its     P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action property     set to either Retry or Ignore.     When using a callback, the T:System.IAsyncResult is     provided as a parameter. You should call     M:Xceed.Ftp.AsyncFtpClient.EndSendMultipleFiles(System.IAsyncResult)     in that callback. When NOT providing a callback, you     should keep the returned IAsyncResult and call     EndSendMultipleFiles with it when ready to complete. In this     later case, the call to EndSendMultipleFiles may block until     the operation completes.</remarks>
            <param name="localFileMask">The full path and file mask of the local files to send. This parameter can include a filtering mask to limit the files that are sent. For example, if "c:\temp\*" is specified, the entire contents of the "c:\temp" will be sent. If "c:\temp\*.txt" is used, all the files in the "c:\temp" folder that have the TXT extension will be sent. The "temp" folder will not be recreated on the FTP server.</param>
            <param name="recursive">true if the files in child folders should also be sent; false otherwise.</param>
            <param name="recreateFolderStructure">true if the local directory structure should be recreated on the FTP server; false otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndAbort(System.IAsyncResult)">
            <summary>Ends the process of aborting the current FTP command</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)">
            <summary>Ends the authentification and encryption of the current FTP connection.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)">
            <summary>Ends the process of changing the current working folder of the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeDataChannelProtection(System.IAsyncResult)">
            <summary>Ends the change of the data channel protection..</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)">
            <summary>Ends the process of changing the current working folder of the FTP server to the parent folder.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeTransferMode(System.IAsyncResult)">
            <summary>Ends the process of changing the transfer mode.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)">
            <summary>Ends the process of changing the currently logged-in user.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndClearCommandChannel(System.IAsyncResult)">
            <summary>Ends the clearing of the command channel.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)">
            <summary>Ends the connection process of the FTP client to an FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndCreateFolder(System.IAsyncResult)">
            <summary>Ends the process of creating a folder on the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFile(System.IAsyncResult)">
            <summary>Ends the process of deleting a file from the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)">
            <summary>Ends the process of deleting a folder from the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>Ends the process of disconnecting the FTP client from the FTP server to which it is connected.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)">
            <summary>Ends the process of retrieving the current working folder of the FTP server.</summary>
            <returns>A string representing the FTP server's current folder. The path returned is an absolute path that can be used with the Object)/M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult) methods to go directly to this folder regardless of the current working folder.</returns>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)">
            <summary>Ends the process of retrieving a direct access to the readonly data stream being received.</summary>
            <returns>The data Stream to read from.</returns>
            <remarks>    The FTP client will remain in a "ReceivingFile" state     until the stream is closed.</remarks>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)">
            <summary>Ends the process of retrieving the contents of the current working folder.</summary>
            <returns>A reference to an FtpItemInfoList collection containing FtpItemInfo objects each representing a file matched by remoteFileMask.</returns>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetRawExtendedFeatures(System.IAsyncResult)">
            <summary>Ends the process of retrieving an unprocessed, clear text list of the extended features that are implemented by an FTP server.</summary>
            <returns>An unprocessed text list containing the extended features that are implemented by an FTP server. Can be empty if no extended features are implemented by the FTP server.</returns>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)">
            <summary>Ends the process of retrieving an unprocessed, clear text list representing the contents of the current working folder</summary>
            <returns>A reference to a StringList collection contain a list of unprocessed strings each representing an item folder. For example: "07-25-03 11:46AM 101 001fdf63.xml". Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetUploadStream(System.IAsyncResult)">
            <summary>Ends the process of retrieving a direct access to the write-only data stream to send to.</summary>
            <returns>The data Stream to write to.</returns>
            <remarks>    The FTP client will remain in a "SendingFile" state until     the stream is closed.</remarks>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)">
            <summary>Ends the login process of the FTP client to the FTP server to which it is connected.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)">
            <summary>Ends the process of receiving a file from the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndReceiveMultipleFiles(System.IAsyncResult)">
            <summary>Ends the process of retreiving the files that match the provided file mask from the current working folder and stores them on the local system in the specified folder.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndRenameFile(System.IAsyncResult)">
            <summary>Ends the process of renaming a file on the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)">
            <summary>Ends the process of sending a custom command to the FTP server.</summary>
            <returns>The reply received from the FTP server in response to the custom command.</returns>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)">
            <summary>Ends the process of sending a file to the FTP server.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)">
            <summary>Ends the process of sending a file to the FTP server's current working folder and storing it using a unique filename.</summary>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendMultipleFiles(System.IAsyncResult)">
            <summary>Ends the process of sending the files that match the provided file mask to the FTP server's current working folder.</summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
        </member>
        <member name="T:Xceed.Ftp.Certificate">
            <summary>Class which represents an X.509 certificate. Note: This class is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="M:Xceed.Ftp.Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>Initializes a new intance of the Certificate class using the specified certificate.</summary>
            <param name="certificate">The X509Certificate to use.</param>
        </member>
        <member name="T:Xceed.Ftp.CertificateReceivedEventArgs">
            <summary>Provides information on the certificate that is received from the FTP server. Note: This class is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Action">
            <summary>Gets or sets the verification action to take when a certificate is received from an FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Flags">
            <summary>Gets or sets the verification flags used to verify the FTP server's certificate.</summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.ServerCertificate">
            <summary>Gets the certificate received from the FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Status">
            <summary>Gets the verification status of the certificate received from the FTP server.</summary>
        </member>
        <member name="T:Xceed.Ftp.CertificateRequiredEventArgs">
            <summary>Provides information on the certificate that the FTP server requires from the FTP client. Note: This class is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateRequiredEventArgs.Certificate">
            <summary>Gets or sets the FTP client's certificate that is required by the FTP server.</summary>
        </member>
        <member name="T:Xceed.Ftp.CommandSentEventArgs">
            <summary>Provides information on the command that has been sent to the FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.CommandSentEventArgs.Command">
            <summary>Gets the command that was sent to the FTP server.</summary>
        </member>
        <member name="T:Xceed.Ftp.FileTransferStatusEventArgs">
            <summary>Provides progress information while sending or receiving one or more files.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesPercent">
            <summary>Gets the percentage of the bytes that have been transferred for the entire group of files to transfer.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesPerSecond">
            <summary>Gets the average throughput for the entire group of files being transferred, in bytes per second.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesSkipped">
            <summary>Gets the total amount of bytes that were skipped so far for the group of files being transferred.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesTotal">
            <summary>Gets the total amount of bytes of all files that will be transferred.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesTransferred">
            <summary>Gets the total amount of bytes transferred so far for the group of files being transferred.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesPercent">
            <summary>Gets the percentage of bytes transferred for the current file.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesPerSecond">
            <summary>Gets the current file's average throughput in bytes per second.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesSkipped">
            <summary>Gets the amount of bytes that were skipped for the current file.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesTotal">
            <summary>Gets the total amount of bytes for the current file.</summary>
            <remarks>    This value is not always available when calling the     String) method since some FTP servers will not return the size     of a file in the first reply to the RETR (ReceiveFile) FTP     command and the FTP client will not request a listing of the     file to retrieve when using the ReceiveFile method. As a     workaround, the Boolean) method can be used (non-recursively!)     to receive the file.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesTransferred">
            <summary>Gets the amount of bytes transferred for the current file.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesPercent">
            <summary>Gets the percentage of files that have been transferred so far.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesSkipped">
            <summary>Gets the total number of files skipped so far.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesTotal">
            <summary>Gets the total number of files to transfer.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesTransferred">
            <summary>Gets the total number of files transferred so far.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.LocalFilename">
            <summary>Gets the path and filename of the local file.</summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.RemoteFilename">
            <summary>Gets the filename of the remote file.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpAbortException">
            <summary>The exception that is thrown by the FTP client when the current operation is aborted.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAbortException.#ctor">
            <summary>Initializes a new instance of the FtpAbortException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAbortException.#ctor">
            <summary>Initializes a new instance of the FtpAbortException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAbortException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the FtpAbortException class with a reference to the inner exception that is the cause of this exception.</summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpAS400ListingParser">
            <summary>Class which represents a parser that is used to parse lines received from an AS400 FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAS400ListingParser.#ctor">
            <summary>Initializes a new instance of the FtpAS400ListingParser class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAS400ListingParser.ParseLine(System.String)">
            <summary>Parses the specified listing line received from the FTP server.</summary>
            <returns>A reference to an FtpItemInfo object containing the information that was parsed from the listing line received from the FTP server. Can be Empty to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be $$NULL$$ to indicate that the listing line was not recognized as a valid AS400 listing line.</returns>
            <remarks>    The AS400 listing parser will try to parse the listing     lines received from the FTP server. After 5 failed attempts,     the AS400 listing parser will be discarded by the     FtpListingParserList.</remarks>
            <param name="line">The listing line received from the FTP server.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpClient">
            <summary>This class provides you with quick and easy access to FTP functionalities in the same style as the ActiveX version of the Xceed FTP Library.</summary>
            <remarks>    Xceed FTP for .NET is a highly multi-threaded library     that uses asynchronous operations on sockets and network     streams to allow fast and robust execution. This results in     most events being called from a different thread than the one     that called the initiating method.     When building a GUI application using     System.Windows.Forms, UI elements (controls and forms) must     always be accessed from the main thread since they have     thread-affinity for the main STA thread. This is done using     Control.Invoke or Control.BeginInvoke.     To avoid the need to call Control.Invoke or     Control.BeginInvoke, the SynchronizingObject property can be     set to any object implementing the ISynchronizeInvoke     interface. In doing so, the library will take care of raising     the events on the thread of that object.     In order to avoid cross-blocking calls, the library will     call DoEvents to pump the messages on the main thread when     using blocking methods.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.#ctor">
            <summary>Initializes a new instance of the FtpClient class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Abort">
            <summary>Aborts the current FTP command.</summary>
            <remarks>    The Abort method will send the ABOR command to the FTP     server.     This method is the equivalent of the Abort property of     the ActiveX version of the Xceed FTP Library.     Any data connection will be disconnected before reading     the reply to the Abort (ABOR) command.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Authenticate">
            <summary>Authenticates and encrypts the current FTP connection.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Authenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection)">
            <summary>Authenticates and encrypts the current FTP connection.</summary>
            <remarks>    The ConnectFtpCommand) method that requires an     authentication method, verification flags and a client     certificate can be used in the case where the FTP server does     not allow authentication after the connection has been     established.     If the FTP server requires a certificate or the one     provided was rejected, the CertificateRequired will be raised.     When the FTP server's certificate is received and verified, the     CertificateReceived event will be raised.     The Authenticate method will send the AUTH and PROT     commands to the FTP server.</remarks>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="dataProtection">How the data channels will be protected.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Authenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>Authenticates and encrypts the current FTP connection.</summary>
            <remarks>    The ConnectFtpCommand) method that requires an     authentication method, verification flags and a client     certificate can be used in the case where the FTP server does     not allow authentication after the connection has been     established.     If the FTP server requires a certificate or the one     provided was rejected, the CertificateRequired will be raised.     When the FTP server's certificate is received and verified, the     CertificateReceived event will be raised.     The Authenticate method will send the AUTH and PROT     commands to the FTP server.     When using this overload of the BeginAuthenticate method,     the data channel is not secured     (DataChannelProtection.Clear).</remarks>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(System.String)">
            <summary>Changes the current working folder of the FTP server.</summary>
            <remarks>    Both relative and absolute paths can be provided to the     ChangeCurrentFolder method to change the FTP server's current     working folder, however some FTP servers might not support     absolute paths and different server types may have different     ways of representing absolute paths.     The FTP server's current working folder is used by the     FTP server as the base folder from which to perform file     operations such as obtaining folder contents, receiving,     sending and deleting files, changing the current folder,     etc.     The ChangeToParentFolder method should be used in the     case where you want the parent folder to be the new current     working folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The ChangeCurrentFolder method will send the CWD command     to the FTP server.</remarks>
            <param name="folder">The new current working folder. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeDataChannelProtection(Xceed.Ftp.DataChannelProtection,System.Security.Authentication.SslProtocols)">
            <summary>Changes the data channel protection.</summary>
            <param name="dataChannelProtection">    The DataChannelProtection to use.</param>
            <param name="sslProtocol">The SslProtocols to use.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeToParentFolder">
            <summary>Changes the current working folder of the FTP server to the parent folder.</summary>
            <remarks>    The FTP server's current working folder is used by the     FTP server as the base folder from which to perform file     operations such as obtaining folder contents, receiving,     sending and deleting files, changing the current folder, etc.     It can be retrieved via the CurrentFolderFtpCommand)     method.     The ChangeToParentFolder method will send CDUP command to     the FTP server.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeTransferMode(Xceed.Ftp.TransferMode)">
            <summary>Changes the current transfer mode.Changes the current transfer mode.</summary>
            <param name="transferMode">A TransferMode value representing the new transfer mode.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser">
            <summary>Changes the currently logged-in user to the anonymous user without disconnecting from the FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser">
            <summary>Changes the currently logged-in user to the anonymous user without disconnecting from the FTP server.</summary>
            <remarks>    The ChangerUser method will send the REIN, USER and PASS     commands to the FTP server.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser(System.String,System.String)">
            <summary>Changes the currently logged-in user to the specified user without disconnecting from the FTP server.</summary>
            <remarks>    The ChangeUser method will send the REIN, USER and PASS     commands to the FTP server.</remarks>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser(System.String,System.String,System.String)">
            <summary>Changes the currently logged-in user to the specified user and account without disconnecting from the FTP server.</summary>
            <remarks>    The ChangeUser method will send the REIN, USER, PASS and     ACCT commands to the FTP server.</remarks>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ClearCommandChannel">
            <summary>Clears the command channel after login to facilitate firewall NAT when connecting using a secure data channel.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect">
            <summary>Connects the FTP client to an FTP server on port 21.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String)">
            <summary>Connects the FTP client to an FTP server on port 21.</summary>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the AccountFtpCommand) method to     log-in to the FTP server.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>Connects the FTP client to a secure FTP server on port 21. Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <remarks>    If the IP address contains a port (ie.:     192.168.0.42:2121) then the FTP client will connect on the     specified port rather than port 21 (default).     This method will only connect you to the FTP server. Once     connected, you must call the AccountFtpCommand) method to     log-in to the FTP server.     The PBSZ and PROT P commands are always when connecting     to a server using implicit SSL/TLS to ensure that the     DataChannel is always encrypted.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,System.Int32)">
            <summary>Connects the FTP client to an FTP server using the specified hostname and port.</summary>
            <remarks>    This method will only connect you to the FTP server. Once     connected, you must call the AccountFtpCommand) method to     log-in to the FTP server.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>Connects the FTP client to a secure FTP server using the specified hostname and port. Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <remarks>    This method will only connect you to the FTP server. Once     connected, you must call the AccountFtpCommand) method to     log-in to the FTP server.     The PBSZ and PROT P commands are always when connecting     to a server using implicit SSL/TLS to ensure that the     DataChannel is always encrypted.</remarks>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.Net.IPEndPoint)">
            <summary>Connects the FTP client to an FTP server using the specified IPEndPoint (IP address and port).</summary>
            <remarks>    This method will only connect you to the FTP server. Once     connected, you must call the AccountFtpCommand) method to     log-in to the FTP server.</remarks>
            <param name="serverAddress">An IPEndPoint representing the IP address and port of the FTP server to connect to. If 0 is specified for the port, 21 will be used.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.Net.IPEndPoint,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>Connects the FTP client to a secure FTP server using the specified hostname and port. Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <remarks>The PBSZ and PROT P commands are always when connecting to a server using implicit SSL/TLS to ensure that the DataChannel is always encrypted.</remarks>
            <param name="serverAddress">An IPEndPoint representing the IP address and port of the FTP server to connect to. If 0 is specified for the port, 21 will be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.CreateFolder(System.String)">
            <summary>Create a folder on the FTP server.</summary>
            <remarks>    By default, the folder will be created in the current     working folder. If you want to create the folder in another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The CreateFolder method will send the MKD command to the     FTP server.</remarks>
            <param name="folder">The name of the folder to create. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFile(System.String)">
            <summary>Deletes a file from the FTP server.</summary>
            <remarks>    By default, the file will be deleted from the current     working folder. If you want to delete the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The DeleteFile method will send the DELE command to the     FTP server.</remarks>
            <param name="file">The name of the file to delete. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFolder">
            <summary>Deletes a folder from the FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFolder(System.String)">
            <summary>Deletes a folder from the FTP server.</summary>
            <remarks>    By default, the folder will be deleted from the current     working folder. If you want to delete the folder from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     This overload of the DeleteFolder method requires that     the folder be empty in order to delete it. Some FTP servers     will allow folders that contain child items to be deleted,     therefore, it is possible that calling this overload of the     DeleteFolder method will delete a folder even if it contains     child items.     The DeleteFolder method will send the RMD command to the     FTP server.     This method is the equivalent of the RemoveFolder method     of the ActiveX version of the Xceed FTP Library.</remarks>
            <param name="folder">The name of the folder to delete. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFolder(System.String,System.Boolean)">
            <summary>Deletes a folder, and optionally each item in the folder, from the FTP server.</summary>
            <remarks>    By default, the folder will be deleted from the current     working folder. If you want to delete the folder from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     Some FTP servers will allow folders that contain child     items to be deleted, therefore, it is possible that calling     this overload of the DeleteFolder method with its recursive     parameter set to false will still delete each item in the     folder (including the folder).     The DeleteFolder method will send the RMD command and     optionally the PWD, CWD, TYPE, PASV or PORT and LIST commands     to the FTP server.     This method is the equivalent of the RemoveFolder method     of the ActiveX version of the Xceed FTP Library.</remarks>
            <param name="folder">The name of the folder to delete. Some FTP servers may be case-sensitive!</param>
            <param name="recursive">true if each item in the folder should also be deleted; false otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Disconnect">
            <summary>Disconnects the FTP client from the FTP server to which it is connected.</summary>
            <remarks>    If the FTP client is in an invalid state, for example,     sending a file, the Disconnect method will throw an exception.     It is up to the user to call Abort before calling     Disconnect.     The Disconnect method will send the QUIT command to the     FTP server and make sure that the command connection is     closed.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetCurrentFolder">
            <summary>Retrieves the current working folder of the FTP server.</summary>
            <returns>A string representing the FTP server's current folder. The path returned is an absolute path that can be used with the ChangeFolderFtpCommand) to go directly to this folder regardless of the current working folder.</returns>
            <remarks>    The FTP server's current working folder is used by the     FTP server as the base folder from which to perform file     operations such as obtaining folder contents, receiving,     sending and deleting files, changing the current folder, etc.     It can be changed using the ChangeFolderFtpCommand) and     ChangeToParentFolder methods.     The GetCurrentFolder method will send the PWD command to     the FTP server.     This method is the equivalent of the CurrentFolder     property of the ActiveX version of the Xceed FTP     Library.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream">
            <summary>Retrieves a direct access to the readonly data stream being received.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream(System.String)">
            <summary>Retrieves a direct access to the readonly data stream being received.</summary>
            <returns>The data Stream to read from.</returns>
            <remarks>    The FTP client will remain in a "ReceivingFile" state     until the stream is closed.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream(System.String,System.Int64)">
            <summary>Retrieves a direct access to the readonly data stream being received, beginning at the specified offset.</summary>
            <returns>The data Stream to read from</returns>
            <remarks>    The FTP client will remain in a "ReceivingFile" state     until the stream is closed.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetFolderContents">
            <summary>Retrieves the contents of the current working folder.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetFolderContents(System.String)">
            <summary>Retrieves the contents of the current working folder.</summary>
            <returns>A reference to an FtpItemInfoList collection containing FtpItemInfo objects each representing a file matched by remoteFileMask.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The listing lines can be manually parsed or modified via     the ParsingListingLine event.     If you would prefer to receive an unprocessed list of     items, you can use the ListFtpCommand) method instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the GetFolderContents     method.     The GetFolderContents method will send the LIST and PASV     or PORT and TYPE commands to the FTP server.     This method is the equivalent of the GetFolderContents     and ListFolderContents methods of the ActiveX version of the     Xceed FTP Library.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can include a filtering mask to limit the files that are retrieved. For example, if Empty is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be retrieved. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetFolderContents">
            <summary>Retrieves the entire contents of the current working folder.</summary>
            <returns>A reference to an FtpItemInfoList collection containing FtpItemInfo objects each representing a file matched by remoteFileMask.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The listing lines can be manually parsed or modified via     the ParsingListingLine event.     If you would prefer to receive an unprocessed list of     items, you can use the ListFtpCommand) method instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the GetFolderContents     method.     The GetFolderContents method will send the LIST and PASV     or PORT and TYPE commands to the FTP server.     This method is the equivalent of the GetFolderContents     and ListFolderContents methods of the ActiveX version of the     Xceed FTP Library.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawExtendedFeatures">
            <summary>Retrieves an unprocessed, clear text list of the extended features that are implemented by an FTP server.Retrieves an unprocessed, clear text list of the extended features that are implemented by an FTP server.</summary>
            <remarks>    The list that is returned will be provided as it is     returned by the FTP server, without any modifications or     parsing. If none are implemented, an empty list will be     returned.     This method sends the FEAT command.     The list that is returned will be provided as it is     returned by the FTP server, without any modifications or     parsing. If none are implemented, an empty list will be     returned.     This method sends the FEAT command.</remarks>
            <returns>An unprocessed text list containing the extended features that are implemented by an FTP server. Can be empty if no extended features are implemented by the FTP server.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents">
            <summary>Retrieves an unprocessed, clear text list representing the entire contents of current working folder as sent by the FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents">
            <summary>Retrieves an unprocessed, clear text list representing the entire contents of current working folder as sent by the FTP server.</summary>
            <returns>A reference to a StringList collection contain a list of unprocessed strings each representing an item folder. For example: "07-25-03 11:46AM 101 001fdf63.xml". Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     If you would prefer to receive a processed list of items,     you can use the ListFtpCommand) method instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     GetRawFolderContents methods.     The GetRawFolderContents method will send the LIST and     PASV or PORT and TYPE commands to the FTP server.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.String,System.Boolean)">
            <summary>Retrieves an unprocessed, clear text list representing the contents of the current working folder as sent by the FTP server and indicates if the entire listing or only filenames should be retrieved.</summary>
            <returns>A reference to a StringList collection containing a list of unprocessed strings each representing a file matched by remoteFileMask. For example: "07-25-03 11:46AM 101 001fdf63.xml". Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     If namesOnly is set to true, the NLST command will be     sent to the FTP server and only the name of the items will be     returned.If namesOnly is set to false, the LIST command will be     sent to the FTP server all the available information will be     returned.     If you would prefer to receive a processed list of items,     you can use the ListFtpCommand) method instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     GetRawFolderContents method.     The GetRawFolderContents method will send the LIST or     NLST and PASV or PORT and TYPE commands to the FTP     server.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if Empty is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be retrieved. Some FTP servers may be case-sensitive!</param>
            <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.String)">
            <summary>Retrieves an unprocessed, clear text list representing the contents of the current working folder as sent by the FTP server.</summary>
            <returns>A reference to a StringList collection containing a list of unprocessed strings each representing a file matched by remoteFileMask. For example: "07-25-03 11:46AM 101 001fdf63.xml". Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
            <remarks>    If you want to retrieve the contents of another folder,     you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     If you would prefer to receive a processed list of items,     you can use the ListFtpCommand) method instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     GetRawFolderContents method.     The GetRawFolderContents method will send the LIST and     PASV or PORT and TYPE commands to the FTP server.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if Empty is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be retrieved. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.Boolean)">
            <summary>Retrieves an unprocessed, clear text list representing the entire contents of current working folder as sent by the FTP server and indicates if the entire listing or only filenames should be retrieved.</summary>
            <returns>A reference to a StringList collection contain a list of unprocessed strings each representing an item folder. For example: "07-25-03 11:46AM 101 001fdf63.xml". Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
            <remarks>    If namesOnly is set to true, the NLST command will be     sent to the FTP server and only the name of the items will be     returned.If namesOnly is set to false, the LIST command will be     sent to the FTP server and all the available information will     be returned.     If you want to retrieve the contents of another folder,     you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     If you would prefer to receive a processed list of items,     you can use the ListFtpCommand) method instead.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     GetRawFolderContents method.     The GetRawFolderContents method will send the LIST or     NLST and PASV or PORT and TYPE commands to the FTP     server.</remarks>
            <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetUploadStream">
            <summary>Retrieves a direct access to the write-only data stream to send to.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetUploadStream(System.String)">
            <summary>Retrieves a direct access to the write-only data stream to send to.</summary>
            <returns>The data Stream to write to.</returns>
            <remarks>    The FTP client remains in a "SendingFile" state until the     stream is closed.</remarks>
            <param name="remoteFilename">The filename of the file to write to. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetUploadStream(System.String,System.Boolean)">
            <summary>Retrieves a direct access to the write-only data stream to send to, indicating if existing data should be overwritten or appended to.</summary>
            <returns>The data Stream to write to.</returns>
            <remarks>    The FTP client remains in a "SendingFile" state until the     stream is closed.</remarks>
            <param name="remoteFilename">The filename of the file to write to. Some FTP servers may be case-sensitive!</param>
            <param name="append">true if existing data should be appended to; false otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login">
            <summary>Login the FTP client anonymously to the FTP server to which it is connected.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login">
            <summary>Login the FTP client anonymously to the FTP server to which it is connected.</summary>
            <remarks>    The FTP client must be connected to the FTP server prior     to calling this method.     The Login method will send the USER and PASS commands to     the FTP server.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login(System.String,System.String)">
            <summary>Login the FTP client to the FTP server to which it is connected using the specified username and password.</summary>
            <remarks>    The FTP client must be connected to the FTP server prior     to calling this method.     The Login method will send the USER and PASS commands to     the FTP server.</remarks>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login(System.String,System.String,System.String)">
            <summary>Login the FTP client to the FTP server to which it is connected using the specified username and password.</summary>
            <remarks>    The FTP client must be connected to the FTP server prior     to calling this method.     The Login method will send the USER, PASS and ACCT     commands to the FTP server.</remarks>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile">
            <summary>Receives the specified file from the current working folder and stores it on the local system using the specified path and filename.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String)">
            <summary>Receives the specified file from the current working folder and stores it on the local system using the specified path and filename.</summary>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The ReceiveFile method will send the RETR and PORT or     PASV commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String,System.Boolean)">
            <summary>Receives the specified file from the current working folder and stores it on the local system using the specified path and filename and indicates if the file should append itself to the local file if it already exists.</summary>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The ReceiveFile method will send the RETR and PORT or     PASV commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
            <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.String)">
            <summary>Receives the specified file from the current working folder starting from the specified offset and stores it on the local system using the specified path and filename.</summary>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The ReceiveFile method will send the RETR, REST and PORT     or PASV commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.String,System.Boolean)">
            <summary>Receives the specified file from the current working folder starting from the specified offset and stores it on the local system using the specified path and filename indicating if the file should append itself to the local file if it already exists.</summary>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The ReceiveFile method will send the RETR, REST and PORT     or PASV commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If append is true, the remote file will be appended to the end of the local file no matter what the value of offset. Therefore, to implement a real resume procedure, the size of the local file must be specified in offset and append must be set to true.</param>
            <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
            <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.IO.Stream)">
            <summary>Receives the specified file from the current working folder to the specified Stream.</summary>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The destination stream must be writable (CanWrite) and     must be closed by the user.     When using this overload of the ReceiveFile method, in     the ReceivingFile event, the LocalFilename property will be     Empty.     The ReceiveFile method will send the RETR and PORT or     PASV commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="destination">A reference to the Stream to which to receive the file.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.IO.Stream)">
            <summary>Receives the specified file from the FTP server's current working folder into the specified Stream, starting from the specified offset.</summary>
            <remarks>    By default, the file will be received from the current     working folder. If you want to receive the file from another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The destination stream must be writable (CanWrite) and     must be closed by the user.     When using this overload of the ReceiveFile method, in     the ReceivingFile event, the LocalFilename property will be     Empty.     The ReceiveFile method will send the RETR, REST and PORT     or PASV commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="remoteFilename">The filename of the file to retrieve. Some FTP servers may be case-sensitive!</param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
            <param name="destination">A reference to the Stream to which to receive the file.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Receives the files that match the provided file mask from the current working folder and stores them on the local system in the specified folder.</summary>
            <remarks>    If a folder is specified in remoteFileMask, for example     "MyFiles/*" and recreateFolderStructure is set to true, the     "MyFiles" folder will be recreated locally in localFolder. If     only a file mask is specified in remoteFileMask, the     files/folders will be recreated directly in localFolder.     By default, the files that match the provided file mask     will be received from the current working folder. If you want     to receive the files from another location, you could use the     ChangeFolderFtpCommand) and/or ChangeToParentFolder methods to     change the current working folder. Absolute paths can also be     provided, however some FTP servers might not support absolute     paths and different server types may have different ways of     representing absolute paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     By default, if an error occurs during the multiple-file     transfer, the entire operation will be aborted. To     change this behavior, the MultipleFileTransferError event must     be handled and its Action property set to either Retry or     Ignore.     The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the     ReceiveMultipleFiles method during the initial listing     phase.     The ReceiveMultipleFiles method will send the LIST, RETR,     PASV or PORT, TYPE, PWD and CWD commands to the FTP     server.</remarks>
            <param name="remoteFileMask">The file mask of the remote files to receive. This parameter can include a filtering mask to limit the files that are received. For example, if Empty is specified, the entire contents of the current working folder will be received. If "*.txt" is used, all the files in the current working folder that have the TXT extension will be received. Some FTP servers may be case-sensitive!</param>
            <param name="localFolder">The path and name of the local folder where the files will be stored.</param>
            <param name="recursive">true if the files in child folders should also be received; false otherwise.</param>
            <param name="recreateFolderStructure">true if the remote directory structure should be recreated on the local machine; false otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.RenameFile(System.String,System.String)">
            <summary>Renames a file on the FTP server.</summary>
            <remarks>    By default, the file will be renamed in the current     working folder. If you want to rename the file in another     location, you could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The RenameFile method will send the RNFR and RNTO     commands to the FTP server.</remarks>
            <param name="currentFilename">The filename of the file to rename. Some FTP servers may be case-sensitive!</param>
            <param name="newFilename">The new filename. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendCustomCommand(System.String)">
            <summary>Sends a custom command to the FTP server.</summary>
            <returns>The reply received from the FTP server in response to the custom command.</returns>
            <remarks>    The SendCustomCommand method is used to send FTP     commands. This means that commands you enter using the Windows     command-line FTP (such as "dir", "put" or "debug") are not the     commands that are actually sent to the FTP server. Although     these commands might be recognized by some FTP servers,     they are not guaranteed to work!.     When sending a custom FTP command, the local folder     separator character will not be replaced by the     ServerFolderSeparator to allow the local folder separator     character to be sent "as is".     Not all commands are supported by all FTP servers. In     order to determine which commands are supported, you can use     the SendCustomCommand method to send the "HELP" command. For     example: ftp.SendCustomCommand( "HELP" );.     The SendCustomCommand method does not support     custom commands that require a data connection such as STOR     (SendFileFtpCommandSequence)), RETR     (ReceiveFileFtpCommandSequence)), NLST and LIST     (ListFtpCommand)), etc.     This method is the equivalent of the SendCommand method     of the ActiveX version of the Xceed FTP Library.</remarks>
            <param name="command">The command to send to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile">
            <summary>Sends the specified file to the FTP server's current working folder and stores it using the same filename.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String)">
            <summary>Sends the specified file to the FTP server's current working folder and stores it using the same filename.</summary>
            <remarks>    The file will be sent to the current working folder,     using the same filename. If you want to send the file to     another location, you could use the ChangeFolderFtpCommand)     and/or ChangeToParentFolder methods to change the current     working folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The SendFile method will send the STOR and PASV or PORT     commands and optionally the TYPE and ALLO commands to the FTP     server.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.Boolean)">
            <summary>Sends the specified file to the FTP server's current working folder using the same filename and indicating if it should append itself to the remote file if it already exists.</summary>
            <remarks>    The file will be sent to the current working folder. If     you want to send the file to another location, you could use     the ChangeFolderFtpCommand) and/or ChangeToParentFolder methods     to change the current working folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The SendFile method will send the PASV or PORT and the     STOR or APPE commands and optionally the TYPE and ALLO commands     to the FTP server.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.String)">
            <summary>Sends the specified file to the FTP server's current working folder and stores it using the specified filename.</summary>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     If the remote file already exists, it will be     overwritten.     The SendFile method will send the PASV or PORT and STOR     commands and optionally the TYPE and ALLO commands to the FTP     server.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.String,System.Boolean)">
            <summary>Sends the specified file to the FTP server's current working folder, indicating if it should append itself to the remote file if it already exists, and stores it using the specified filename.</summary>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The SendFile method will send the PASV or PORT and STOR     or APPE commands and optionally the TYPE and ALLO commands to     the FTP server.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive!</param>
            <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>Sends the data from the specified Stream to the FTP server's current working folder, indicating if it should append itself to the remote file if it already exists, and stores it using the specified filename.</summary>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     When using this overload of the SendFile method, in the     SendingFile event, the LocalFilename property will be Empty.     This overload will also ignore the value of the     PreAllocateStorage property.     The SendFile method will send the PASV or PORT and STOR     or APPE commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="source">A Stream whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive!</param>
            <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.IO.Stream,System.String)">
            <summary>Sends the data from the specified Stream to the FTP server's current working folder.</summary>
            <remarks>    By default, the file will be sent to the current working     folder. If you want to send the file to another location, you     could use the ChangeFolderFtpCommand) and/or     ChangeToParentFolder methods to change the current working     folder. Absolute paths can also be provided, however some FTP     servers might not support absolute paths and different server     types may have different ways of representing absolute     paths.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     When using this overload of the SendFile method, in the     SendingFile event, the LocalFilename property will be Empty.     This overload will also ignore the value of the     PreAllocateStorage property.     The SendFile method will send the PASV or PORT and STOR     or APPE commands and optionally the TYPE command to the FTP     server.</remarks>
            <param name="source">A Stream whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName">
            <summary>Sends the specified file to the FTP server's current working folder and stores it using a unique filename.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName(System.String)">
            <summary>Sends the specified file to the FTP server's current working folder and stores it using a unique filename.</summary>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <remarks>    The file will be sent to the current working folder. If     you want to send the file to another location, you could use     the ChangeFolderFtpCommand) and/or ChangeToParentFolder methods     to change the current working folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     The SendFileToUniqueName method will send the STOU and     PASV or PORT commands and optionally the TYPE and ALLO commands     to the FTP server.</remarks>
            <param name="localFilename">The path and filename of the local file to send.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName(System.IO.Stream)">
            <summary>Sends the data from the specified Stream to the FTP server's current working folder and stores it using a unique filename.</summary>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <remarks>    The file will be sent to the current working folder. If     you want to send the file to another location, you could use     the ChangeFolderFtpCommand) and/or ChangeToParentFolder methods     to change the current working folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     When using this overload of the SendFileToUniqueName     method, in the SendingFile event, the LocalFilename property     will be Empty. This overload will also ignore the value of the     PreAllocateStorage property.     The SendFileToUniqueName method will send the STOU and     PASV or PORT commands and optionally the TYPE command to the     FTP server.</remarks>
            <param name="source">A Stream whose data is to be sent to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendMultipleFiles(System.String,System.Boolean,System.Boolean)">
            <summary>Sends the files that match the provided file mask to the FTP server's current working folder.</summary>
            <remarks>    The files that match the provided file mask will be sent     to the current working folder. If you want to send the files to     another location, you could use the ChangeFolderFtpCommand)     and/or ChangeToParentFolder methods to change the current     working folder.     The current working folder can be retrieved via the     CurrentFolderFtpCommand) method.     By default, if an error occurs during the multiple-file     transfer, the entire operation will be aborted. To     change this behavior, the MultipleFileTransferError event must     be handled and its Action property set to either Retry or     Ignore.     The SendMultipleFiles method will send the STOR and PASV     or PORT commands and optionally the PWD, TYPE, ALLO, CWD and     MKD commands to the FTP server.</remarks>
            <param name="localFileMask">The full path and file mask of the local files to send. This parameter can include a filtering mask to limit the files that are sent. For example, if "c:\temp\*" is specified, the entire contents of the "c:\temp" will be sent. If "c:\temp\*.txt" is used, all the files in the "c:\temp" folder that have the TXT extension will be sent. The "temp" folder will not be recreated on the FTP server.</param>
            <param name="recursive">true if the files in child folders should also be sent; false otherwise.</param>
            <param name="recreateFolderStructure">true if the local directory structure should be recreated on the FTP server; false otherwise.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Busy">
            <summary>Gets a boolean value indicating if the FTP client is currently performing an FTP operation. For detailed state information, consult the State property.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Connected">
            <summary>Gets a boolean value indicating if the FTP client is connected to an FTP server. For detailed state information, consult the State property.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.DataTransferBufferSize">
            <summary>Gets or sets a value representing the size of the buffer used during data transfers.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Encoding">
            <summary>Gets or sets the Encoding that is used to encode commands sent to the server, and decode replies and folder listings received from the server.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.HostName">
            <summary>Gets the host name used to connect, or an empty string if not connected.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.KeepAliveInterval">
            <summary>Gets or sets the interval, in seconds, at which a NOOP command is sent on the command channel during a file transfer.</summary>
            <remarks>    This property currently only applies to file     transfers.     Setting this property can be useful to prevent routers     from prematurely closing the command channel while a long data     transfer is taking place.     It is generally not necessary to set a value less than 15     minutes (900 seconds).</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.ListingParsers">
            <summary>Gets a collection of FtpListingParser objects that are used to parse the lines returned by calls to various methods.</summary>
            <remarks>    By default, the FtpClient class provides line parsers for     AS400, DOS (Windows), UNIX and VMS FTP servers. To manually     parse list lines received from the FTP server, you can use the     ParsingListingLine event.     If you want to support other FTP servers and provide your     own line parser, you will need to create a class that derives     from the FtpListingParser class and add it to the     ListingParsers collection.     This property can be considered to be the equivalent of     the ListParsingFlags property of the ActiveX version of the     Xceed FTP Library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.LocalAddress">
            <summary>Gets or sets the local IP address and port from which the FTP client is connected.</summary>
            <remarks>    Normally this property can be ignored, however if your     client machine has more than one network card, the IP address     of the card to use can be specified via this property.     IPAddress.Any (default) can also be used to let the operating     system decide which network card to use.     The IP address of the FTP client can be retreived via the     Address property while the port can be retrieved via the Port     property.     Setting this property when already connected only affects     the next connection.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.LocalDataAddress">
            <summary>Gets or sets the IP address and port of the client-side data connection to use in subsequent data connections. If PassiveTransfer is false, this property represents the address of the client-side listening socket waiting for the server’s data connection request.</summary>
            <remarks>    Normally this property can be ignored, however if your     client machine has more than one network card, the IP address     of the card to use can be specified via this property.     IPAddress.Any (default) can also be used to let the operating     system decide which network card to use.     The IP address of the FTP client can be retreived via the     Address property while the port can be retrieved via the Port     property.     Setting this property when already connected only affects     the next connection.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.PassiveTransfer">
            <summary>Gets or sets a boolean value indicating if the FTP client should initiate the data connection rather than the FTP server.</summary>
            <remarks>    If set to true, the PASV command will be sent to the FTP     server rather than the PORT command resulting in the FTP server     "listening" on a data port (other than its default) and waiting     for a data connection to be established by the FTP client. If     set to false, the PORT command will be sent and the FTP client     will be listening for an incoming data connection. The FTP     server will establish the data connection upon receipt of a     transfer command.     The reply to the PASV command includes the host and port     address the FTP server is listening on.     If you are having issues connecting or sending and     receiving files to and from a server, try setting the     PassiveTransfer property to true.     This property is the equivalent of the PassiveMode     property of the ActiveX version of the Xceed FTP     Library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.PreAllocateStorage">
            <summary>Gets or sets a boolean value indicating if the FTP server must reserve enough space before a file is sent.</summary>
            <remarks>    If set to true, the "ALLO file_size" FTP command will be     sent to the FTP server to allocate sufficient space before the     file is sent.     This property is the equivalent of the AllocateStorage     property of the ActiveX version of the Xceed FTP     Library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Proxy">
            <summary>Gets or sets the proxy client to use for connecting and/or logging in via a proxy server.</summary>
            <remarks>You can only set this property when the FtpClient is not connected.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.RepresentationType">
            <summary>Gets or sets a value indicating how the data is transferred to and from the FTP server.</summary>
            <remarks>    If set to RepresentationType.Binary (default), the data     will be sent/received as contiguous bits which are packed into     the 8-bit transfer bytes. If set to RepresentationType.Ascii,     it will be sent/received using the standard 8-bit NVT-ASCII     representation.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.SendTelnetInterruptSignal">
            <summary>Gets or sets a value indicating if the Telnet interrupt signal should be sent before the QUIT command is sent to an FTP server, allowing an FTP server to be notified that the connection will be terminated. This property does not apply to the Compact Framework.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.SendTypeCommand">
            <summary>Gets or sets a boolean value indicating if the TYPE command should be sent before initiating a file transfer.</summary>
            <remarks>    The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the ListFtpCommand),     ListFtpCommand) or ReceiveMultipleFilesFtpCommandSequence)     method (when retrieving a remote folder's listing).</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.ServerAddress">
            <summary>Gets the IP address and port to which the FTP client is connected.</summary>
            <remarks>    The IP address of the FTP server can be retreived via the     Address property while the port can be retrieved via the Port     property.     This property can be considered to be the equivalent of     the ServerAddress and ServerPort properties of the ActiveX     version of the Xceed FTP Library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.ServerFolderSeparator">
            <summary>Gets or sets the FTP server's folder separator character.</summary>
            <remarks>    All methods will automatically change the local system's     folder separator character (represented by     DirectorySeparatorChar) to the ServerFolderSeparator character     and vice-versa when the method returns. Listing lines will also     contain the modified folder separator character.     If you do not want the folder separator characters to be     modified, you can set the ServerFolderSeparator property to     DirectorySeparatorChar.     Only standard ASCII chars are permitted.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.State">
            <summary>Gets a value indicating the current state of the FTP client.</summary>
            <remarks>    This property is the equivalent of the CurrentState     property of the ActiveX version of the Xceed FTP     Library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.SynchronizingObject">
            <summary>Gets or sets the object used to automatically redirect events on the main UI thread.</summary>
            <remarks>    This property should be set when performing GUI     operations in event handlers.     If this property is set, messages will be pumped through     a call to DoEvents when a blocking method is called (Connect(),     Login(), etc). When using asynchronous methods of the     AsyncFtpClient class, messages will not be pumped by the     library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Timeout">
            <summary>Gets or sets a value, in seconds, indicating after what period of time an FTP operation should timeout.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.TraceWriter">
            <summary>Gets or sets the TextWriter which will trace the connection/deconnection process as well as the commands and replies sent to and received from the FTP server.</summary>
            <remarks>    The FTP client will not dispose/close the     writer.     This method is the equivalent of the CommandLogFilename     property of the ActiveX version of the Xceed FTP     Library.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.TransferMode">
            <summary>Gets the transfer mode used to send and receive data to and from an FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.UseRemoteAddress">
            <summary>Gets or sets a value indicating whether to use the remote address.</summary>
            <remarks>This property forces the use of the remote address used at the time of the connection instead of the address returned by the PASV command. This avoids NAT problems that arise between a private address returned by a server behind a firewall and the public one of the firewall to which the client connects.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.CertificateReceived">
            <summary>Raised when an FTP server's certificate was received and verified.</summary>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.CertificateRequired">
            <summary>Raised when a client certificate is required by the FTP server, or the one provided (if e.Certificate is not $$NULL$$) was rejected. Note: This event is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.CommandSent">
            <summary>Raised once for every command sent to the FTP server.</summary>
            <remarks>    To be notified when a reply is received from the FTP     server, subscribe to the ReplyReceived event.     This event is the equivalent of the LoggingCommandLine     event of the ActiveX version of the Xceed FTP Library.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.Disconnected">
            <summary>Raised when the Disconnect method is called as well as when the connection is terminated by the FTP server.</summary>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.FileTransferStatus">
            <summary>Raised for every 4Kb sent or received during a file transfer.</summary>
            <remarks>    When receiving files with the     ReceiveFileFtpCommandSequence) method, some FTP servers will     not provide the size of the file currently being received and     therefore, some values of the FileTransferStatusEventArgs will     be 0. If you require these particular statistics, you can use     the ReceiveMultipleFilesFtpCommandSequence) method instead of     the ReceiveFileFtpCommandSequence) method. The     ReceiveMultipleFiles method requests a complete listing from     the FTP server before receiving any files. The FTP client     therefore obtains the file sizes of each file being received     and can then provide these statistics during the     FileTransferStatus event. If you use this technique, keep in     mind that the receive operation will be slightly slower (due to     the extra listing operation) and that it will not be possible     to change the local filename of the file.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.MultipleFileTransferError">
            <summary>Raised when an error occurs while transferring multiple files to or from the FTP server to determine what action should be taken.</summary>
            <remarks>    This event can only be raised by the     SendMultipleFilesFtpCommandSequence) or     ReceiveMultipleFilesFtpCommandSequence) methods.     Other methods of the FTP client must not be called in     this event handler! For example, DeleteFileFtpCommand) cannot     be called to delete an existing file so that the file transfer     (for that particular file) can be retried.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.ParsingListingLine">
            <summary>Raised when a listing line is received from the FTP server.</summary>
            <remarks>    If e.Valid is true when the event is raised, at least one     parser succeeded in parsing the listing line and e.Item has     been filled with the parsed information. To filter (remove) an     item from the listing set e.Valid to false. The content of     e.Item can also be modified if you want to change the item's     information.     If e.Valid is false when the event is raised, none of the     parsers succeeded in parsing the listing line. In this case you     can provide your own parsing, fill e.Item and set e.Valid to     true.     Calls to the ListFtpCommand),     SendMultipleFilesFtpCommandSequence) and     ReceiveMultipleFilesFtpCommandSequence) methods will raise this     event.     This event is the equivalent of the ParsingListLine event     of the ActiveX version of the Xceed FTP Library.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.ReceivingFile">
            <summary>Raised for each file being received from the FTP server.</summary>
            <remarks>    When using overloads of the     ReceiveFileFtpCommandSequence) method that take a Stream as a     parameter, the value of the LocalFilename property will be     Empty.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.ReplyReceived">
            <summary>Raised once for each reply received from the FTP server. If a reply contains multiple lines, they will be received as a group.</summary>
            <remarks>    To be notified when a command is sent to the FTP server,     subscribe to the CommandSent event.     This event is the equivalent of the LoggingCommandLine     event of the ActiveX version of the Xceed FTP Library.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.SendingFile">
            <summary>Raised for each file being sent to the FTP server.</summary>
            <remarks>    When using overloads of the SendFileFtpCommandSequence)     method that take a Stream as a parameter, the value of the     LocalFilename property will be Empty.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.StateChanged">
            <summary>Raised when the State of the FTP client changes.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpConnection">
            <summary>Class which represents the connection between a client and an FTP server.</summary>
            <remarks>    The FtpConnection class implements the IDisposable     interface meaning that every FtpConnection object that is     created should also be disposed of by calling the Boolean)     method or, in C#, creating the FtpConnection within a using     block. If an instance of an FtpConnection object is not     disposed of, connections with the FTP server may remain active     until the FTP server times-out or the garbage-collector     passes.     The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of     or garbage-collected. To prevent connections with an FTP server     from being kept alive, the CloseConnections method can be     called. The CloseConnections method will close any connections     that are not being used, however the FtpConnection instance     will remain usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor">
            <summary>Initializes a new instance of the FtpConnection class specifying the IP address and port of the FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.Net.IPEndPoint)">
            <summary>Initializes a new instance of the FtpConnection class specifying the IP address and port of the FTP server.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of.     To prevent connections with an FTP server from being kept     alive, the CloseConnections method can be called. The     CloseConnections method will close any connections that are not     being used, however the FtpConnection instance will remain     usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
            <param name="serverAddress">The IP address and port of the FTP server to which to establish a connection.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.Net.IPEndPoint,System.String,System.String)">
            <summary>Initializes a new instance of the FtpConnection class specifying the IP address and port of the FTP server, as well as the UserName and Password used to connect.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of.     To prevent connections with an FTP server from being kept     alive, the CloseConnections method can be called. The     CloseConnections method will close any connections that are not     being used, however the FtpConnection instance will remain     usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
            <param name="serverAddress">The IP address and port of the FTP server to which to establish a connection.</param>
            <param name="userName">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String)">
            <summary>Initializes a new instance of the FtpConnection class specifying the HostName of the FTP server.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of.     To prevent connections with an FTP server from being kept     alive, the CloseConnections method can be called. The     CloseConnections method will close any connections that are not     being used, however the FtpConnection instance will remain     usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
            <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the FtpConnection class specifying the HostName and Port of the FTP server.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of.     To prevent connections with an FTP server from being kept     alive, the CloseConnections method can be called. The     CloseConnections method will close any connections that are not     being used, however the FtpConnection instance will remain     usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
            <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
            <param name="port">The port of the FTP server to which to establish a connection.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean)">
            <summary>Initializes a new instance of the FtpConnection class specifying the HostName and Port of the FTP server as well as various SSL parameters. Login is anonymous. Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>Initializes a new instance of the FtpConnection class specifying the HostName and Port of the FTP server, as well as the UserName and Password used to connect.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of.     To prevent connections with an FTP server from being kept     alive, the CloseConnections method can be called. The     CloseConnections method will close any connections that are not     being used, however the FtpConnection instance will remain     usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
            <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
            <param name="port">The port of the FTP server to which to establish a connection.</param>
            <param name="userName">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean)">
            <summary>Initializes a new instance of the FtpConnection class specifying the HostName and Port of the FTP server, various SSL parameters, as well as the UserName and Password used to connect. Note: This method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="userName">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the FtpConnection class specifying the HostName of the FTP server, as well as the UserName and Password used to connect.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of.     To prevent connections with an FTP server from being kept     alive, the CloseConnections method can be called. The     CloseConnections method will close any connections that are not     being used, however the FtpConnection instance will remain     usable.     To test if a connection with the specified FTP server is     possible before the FtpConnection instance is passed to FtpFile     or FtpFolder objects, the TestConnection method can be used. If     a connection with an FTP server is not possible, exceptions     will be thrown when trying to access properties of the FtpFile     and/or FtpFolder instances.</remarks>
            <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
            <param name="userName">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.CloseConnections">
            <summary>Close any pending connections.</summary>
            <remarks>    The FtpConnection will create connections with the FTP     server transparently and as necessary until it is disposed of     or garbage-collected. To prevent connections with an FTP server     from being kept alive, the CloseConnections method can be     called. The CloseConnections method will close any connections     that are not being used, however the FtpConnection instance     will remain usable.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.Dispose">
            <summary>Release all cached connections.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.Finalize">
            <summary>Allows the FtpConnection object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpConnection.TestConnection">
            <summary>Tests if a connection with the specified FTP server is possible before the FtpConnection instance is passed to FtpFile or FtpFolder objects.</summary>
            <remarks>    If a connection with an FTP server is not possible,     exceptions will be thrown when trying to access properties of     the FtpFile and/or FtpFolder instances.     This method always creates a new connection. All     connections an FtpConnection object may need to create are kept     alive and only closed when the FtpConnection is disposed or     garbaged-collected.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.ClearCommandChannel">
            <summary>Gets or sets a value indicating whether to clear the command channel after login to facilitate firewall NAT when using a secure data channel.</summary>
            <remarks>If the CCC command is not supported by the server, an exception will be thrown. TransferMode will also throw an exception if Mode Z is used and is not supported by the server.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.DefaultRepresentationType">
            <summary>Gets or sets the default value indicating how the data is transferred to and from the FTP server.</summary>
            <remarks>    The representation type of each FtpFile can also be     specified when calling the file's RepresentationType) and     RepresentationType) methods.     If set to RepresentationType.Binary (default), the data     will be sent/received as contiguous bits which are packed into     the 8-bit transfer bytes. If set to RepresentationType.Ascii,     it will be sent/received using the standard 8-bit NVT-ASCII     representation.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.Encoding">
            <summary>Gets or sets the Encoding that is used to encode commands sent to the server, and decode replies and folder listings received from the server.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.HostName">
            <summary>Gets the hostname of the FTP server to which a connection has been established.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.KeepAliveInterval">
            <summary>Gets or sets the interval, in seconds, at which a NOOP command is sent on the command channel while idle or during a file transfer.</summary>
            <remarks>    This property currently only applies to file     transfers.     Setting this property can be useful to prevent routers     from prematurely closing the command channel while a long data     transfer is taking place.     It is generally not necessary to set a value smaller than     15 minutes (900 seconds).</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.ListingParsers">
            <summary>Gets a collection of FtpListingParser objects that are used to parse the lines returned by calls to various methods.</summary>
            <remarks>    By default, support for AS400, DOS (Windows), UNIX and     VMS FTP servers is provided. To manually parse list lines     received from the FTP server, you can use the     ParsingListingLine event.     To support other FTP servers and provide custom line     parsers, a class that derives from the FtpListingParser class     must be created and added to the ListingParsers     collection.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.LocalAddress">
            <summary>Gets or sets the client-side IP address and port.</summary>
            <remarks>    Normally this property can be ignored, however if the     client machine has more than one network card, the IP address     of the card to use can be specified via this property.     IPAddress.Any (default) can also be used to let the operating     system decide which network card to use.     The client-side IP address can be retreived via the     Address property while the port can be retrieved via the Port     property.     Setting this property when already connected only affects     the next connection.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.LocalDataAddress">
            <summary>Gets or sets the IP address and port of the client-side data connection to use in subsequent data connections. If PassiveTransfer is false, this property represents the address of the client-side listening socket waiting for the server’s data connection request.</summary>
            <remarks>    Normally this property can be ignored, however if the     client machine has more than one network card, the IP address     of the card to use can be specified via this property.     IPAddress.Any (default) can also be used to let the operating     system decide which network card to use.     The client-side IP address can be retreived via the     Address property while the port can be retrieved via the Port     property.     Setting this property when already connected only affects     the next connection.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.PassiveTransfer">
            <summary>Gets or sets a boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</summary>
            <remarks>    If set to true, the PASV command will be sent to the FTP     server rather than the PORT command resulting in the FTP server     "listening" on a data port (other than its default) and waiting     for a data connection to be established by the client-side. If     set to false, the PORT command will be sent and the client-side     will be listening for an incoming data connection. The FTP     server will establish the data connection upon receipt of a     transfer command.     The reply to the PASV command includes the host and port     address the FTP server is listening on.     If you are having issues connecting or sending and     receiving files to and from a server, try setting the     PassiveTransfer property to true.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.Password">
            <summary>Gets the password used to connect to the FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.Port">
            <summary>Gets the port of the FTP server to which a connection has been established.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.PreAllocateStorage">
            <summary>Gets or sets a boolean value indicating if the FTP server must reserve enough space before a file is sent.</summary>
            <remarks>    If set to true, the "ALLO file_size" FTP command will be     sent to the FTP server to allocate sufficient space before the     file is sent.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.Proxy">
            <summary>Gets or sets the active proxy client for connecting to the FTP server.</summary>
            <remarks>This property must be set before all other properties. It cannot be changed once a connection has been made to the FTP server.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.SendTelnetInterruptSignal">
            <summary>    Gets or sets a value indicating if the Telnet interrupt     signal should be sent before the QUIT command is sent to an FTP     server, allowing an FTP server to be notified that the     connection will be terminated. This property does not     apply to the Compact Framework.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.SendTypeCommand">
            <summary>Gets or sets a boolean value indicating if the TYPE command should be sent before initiating a file transfer.</summary>
            <remarks>    The TYPE command will be sent regardless of the value of     the SendTypeCommand property when calling the Object[]),     Object[]) or Boolean) methods.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.ServerAddress">
            <summary>Gets the IP address and port of the FTP server to which a connection has been established.</summary>
            <remarks>    The IP address of the FTP server can be retreived via the     Address property while the port can be retrieved via the Port     property.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.ServerFolderSeparator">
            <summary>Gets or sets the FTP server's folder separator character.</summary>
            <remarks>    All methods will automatically change the local system's     folder separator character (represented by     DirectorySeparatorChar) to the ServerFolderSeparator character     and vice-versa when the method returns. Listing lines will also     contain the modified folder separator character.     To prevent the folder separator characters from being     modified, the ServerFolderSeparator property can be set to     DirectorySeparatorChar.     Only standard ASCII chars are permitted.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.SynchronizingObject">
            <summary>Gets or sets the object used to automatically redirect events on the main UI thread.</summary>
            <remarks>    This property should be set when performing GUI     operations in event handlers.     If this property is set, messages will be pumped through     a call to DoEvents.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.Timeout">
            <summary>Gets or sets a value, in seconds, indicating after what period of time an FTP operation should timeout.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.TraceWriter">
            <summary>Gets or sets the TextWriter which will trace the communications between the client-side and the FTP server.</summary>
            <remarks>    The FtpConnection object will not dispose/close     the writer.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.TransferMode">
            <summary>Gets or sets the transfer mode used to send and receive data to and from an FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.UseRemoteAddress">
            <summary>Gets or sets a value indicating whether to use the remote address.</summary>
            <remarks>This property forces the use of the address used at the time of the connection instead of the address returned by the PASV command. This avoids NAT problems that arise between the private address returned by a server behind a firewall and the public one of the firewall to which the client connects.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpConnection.UserName">
            <summary>Gets the username used to connect to the FTP server.</summary>
        </member>
        <member name="E:Xceed.Ftp.FtpConnection.CertificateReceived">
            <summary>Raised when an FTP server's certificate has been received and verified. Note: This event is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</summary>
            <remarks>This event is raised from an I/O thread. When performing GUI operations, the SynchronizingObject property must be set so that the library can raise the event on the main UI thread.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpConnection.CertificateRequired">
            <summary>Raised when a client certificate is required by the FTP server, or the one provided (if e.Certificate is not $$NULL$$) was rejected.</summary>
            <remarks>This event is raised from an I/O thread. When performing GUI operations, the SynchronizingObject property must be set so that the library can raise the event on the main UI thread.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpConnection.ParsingListingLine">
            <summary>Raised when a listing line is received from the FTP server.</summary>
            <remarks>    If e.Valid is true when the event is raised, at least one     parser succeeded in parsing the listing line and e.Item has     been filled with the parsed information. To filter (remove) an     item from the listing set e.Valid to false. The content of     e.Item can also be modified if you want to change the item's     information.     If e.Valid is false when the event is raised, none of the     parsers succeeded in parsing the listing line. In this case     custom parsing can be provided by filling e.Item and setting     e.Valid to true.     Calls to the Object[]), Object[]) and Boolean) methods     will raise this event.</remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpConnection.WaitingForAsyncOperation">
            <summary>OBSOLETE: This event is obsolete and has been replaced with the SynchronizingObject property. If the SynchronizingObject property has been set, this event will be ignored. Raised when a connection is taking place and the main thread is waiting for completion of an asynchroneous operation on another thread.</summary>
            <remarks>For Windows Forms applications, this is the perfect place to call Application.DoEvents so that your application remains responsive, and where your CertificateReceived and CertificateRequired events can perform GUI operations.</remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpDosListingParser">
            <summary>Class which represents a parser that is used to parse lines received from a Windows or DOS FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpDosListingParser.#ctor">
            <summary>Initializes a new instance of the FtpDosListingParser class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpDosListingParser.ParseLine(System.String)">
            <summary>Parses the specified listing line received from the FTP server.</summary>
            <returns>A reference to an FtpItemInfo object containing the information that was parsed from the listing line received from the FTP server. Can be Empty to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be $$NULL$$ to indicate that the listing line was not recognized as a valid Windows or DOS listing line.</returns>
            <remarks>    The Windows or DOS listing parser will try to parse the     listing lines received from the FTP server. After 5 failed     attempts, the Windows or DOS listing parser will be discarded     by the FtpListingParserList.</remarks>
            <param name="line">The listing line received from the FTP server.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpException">
            <summary>The exception that is thrown by the FTP client when a FTP-specific error occurs.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpException.#ctor">
            <summary>Initializes a new instance of the FtpException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpException.#ctor(System.String)">
            <summary>Initializes a new instance of the FtpException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the FtpException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpFile">
            <summary>Specialization of the AbstractFile class that implements access to a file located on an FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.#ctor(Xceed.Ftp.FtpConnection,System.String)">
            <summary>Initializes a new instance of the FtpFile class specifying the FtpConnection object that represents the connection with an FTP server as well as the fully qualified name of an underlying physical file.</summary>
            <remarks>    By default, the file will be created in the current     working folder. To create/access a file in another location, an     instance of an FtpFolder must be used and the FtpFile retrieved     using the String) method.     The file's parent folder can be retrieved using the     ParentFolder property.</remarks>
            <param name="connection">A reference to an FtpConnection object that represents the connection with an FTP server.</param>
            <param name="fullName">The fully qualified name of the file which may or may not physically exist. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical file.</summary>
            <remarks>    The file must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.DoCreateWrite(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Creates the file and opens it for writing.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream should be guaranteed to be writable,     but does not have to be seekable.     The share parameter should allow control over how the     file is shared by different processes. If the values defined in     this enumeration are not supported, an exception should be     thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Opens the file for reading.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical file.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties is taken. This     snapshot is not automatically updated whenever the physical     item's properties change.     Refresh re-reads the information from the physical item     and updates the snapshot.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example: "\\folder\file.txt"); false otherwise.</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenRead">
            <summary>Opens the file for reading using the specified RepresentationType.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenRead(Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for reading using the specified RepresentationType.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but is     not seekable.     Since the stream returned by the OpenRead method is not     seekable (meaning that neither the length or position can be     retrieved), data can be read by either looping through the     stream until the end of the stream has been reached, or a     StreamReader can be created around the stream to read the     data.</remarks>
            <param name="representationType">A RepresentationType value indicating how the data is transferred from the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenRead(System.IO.FileShare,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for reading with the specified file sharing mode and RepresentationType.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but is     not seekable.     Since the stream returned by the OpenRead method is not     seekable (meaning that neither the length or position can be     retrieved), data can be read by either looping through the     stream until the end of the stream has been reached, or a     StreamReader can be created around the stream to read the     data.</remarks>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred from the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for reading using the specified RepresentationType and raises events during the process.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but is     not seekable.     Since the stream returned by the OpenRead method is not     seekable (meaning that neither the length or position can be     retrieved), data can be read by either looping through the     stream until the end of the stream has been reached, or a     StreamReader can be created around the stream to read the     data.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred from the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for reading using the specified file sharing mode and RepresentationType and raises events during the process.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but is     not seekable.     Since the stream returned by the OpenRead method is not     seekable (meaning that neither the length or position can be     retrieved), data can be read by either looping through the     stream until the end of the stream has been reached, or a     StreamReader can be created around the stream to read the     data.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred from the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenWrite">
            <summary>Opens the file for writing using the specified RepresentationType and indicating if existing data should be replaced.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenWrite(System.Boolean,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for writing using the specified RepresentationType and indicating if existing data should be replaced.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but is     not seekable.</remarks>
            <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenWrite(System.Boolean,System.IO.FileShare,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for writing using the specified file sharing mode and RepresentationType and indicating if existing data should be replaced.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but is     not seekable.</remarks>
            <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for writing using the specified RepresentationType and indicating if existing data should be replaced, while raising events during the process.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but is     not seekable.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred to the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.IO.FileShare,Xceed.Ftp.RepresentationType)">
            <summary>Opens the file for writing using the specified file sharing mode, RepresentationType, and indicating if existing data should be replaced, while raising events during the process.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but is     not seekable.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
            <param name="representationType">A RepresentationType value indicating how the data is transferred to the FTP server.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.BatchUpdateable">
            <summary>Returns null (Nothing in Visual Basic) since an FtpFile or an FtpFolder does not support the IBatchUpdateable interface.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.Connection">
            <summary>Gets the FtpConnection object that represents the connection with an FTP server</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    Because DoHasAttributes always returns false,     DoAttributes should never be called.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the file.</summary>
            <remarks>    Because DoHasCreationDateTime always returns false,     DoCreationDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoExists">
            <summary>Gets a boolean value indicating if the file physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.     Refresh does not need to be called before accessing this     property.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoFullName">
            <summary>Gets the full name of the file.</summary>
            <remarks>    The full name consists of the file's name including its     path.     The separator character is defined in by     ServerFolderSeparator.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoHasAttributes">
            <summary>Gets a boolean value indicating if the file supports attributes.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoHasCreationDateTime">
            <summary>Gets a boolean value indicating if the file supports having a creation date and time.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoHasLastAccessDateTime">
            <summary>Gets a boolean value indicating if the file supports having a last access date and time.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the file.</summary>
            <remarks>    Because DoHasLastAccessDateTime always returns false,     DoLastAccessDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the file.</summary>
            <remarks>    When changing the file's modification date through this     property, the physical file is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this file is created.     Refresh should be called before accessing this property,     or the information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoName">
            <summary>Gets or sets the short name of the file.</summary>
            <remarks>    The short name consists of the file's name without a     path.     When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoParentFolder">
            <summary>Gets a reference to the parent folder of this file.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the ParentFolder property     returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoRootFolder">
            <summary>Gets a reference to the root folder of this file.</summary>
            <remarks>    If the current item is the root of a folder hierarchy,     the RootFolder property returns a reference to itself.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.DoSize">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 is returned.     If the file does not physically exist, an exception will     be thrown.     Refresh should be called before accessing this property,     or the information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFile.HostedFullName">
            <summary>Gets a human-readable full pathname starting with "ftp://hostname" representing the fully qualified path of all host files containing the item and the path of the item itself.</summary>
            <remarks>The full pathname returned is useful for displaying a more meaningful filename to the user.</remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpFolder">
            <summary>Specialization of the AbstractFolder class that implements access to a folder located on an FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.#ctor">
            <summary>Initializes a new instance of the FtpFolder class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.#ctor(Xceed.Ftp.FtpConnection)">
            <summary>Initializes a new instance of the FtpFolder class specifying the FtpConnection object that represents the connection with an FTP server</summary>
            <remarks>    The folder will represent the current working     folder.</remarks>
            <param name="connection">A reference to an FtpConnection object that represents the connection with an FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.#ctor(Xceed.Ftp.FtpConnection,System.String)">
            <summary>Initializes a new instance of the FtpFile class specifying the FtpConnection object that represents the connection with an FTP server as well as the fully qualified name of an underlying physical folder.</summary>
            <param name="connection">A reference to an FtpConnection object that represents the connection with an FTP server.</param>
            <param name="fullName">The fully qualified name of the file which may or may not physically exist. Some FTP servers may be case-sensitive!</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical folder.</summary>
            <remarks>    The folder must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Retrieves an array of FileSystemItem objects.</summary>
            <returns>An array of FileSystemItem objects representing the items ( files and folders ) contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFile object.</summary>
            <returns>A reference to an AbstractFile object regardless of if the file represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFolder object.</summary>
            <returns>A reference to an AbstractFolder object regardless of if the folder represented by the object exists or not.</returns>
            <remarks>    folderName should not end with a     ServerFolderSeparator.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>For an FTP folder, we cannot force a refresh on every request as it would simply make useless round-trips to the FTP server. The whole refresh scheme is the responsibility of the FtpConnection.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example: "\\folder"); false otherwise.</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.BatchUpdateable">
            <summary>Returns null (Nothing in Visual Basic) since an FtpFile or an FtpFolder does not support the IBatchUpdateable interface.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.Connection">
            <summary>Gets the FtpConnection object that represents the connection with an FTP server</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    Because DoHasAttributes always returns false,     DoAttributes should never be called.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the folder.</summary>
            <remarks>    Because DoHasCreationDateTime always returns false,     DoCreationDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoExists">
            <summary>Gets a boolean value indicating if the folder physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.     Refresh does not need to be called before accessing this     property.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoFullName">
            <summary>Gets the full name of the folder.</summary>
            <remarks>    The fullname consists of the folder's name,     fully-qualified, with a path.     The separator character is defined in by     ServerFolderSeparator.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoHasAttributes">
            <summary>Gets a boolean value indicating if the folder supports attributes.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoHasCreationDateTime">
            <summary>Gets a boolean value indicating if the folder supports having a creation date and time.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoHasLastAccessDateTime">
            <summary>Gets a boolean value indicating if the folder supports having a last access date and time.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoIsRoot">
            <summary>Gets a boolean value indicating if the folder is a root folder.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the folder.</summary>
            <remarks>    Because DoHasLastAccessDateTime always returns false,     DoLastAccessDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the folder.</summary>
            <remarks>    When changing the folder's modification date through this     property, the physical folder is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this folder is created.     Refresh should be called before accessing this property,     or the information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoName">
            <summary>Gets or sets the short name of the folder.</summary>
            <remarks>    The short name consists of the folder's name without a     path.     When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoParentFolder">
            <summary>Gets a reference to the parent folder of this folder.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the ParentFolder property     returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.DoRootFolder">
            <summary>Gets a reference to the root folder of this folder.</summary>
            <remarks>    If the current item is the root of a folder hierarchy,     the RootFolder property returns a reference to itself.</remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpFolder.HostedFullName">
            <summary>Gets a human-readable full pathname starting with "ftp://hostname" representing the fully qualified path of all host files containing the item and the path of the item itself.</summary>
            <remarks>The full pathname returned is useful for displaying a more meaningful filename to the user.</remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpInternalException">
            <summary>The exception that is thrown by the FTP client when an unexpected error occurs.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor">
            <summary>Initializes a new instance of the FtpInternalException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor">
            <summary>Initializes a new instance of the FtpInternalException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the FtpInternalException class with a reference to the inner exception that is the cause of this exception.</summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.String)">
            <summary>Initializes a new instance of the FtpInternalException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the FtpInternalException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpInvalidStateException">
            <summary>The exception that is thrown by the FTP client when it is not in a valid state to perform the requested FTP operation.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor">
            <summary>Initializes a new instance of the FtpInvalidStateException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor">
            <summary>Initializes a new instance of the FtpInvalidStateException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor(System.String)">
            <summary>Initializes a new instance of the FtpInvalidStateException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpIOException">
            <summary>The exception that is thrown by the FTP client when an I/O error occurs.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor">
            <summary>Initializes a new instance of the FtpIOException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the FtpIOException class with a reference to the inner exception that is the cause of this exception.</summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.String)">
            <summary>Initializes a new instance of the FtpIOException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the FtpIOException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpItemInfo">
            <summary>Represents an item on an FTP server and contains information relevant to that item.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfo.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code. Your FtpListingParser should call CreateItem.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.DateTime">
            <summary>Gets or sets the date and time of the item, or DateTime.MinDate if the date is unknown or not applicable.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Empty">
            <summary>Gets an empty FtpItemInfo object.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.IsEmpty">
            <summary>Gets a boolean value indicating if the FtpItemInfo object is uninitialized.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Name">
            <summary>Gets or sets the name of the item.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Size">
            <summary>Gets or sets the size of the item, or -1 if the size is unknown or not applicable.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Type">
            <summary>Gets or sets the type of the item.</summary>
            <remarks>    If String) is called with its namesOnly parameter     set to true, Type will return FtpItemType.Unknown.</remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpItemInfoList">
            <summary>Contains a list of FtpItemInfo objects.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Add(Xceed.Ftp.FtpItemInfo)">
            <summary>Adds a FtpItemInfo object to the list.</summary>
            <returns>The zero-based index at which the FtpItemInfo object was added.</returns>
            <param name="value">The FtpItemInfo object to add.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.AddRange(Xceed.Ftp.FtpItemInfo[])">
            <summary>Adds the elements of a FtpItemInfo array to the end of the FtpItemInfoList collection.</summary>
            <param name="values">An array of FtpItemInfo objects representing the FtpItemInfo objects to add to the end of the FtpItemInfoList collection</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Clear">
            <summary>Removes all FtpItemInfo objects from the list.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Contains(Xceed.Ftp.FtpItemInfo)">
            <summary>Retrieves a boolean value indicating if a specific FtpItemInfo object exists in the list.</summary>
            <returns>true if the FtpItemInfo object exists in the list; false otherwise.</returns>
            <remarks>    The comparison is done by reference. Therefore, even if     two FtpItemInfo objects contain the same property values, they     will be considered as two different objects.</remarks>
            <param name="value">The FtpItemInfo object to locate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.IndexOf(Xceed.Ftp.FtpItemInfo)">
            <summary>Searches for the specified FtpItemInfo object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">The FtpItemInfo object to locate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Insert(System.Int32,Xceed.Ftp.FtpItemInfo)">
            <summary>Inserts a FtpItemInfo object into the list at the specified index</summary>
            <param name="index">The zero-based index at which to insert the FtpItemInfo object.</param>
            <param name="value">The FtpItemInfo object to insert.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Remove(Xceed.Ftp.FtpItemInfo)">
            <summary>Removes the FtpItemInfo object from the list.</summary>
            <param name="value">The FtpItemInfo object to remove.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.RemoveAt(System.Int32)">
            <summary>Removes the FtpItemInfo object from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the FtpItemInfo object.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfoList.IsFixedSize">
            <summary>Gets a value indicating whether the FtpItemInfoList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfoList.IsReadOnly">
            <summary>Gets a boolean value indicating if the FtpItemInfoList is readonly.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfoList.Item(System.Int32)">
            <summary>Gets or sets the FtpItemInfo object at the specified index.</summary>
            <param name="index">The zero-based index at which to get the FtpItemInfo object.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpListingParser">
            <summary>Class which represents a parser that is used to parse listing lines received from an FTP server.</summary>
            <remarks>    Derived classes must implement a parameterless     constructor in order to be used with the FTP FileSystem.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParser.CreateItem">
            <summary>Creates a new FtpItemInfo object.</summary>
            <returns>A reference to a new FtpItemInfo object.</returns>
            <remarks>    You can override this method if you wish to derive from     FtpItemInfo and expose more information. This enables you to     not only derive from FtpListingParser to implement your own     custom parser, but also from existing parsers.     If you derive from FtpListingParser and FtpItemInfo to     provide your own custom parser, it is recommended that you     override this method so that others can derive from your parser     and your info classes to add even more information.</remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParser.ParseLine(System.String)">
            <summary>Parses the specified listing line received from the FTP server.</summary>
            <returns>A reference to an FtpItemInfo object containing the information that was parsed from the listing line received from the FTP server. Can be Empty to indicate that the listing line was recognized but more information is required (for example, VMS listings are on 2 lines).</returns>
            <param name="line">The listing line received from the FTP server.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpListingParserList">
            <summary>Contains a list of FtpListingParser objects.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Add(Xceed.Ftp.FtpListingParser)">
            <summary>Adds a FtpListingParser object to the list.</summary>
            <returns>The zero-based index at which the FtpListingParser object was added.</returns>
            <param name="value">The FtpListingParser object to add.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.AddRange(Xceed.Ftp.FtpListingParser[])">
            <summary>Adds the elements of a FtpListingParser object array to the end of the FtpListingParserList collection.</summary>
            <param name="values">An array of FtpListingParser objects representing the FtpListingParser objects to add to the end of the FtpListingParserList collection.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Clear">
            <summary>Removes all FtpListingParser objects from the list.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Contains(Xceed.Ftp.FtpListingParser)">
            <summary>Retrieves a boolean value indicating if a specific FtpListingParser object exists in the list.</summary>
            <returns>true if the FtpListingParser object exists in the list; false otherwise.</returns>
            <param name="value">The FtpListingParser object to locate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.IndexOf(Xceed.Ftp.FtpListingParser)">
            <summary>Searches for the specified FtpListingParser object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">The FtpListingParser object to locate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Insert(System.Int32,Xceed.Ftp.FtpListingParser)">
            <summary>Inserts a FtpListingParser object into the list at the specified index</summary>
            <param name="index">The zero-based index at which to insert the FtpListingParser object.</param>
            <param name="value">The FtpListingParser object to insert.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.OnParsingListingLine(Xceed.Ftp.FtpItemInfo,System.String,System.Boolean@)">
            <summary>Raises the ParsingListingLine event.</summary>
            <param name="item">An FtpItemInfo object containing the information relative to an item (file, folder or link) on an FTP server.</param>
            <param name="line">The line from which the FtpItemInfo was created.</param>
            <param name="valid">true if the line represents a valid item; false otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.ParseListing(Xceed.Ftp.StringList)">
            <summary>Parses a raw (unprocessed) folder listing, querying if each FtpListingParser can retrieve relevant information from each line.</summary>
            <returns>A FtpItemInfoList of FtpItemInfo objects each representing the listing information of an FTP item.</returns>
            <param name="lines">The raw (unprocessed) folder listing lines to parse.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Remove(Xceed.Ftp.FtpListingParser)">
            <summary>Removes the FtpListingParser object from the list.</summary>
            <param name="value">The FtpListingParser object to remove.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.RemoveAt(System.Int32)">
            <summary>Removes the FtpListingParser object from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the FtpListingParser object.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpListingParserList.IsFixedSize">
            <summary>Gets a value indicating whether the FtpListingParserList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpListingParserList.IsReadOnly">
            <summary>Gets a boolean value indicating if the FtpListingParserList is readonly.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpListingParserList.Item(System.Int32)">
            <summary>Gets or sets the FtpListingParser object at the specified index.</summary>
            <param name="index">The zero-based index at which to get the FtpListingParser object.</param>
        </member>
        <member name="E:Xceed.Ftp.FtpListingParserList.ParsingListingLine">
            <summary>Raised for each folder listing line sent by the FTP server and allows you to manually parse the lines.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpReply">
            <summary>Represents a reply received from the FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReply.#ctor">
            <summary>Initializes a new instance of the FtpReply class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReply.ToString">
            <summary>Returns a string representing the reply received from the FTP server.</summary>
            <returns>    A string representing the reply received from the FTP server.     For example:       230-The response `guest' is not valid. 230-Next time please use your e-mail address as password. 230 Guest login ok, access restrictions apply.  </returns>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.Lines">
            <summary>Gets the lines returned by the FTP server as a reply to a command.</summary>
            <remarks>             The lines of the reply are the custom lines returned by the         FTP server. For example, the "welcome" message. The Message         is the text following the last line of the full text         returned by the FTP server. For example:           220-Welcome!  Thank you for using Xceed FTP for .NET 220 Have fun!   "Have fun!" is the Message.              </remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.Message">
            <summary>Gets the text following the last line of the full text returned by the FTP server without the reply code.</summary>
            <remarks>             The Lines of the reply are the custom lines returned by the         FTP server. For example, the "welcome" message. The Message         is the text following the last line of the full text         returned by the FTP server. For example:           220-Welcome! Thank you for using Xceed FTP for .NET 220 Have fun!   "Have fun!" is the Message.              </remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.ReplyCode">
            <summary>Gets the reply code returned by the FTP server.</summary>
            <remarks>             The following table provides a list of the possible reply         codes returned by an FTP server.                                       110                 Restart marker reply.                                           120                 Service ready in nnn                 minutes.                                           125                 Data connection already open; transfer                 starting.                                           150                 File status okay; about to open data                 connection.                                           200                 Command okay.                                           202                 Command not implemented, superfluous                 at this site.                                           211                 System status, or system help                 reply.                                           212                 Directory status.                                           213                 File status                                           214                 Help message.                                           215                 NAME system type.                                           220                 Service ready for new                 user.                                           221                 Service closing control                 connection.                                           225                 Data connection open; no transfer in                 progress.                                           226                 Closing data connection.                                           227                 Entering Passive Mode                 (h1,h2,h3,h4,p1,p2).                                           230                 User logged in, proceed.                                           250                 Requested file action okay,                 completed.                                           257                 "PATHNAME" created.                                           331                 User name okay, need                 password.                                           332                 Need account for login.                                           350                 Requested file action pending further                 information.                                           421                 Service not available, closing control                 connection.                                           425                 Can't open data                 connection.                                           426                 Connection closed; transfer                 aborted.                                           450                 Requested file action not taken. File                 unavailable (e.g., file busy).                                           451                 Requested action aborted: local error                 in processing.                                           452                 Requested action not taken.                 Insufficient storage space in system.                                           500                 Syntax error, command                 unrecognized.                                           501                 Syntax error in parameters or                 arguments.                                           502                 Command not implemented.                                           503                 Bad sequence of                 commands.                                           504                 Command not implemented for that                 parameter.                                           530                 Not logged in.                                           532                 Need account for storing                 files.                                           550                 Requested action not taken. File                 unavailable (e.g., file not found, no                 access).                                           551                 Requested action aborted: page type                 unknown.                                           552                 Requested file action aborted.                 Exceeded storage allocation (for current directory                 or dataset).                                           553                 Requested action not taken. File name                 not allowed.                           </remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.Type">
            <summary>Gets a value representing the type of reply received from the FTP server.</summary>
            <remarks>             The following table provides a list of the types of reply         codes that can be returned by an FTP server.                                       Incomplete                 More lines are expected therefore this                 reply is still incomplete. You should never receive                 such a reply, as this value is used                 internally.                                           PositivePreliminary                 The requested action is being                 initiated and another reply should be expected                 before proceeding with a new command. Any reply                 between 100 and 159 inclusively is a positive                 preliminary reply.                                           PositiveCompletion                 The requested action has successfully                 completed and a new request may be initiated. Any                 reply between 200 and 259 inclusively is a positive                 completion reply.                                           PositiveIntermediate                 The command was accepted, but the                 requested action is being held in abeyance, pending                 receipt of further information. Another command                 specifying this information is expected by the FTP                 server. Any reply between 300 and 359 inclusively                 is a positive intermediate reply.                                           TransientNegativeCompletion                 The command was not accepted and the                 requested action did not take place, but the error                 condition is not permanent and the action may be                 requested again once the problem is addressed. Any                 reply between 400 and 459 inclusively is a                 transient negative completion reply.                                           PermanentNegativeCompletion                 The command was not accepted and the                 requested action did not take place. Any reply                 between 500 and 559 inclusively is a permanent                 negative completion reply.                                           Invalid                 The format of the reply received from                 the FTP server was not recognized.                                For a list of specific reply codes, consult the ReplyCode     property.</remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpReplyException">
            <summary>The exception that is thrown by the FTP client when an error reply is received from an FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.#ctor">
            <summary>Initializes a new instance of the FtpReplyException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.#ctor(Xceed.Ftp.FtpReply)">
            <summary>Initializes a new instance of the FtpReplyException class with a specified FtpReply.</summary>
            <param name="reply">The FtpReply received from the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.#ctor(Xceed.Ftp.FtpReply,System.String)">
            <summary>Initializes a new instance of the FtpReplyException class with a specified FtpReply and error message.</summary>
            <param name="reply">The FtpReply received from the FTP server.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.ToString">
            <summary>Returns a string representation of the current exception including the reply that was received from the FTP server.</summary>
            <returns>A string representation of the current exception including the reply that was received from the FTP server.</returns>
        </member>
        <member name="P:Xceed.Ftp.FtpReplyException.Reply">
            <summary>Gets the FtpReply received from the FTP server.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpSslException">
            <summary>The exception that is thrown when a problem occurs with SSL handshake, encryption, or certificate manipulation.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpTimeoutException">
            <summary>The exception that is thrown by the FTP client when an operation times-out.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor">
            <summary>Initializes a new instance of the FtpTimeoutException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor">
            <summary>Initializes a new instance of the FtpTimeoutException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor(System.String)">
            <summary>Initializes a new instance of the FtpTimeoutException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpUnixListingParser">
            <summary>Class which represents a parser that is used to parse lines received from a UNIX FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpUnixListingParser.#ctor">
            <summary>Initializes a new instance of the FtpUnixListingParser class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpUnixListingParser.ParseLine(System.String)">
            <summary>Parses the specified listing line received from the FTP server.</summary>
            <returns>A reference to an FtpItemInfo object containing the information that was parsed from the listing line received from the FTP server. Can be Empty to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be $$NULL$$ to indicate that the listing line was not recognized as a valid UNIX listing line.</returns>
            <remarks>    The UNIX listing parser will try to parse the listing     lines received from the FTP server. After 5 failed attempts,     the UNIX parser will be discarded by the     FtpListingParserList.</remarks>
            <param name="line">The listing line received from the FTP server.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpVmsListingParser">
            <summary>Class which represents a parser that is used to parse lines received from a VMS FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpVmsListingParser.#ctor">
            <summary>Initializes a new instance of the FtpVmsListingParser class.</summary>
        </member>
        <member name="M:Xceed.Ftp.FtpVmsListingParser.ParseLine(System.String)">
            <summary>Parses the specified listing line received from the FTP server.</summary>
            <returns>A reference to an FtpItemInfo object containing the information that was parsed from the listing line received from the FTP server. Can be Empty to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be $$NULL$$ to indicate that the listing line was not recognized as a valid VMS listing line.</returns>
            <remarks>    The VMS listing parser will try to parse the listing     lines received from the FTP server. After 5 failed attempts,     the VMS listing parser will be discarded by the     FtpListingParserList.</remarks>
            <param name="line">The listing line received from the FTP server.</param>
        </member>
        <member name="T:Xceed.Ftp.HttpProxyClient">
            <summary>Class which enables connecting to an FTP server via an HTTP proxy server.</summary>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor">
            <summary>Creates a new HttpProxyClient class.</summary>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.Net.IPEndPoint)">
            <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server address.</summary>
            <param name="address">The HTTP proxy server address to connect to.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.Net.IPEndPoint,System.String,System.String)">
            <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname, using the specified userName and password credentials.</summary>
            <param name="address">The HTTP proxy server address to connect to.</param>
            <param name="userName">The username used to log into the HTTP proxy server.</param>
            <param name="password">The password used to log into the HTTP proxy server.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String)">
            <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname. If no port number is specified in the hostName string, port 80 is used.</summary>
            <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String,System.Int32)">
            <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname and port number.</summary>
            <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
            <param name="port">The port on the HTTP proxy server to connect to.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname and port number, using the specified userName and password credentials.</summary>
            <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
            <param name="port">The port on the HTTP proxy server to connect to.</param>
            <param name="userName">The username used to log into the HTTP proxy server.</param>
            <param name="password">The password used to log into the HTTP proxy server.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname, using the specified userName and password credentials. If no port number is specified in the hostName string, port 80 is used.</summary>
            <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
            <param name="userName">The username to use to log into the HTTP proxy server.</param>
            <param name="password">The password to use to log into the HTTP proxy server.</param>
        </member>
        <member name="T:Xceed.Ftp.HttpReply">
            <summary>Represents a reply received from the HTTP proxy server.</summary>
            <remarks>See the HTTP RFC for details.</remarks>
        </member>
        <member name="M:Xceed.Ftp.HttpReply.ToString">
            <summary>Returns a string representation of the reply received from the HTTP proxy server.</summary>
            <returns>A string that represents the reply received from the HTTP proxy server</returns>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.Content">
            <summary>Gets the content of the HTTP response's body.</summary>
            <remarks>See the HTTP RFC for details.</remarks>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.ContentLength">
            <summary>Gets the size of the HTTP response's body.</summary>
            <remarks>    The actual length may be less than this value if the     connection is lost before receiving the entire body.     See the HTTP RFC     for details.</remarks>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.ContentType">
            <summary>Gets the media type of the HTTP response's body.</summary>
            <remarks>See the HTTP RFC for details.</remarks>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.Lines">
            <summary>Gets the lines returned by the HTTP proxy server without the response's body.</summary>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.ReasonPhrase">
            <summary>Gets the reason associated with the reply code returned by the server.</summary>
            <remarks>See the HTTP RFC for details.</remarks>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.ReplyCode">
            <summary>Gets the reply code returned by the server.</summary>
            <remarks>See the HTTP RFC for details.</remarks>
        </member>
        <member name="P:Xceed.Ftp.HttpReply.Type">
            <summary>Gets a value representing the type of reply received from the HTTP proxy server.</summary>
            <remarks>See the HTTP RFC for details.</remarks>
        </member>
        <member name="T:Xceed.Ftp.HttpReplyException">
            <summary>The exception that is thrown by the FTP client when an error reply is received from an HTTP proxy.</summary>
        </member>
        <member name="M:Xceed.Ftp.HttpReplyException.#ctor">
            <summary>Initializes a new instance of the HttpReplyException class.</summary>
        </member>
        <member name="M:Xceed.Ftp.HttpReplyException.#ctor(Xceed.Ftp.HttpReply)">
            <summary>Initializes a new instance of the HttpReplyException class with a specified HttpReply.</summary>
            <param name="reply">The HttpReply received from the HTTP proxy.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpReplyException.#ctor(Xceed.Ftp.HttpReply,System.String)">
            <summary>Initializes a new instance of the HttpReplyException class with a specified HttpReply and error message.</summary>
            <param name="reply">The HttpReply received from the HTTP proxy.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.HttpReplyException.ToString">
            <summary>Returns a string representation of the current exception including the reply that was received from the HTTP proxy.</summary>
            <returns>A string representation of the current exception including the reply that was received from the HTTP proxy.</returns>
        </member>
        <member name="P:Xceed.Ftp.HttpReplyException.Reply">
            <summary>Gets the HttpReply received from the HTTP proxy.</summary>
        </member>
        <member name="T:Xceed.Ftp.Licenser">
            <summary>Class which is used to register the classes located in the Xceed.Ftp namespace.</summary>
            <remarks>    We recommend you set the LicenseKey property in the main     entry point of the application. For example, the LicenseKey     property can be set, for C# users, in the static main function.     For VB.NET users, it can be set in the constructor of the main     form or in the "Sub Main" procedure. If no entry point is     available, it is recommended that the LicenseKey property be     set in a static constructor of a class that will be accessed     systematically before any of the library's classes are     instantiated or, you can simply set the LicenseKey property     immediately BEFORE you instantiate a class.</remarks>
        </member>
        <member name="P:Xceed.Ftp.Licenser.LicenseKey">
            <summary>Gets or sets the license key used to license this product.</summary>
        </member>
        <member name="T:Xceed.Ftp.MultipleFileTransferErrorEventArgs">
            <summary>Provides information for files that fail to be transferred during a multiple-file transfer.</summary>
            <remarks>    By default, if an error occurs during the multiple-file     transfer, the entire operation will be aborted. To     change this behavior, set the Action property set to either     Retry or Ignore.</remarks>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action">
            <summary>Gets or sets a value indicating the action to take for the file failed to be transferred during a multiple-file transfer.</summary>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Exception">
            <summary>Gets the exception that was thrown while attempting to transfer a file during a multiple-file transfer.</summary>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.LocalItemName">
            <summary>Gets the local path and name of the item that failed to be transferred during a multiple-file transfer.</summary>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.RemoteItemName">
            <summary>Gets the remote name of the item that failed to be transferred during a multiple-file transfer.</summary>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.RemoteItemType">
            <summary>Gets or sets the type of the remote item which failed to be transferred during a multiple-file transfer.</summary>
        </member>
        <member name="T:Xceed.Ftp.ParsingListingLineEventArgs">
            <summary>Provides information on the FTP item whose listing information was retrieved.</summary>
        </member>
        <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Item">
            <summary>Gets an FtpItemInfo object representing the listing information of an FTP item.</summary>
        </member>
        <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Line">
            <summary>Gets the listing line which was returned by the FTP server and used to create the Item.</summary>
        </member>
        <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Valid">
            <summary>Gets or sets a boolean value indicating if the listing line returned by the FTP server was valid.</summary>
            <remarks>    If Valid is true when the ParsingListingLine event is     raised, at least one parser succeeded in parsing the listing     line and Item has been filled with the parsed information. To     filter (remove) an item from the listing set Valid to false.     The content of Item can also be modified if you want to change     the item's information.     If Valid is false when the event is raised, none of the     parsers succeeded in parsing the listing line. In this case you     can provide your own parsing, fill Item and set Valid to     true.</remarks>
        </member>
        <member name="T:Xceed.Ftp.ProxyClient">
            <summary>Base abstract class for creating a proxy client that allows connection or login to a remote FTP server via a proxy server.</summary>
        </member>
        <member name="P:Xceed.Ftp.ProxyClient.Address">
            <summary>Gets the address of the proxy server this proxy client connects to.</summary>
            <remarks>If the proxy client was created from a hostname and port, this property returns null until a first connection is made.</remarks>
        </member>
        <member name="P:Xceed.Ftp.ProxyClient.HostName">
            <summary>Gets the hostname or IP address of the proxy server this proxy client connects to.</summary>
        </member>
        <member name="P:Xceed.Ftp.ProxyClient.Port">
            <summary>Gets the port number of the proxy server this proxy client connects to.</summary>
        </member>
        <member name="T:Xceed.Ftp.QuickFtp">
            <summary>Exposes static methods that allow basic FTP file operations.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Delete">
            <summary>Deletes the specified files from the specified FTP server, specifying whether this is done recursively.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Boolean,System.String[])">
            <summary>Deletes the specified files from the specified FTP server, specifying whether this is done recursively.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
            <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.Boolean,System.String[])">
            <summary>Deletes the specified files from the specified FTP server, specifying a port and whether this is done recursively.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port number on the FTP server to use.</param>
            <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
            <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.String,System.String,System.Boolean,System.String[])">
            <summary>Deletes the specified files from the specified FTP server, specifying a port, a username/password, and whether this is done recursively.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port number on the FTP server to use.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
            <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,System.Object,System.String[])">
            <summary>Deletes the specified files from the specified FTP server, specifying a port, a username/password, an authentication method, verification flags, a certificate, data channel protection, whether the operation is recursive and/or passive, whether authentication is implicit, a proxy, a time-out, default representation type, a synchronizing object, and delegates for notifications.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port number on the FTP server to use.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,System.Object,Xceed.Ftp.TransferMode,System.String[])">
            <summary>Deletes the specified files from the specified FTP server, specifying a port, a username/password, an authentication method, verification flags, transfer mode, a certificate, data channel protection, whether the operation is recursive and/or passive, whether authentication is implicit, a proxy, a time-out, default representation type, a synchronizing object, and delegates for notifications.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port number on the FTP server to use.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="transferMode">    The transfer mode used     to send data to and from an FTP server.</param>
            <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents">
            <summary>Gets a listing of the provided remote folder, specifying filters and whether the operation is recursive.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.String,System.Boolean,System.String[])">
            <summary>Gets a listing of the provided remote folder, specifying filters and whether the operation is recursive.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
            <param name="recursive">Boolean value indicating whether files contained within sub-folders should be listed from the FTP host.</param>
            <param name="filters">The filters to apply for the GetFtpContents.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.Boolean,System.String[])">
            <summary>Gets a listing of the provided remote folder, specifying a port, filters, and whether the operation is recursive.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to.</param>
            <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be listed from the FTP host.</param>
            <param name="filters">The filters to apply for the GetFtpContents.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>Gets a listing of the provided remote folder, specifying a port, a username/password, filters, and whether the operation is recursive.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be listed from the FTP host.</param>
            <param name="filters">The filters to apply for the GetFtpContents.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.String[])">
            <summary>Gets a listing of the provided remote folder, specifying a port, an authentication method, a certificate, data channel protection, filters, and whether authentication is implicit and whether the operation is recursive.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake.</param>
            <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be listed from the FTP host.</param>
            <param name="filters">The filters to apply for the GetFtpContents.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.String,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,System.String[])">
            <summary>Gets a listing of the provided remote folder, specifying a port, a username/password, an authentication method, whether authentication is implicit, verification flags, a certificate, data channel protection, a proxy, a time-out, default representation type, whether files are listed recursively and/or passively, a trace writer, a synchronizing object, delegates for notifications, and filters.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="remoteFolderToList">The path to the remote folder to list. i.e.: \ftproot\test</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="filters">The filters to apply for the GetFtpContents.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.String,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.TransferMode,System.String[])">
            <summary>Gets a listing of the provided remote folder, specifying a port, a username/password, an authentication method, whether authentication is implicit, verification flags, a certificate, data channel protection, a proxy, a time-out, default representation type, whether files are listed recursively and/or passively, a trace writer, the transfer mode, a synchronizing object, delegates for notifications, and filters.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="remoteFolderToList">The path to the remote folder to list. i.e.: \ftproot\test</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
            <param name="synchronizingObject">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="transferMode">    The transfer mode used     to send data to and from an FTP server.</param>
            <param name="filters">The filters to apply for the GetFtpContents.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive">
            <summary>Receives a list of files, specifying the hostname of the FTP server and the local destination folder into which files will be placed.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.String,System.String[])">
            <summary>Receives a list of files, specifying the hostname of the FTP server and the local destination folder into which files will be placed.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String[])">
            <summary>Receives a list of files from an FTP server to a local folder, specifying a port number.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port number on the FTP server to use.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,System.String,System.String[])">
            <summary>Receives a list of files from an FTP server to a local folder, specifying a port number, and a username and password.</summary>
            <param name="hostname">The hostname of the FTP server to connect to.</param>
            <param name="port">The port number on the FTP server to use. An IP address can also be used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,System.String,Xceed.Ftp.TransferMode,System.String[])">
            <summary>Receives a list of files from an FTP server to a local folder, specifying a port number, transfer mode, and a username and password.</summary>
            <param name="hostname">The hostname of the FTP server to connect to.</param>
            <param name="port">The port number on the FTP server to use. An IP address can also be used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="transferMode">    The transfer mode used     to send data to and from an FTP server.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.String[])">
            <summary>Receives a list of files from an FTP server to a local folder, specifying a port number, an authentication method, whether authentication is implicit, verification flags, a client certificate, and data channel protection.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake.</param>
            <param name="localDestinationFolder">A string representing the local destination folder into which the files will be placed.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.QuickFtp+ByteProgressionCallback,Xceed.Ftp.QuickFtp+ItemProgressionCallback,System.Object,System.String[])">
            <summary>Receives a list of files from an FTP server, specifying a port, a username/password, an authentication method, whether authentication is implicit verification flags, a certificate, data channel protection, whether existing files will be replaced, directory structure will be preserved, transfer will be recursive, and delegates for notifications.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
            <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification.</param>
            <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
            <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.QuickFtp+ByteProgressionCallback,Xceed.Ftp.QuickFtp+ItemProgressionCallback,System.Object,System.String[])">
            <summary>Receives a list of files from an FTP server to a local folder, specifying a port, a username and password, an authentication method, whether authentication is implicit, verification flags, a certificate, whether existing files will be replaced, directory structure will be preserved, transfer will be passive and/or recursive, a proxy, a time-out, default representation type, delegates for notifications, etc.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used (not applicable to the Compact Framework version).</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
            <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
            <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.QuickFtp+ByteProgressionCallback,Xceed.Ftp.QuickFtp+ItemProgressionCallback,System.Object,Xceed.Ftp.TransferMode,System.String[])">
            <summary>Receives a list of files from an FTP server to a local folder, specifying a port, a username and password, an authentication method, whether authentication is implicit, verification flags, a certificate, whether existing files will be replaced, directory structure will be preserved, transfer will be passive and/or recursive, a proxy, a time-out, transfer mode, default representation type, delegates for notifications, etc.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used (not applicable to the Compact Framework version).</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
            <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
            <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="transferMode">    The transfer mode used     to send data to and from an FTP server.</param>
            <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send">
            <summary>Sends a list of files to a remote folder on an FTP server.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.String,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
            <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server, specifying a port number.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to.</param>
            <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
            <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,System.String,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server, specifying a port number and a username and password.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
            <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server, specifying a port number, an authentication method, whether authentication is implicit, verification flags, a certificate, and data channel protection.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake.</param>
            <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
            <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.QuickFtp+ByteProgressionCallback,Xceed.Ftp.QuickFtp+ItemProgressionCallback,System.Object,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server, specifying a port, a username/password, an authentication method, whether authentication is implicit, verification flags, a certificate, data channel protection, whether existing files are replaced, files are sent recursively, and paths are preserved at destination, delegates for notifications, and a synchronizing object.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="remoteDestinationFolder">The path of the remote folder where the file must be copied into</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
            <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
            <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="filesToSend">A list of strings representing the files to be put. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.QuickFtp+ByteProgressionCallback,Xceed.Ftp.QuickFtp+ItemProgressionCallback,System.Object,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server, specifying a port, username and password, an authentication method, whether authentication is implicit, verification flags, a certificate, data channel protection, whether existing files are replaced, files are sent recursively and/or passively, and paths are preserved at destination, a proxy, a time-out, default representation type, delegates for notifications, a synchronizing object, etc.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="remoteDestinationFolder">The path of the remote folder where the file must be copied into</param>
            <param name="replaceExistingFiles">    true if existing files are to be     replaced; false otherwise.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
            <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
            <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="filesToSend">A list of strings representing the files to be put. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp+CertificateReceivedCallback,Xceed.Ftp.QuickFtp+CertificateRequiredCallback,Xceed.Ftp.QuickFtp+ByteProgressionCallback,Xceed.Ftp.QuickFtp+ItemProgressionCallback,System.Object,Xceed.Ftp.TransferMode,System.String[])">
            <summary>Sends a list of files to a remote folder on an FTP server, specifying a port, username and password, an authentication method, whether authentication is implicit, verification flags, a certificate, data channel protection, whether existing files are replaced, files are sent recursively and/or passively, and paths are preserved at destination, a proxy, a time-out, default representation type, transfer mode, delegates for notifications, a synchronizing object, etc.</summary>
            <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
            <param name="username">The username used to connect to the FTP server.</param>
            <param name="password">The password used to connect to the FTP server.</param>
            <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. Not applicable to the Compact Framework version.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. Not applicable to the Compact Framework version.</param>
            <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. Not applicable to the Compact Framework version.</param>
            <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. Not applicable to the Compact Framework version.</param>
            <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL handshake. Not applicable to the Compact Framework version.</param>
            <param name="remoteDestinationFolder">The path of the remote folder where the file must be copied into</param>
            <param name="replaceExistingFiles">    true if existing files are to be     replaced; false otherwise.</param>
            <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
            <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
            <param name="proxy">The active proxy client for connecting to the FTP server.</param>
            <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
            <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
            <param name="defaultRepresentationType">The default value indicating how the data is transferred to and from the FTP server.</param>
            <param name="traceWriter">The TextWriter which will trace the communications between the client-side and the FTP server.</param>
            <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required. Not applicable to the Compact Framework version.</param>
            <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. Not applicable to the Compact Framework version.</param>
            <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. Not applicable to the Compact Framework version.</param>
            <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
            <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="transferMode">    The transfer mode used     to send data to and from an FTP server.</param>
            <param name="filesToSend">A list of strings representing the files to be put. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
        </member>
        <member name="T:Xceed.Ftp.QuickFtpException">
            <summary>Exception that is thrown when an error occurs in a method of the QuickFtp class.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtpException.#ctor">
            <summary>Initializes a new instance of the QuickFtpException class with the specified message text.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtpException.#ctor(System.String)">
            <summary>Initializes a new instance of the QuickFtpException class with the specified message text.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Ftp.QuickFtpException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the QuickFtpException class with specified message text and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.Ftp.QuickFtpItem">
            <summary>Represents an item located on an FTP server and exposes properties that get information in regards to the item.</summary>
        </member>
        <member name="M:Xceed.Ftp.QuickFtpItem.#ctor(Xceed.Ftp.FtpFile)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Ftp.ReplyReceivedEventArgs">
            <summary>Provides information on the reply that has been received from the FTP server.</summary>
        </member>
        <member name="P:Xceed.Ftp.ReplyReceivedEventArgs.Reply">
            <summary>Gets the reply that was received from the FTP server.</summary>
        </member>
        <member name="T:Xceed.Ftp.StringList">
            <summary>Contains a list of strings.</summary>
        </member>
        <member name="M:Xceed.Ftp.StringList.Add(System.String)">
            <summary>Adds a string to the list.</summary>
            <returns>The zero-based index at which the string was added.</returns>
            <remarks>    This method accepts a string with multiple lines however     each line will be added as an individual item to the list. The     index of the first line added will be returned.</remarks>
            <param name="value">The string to add.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.AddRange(System.String[])">
            <summary>Adds the elements of a string array to the end of the StringList collection.</summary>
            <param name="values">An array of strings representing the strings to add to the end of the StringList collection</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.Clear">
            <summary>Removes all strings from the list.</summary>
        </member>
        <member name="M:Xceed.Ftp.StringList.Contains(System.String)">
            <summary>Retrieves a boolean value indicating if a specific string exists in the list.</summary>
            <returns>true if the string exists in the list; false otherwise.</returns>
            <param name="value">The string to locate.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.IndexOf(System.String)">
            <summary>Searches for the specified string and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">The string to locate.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.Insert(System.Int32,System.String)">
            <summary>Inserts a string into the list at the specified index</summary>
            <param name="index">The zero-based index at which to insert the string.</param>
            <param name="value">The string to insert.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.Remove(System.String)">
            <summary>Removes the string from the list.</summary>
            <param name="value">The string to remove.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.RemoveAt(System.Int32)">
            <summary>Removes the string from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the string.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.ToString">
            <summary>Returns a string representing the entire contents the string list. Each item in the string list is separated by a carriage-return/line-feed (CRLF).</summary>
            <returns>A string representing the entire contents the string list. Each item in the string list is separated by a carriage-return/line-feed (CRLF).</returns>
        </member>
        <member name="P:Xceed.Ftp.StringList.IsFixedSize">
            <summary>Gets a value indicating whether the StringList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Ftp.StringList.IsReadOnly">
            <summary>Gets a boolean value indicating if the StringList is readonly.</summary>
        </member>
        <member name="P:Xceed.Ftp.StringList.Item(System.Int32)">
            <summary>Gets or sets the string at the specified index.</summary>
            <param name="index">The zero-based index at which to get the string.</param>
        </member>
        <member name="T:Xceed.Ftp.TransferringFileEventArgs">
            <summary>Provides information on the file being sent or received.</summary>
        </member>
        <member name="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename">
            <summary>Gets the path and filename of the local file.</summary>
            <remarks>    When using overloads of the String) and String) methods     that take a Stream as a parameter, LocalFilename will be     Empty.</remarks>
        </member>
        <member name="P:Xceed.Ftp.TransferringFileEventArgs.RemoteFilename">
            <summary>Gets the filename of the remote file.</summary>
        </member>
        <member name="T:Xceed.Ftp.CertificateReceivedEventHandler">
            <summary>Represents that method that will handle the CertificateReceived event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A CertificateReceivedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.CertificateRequiredEventHandler">
            <summary>Represents that method that will handle the CertificateRequired event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A CertificateRequiredEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.CommandSentEventHandler">
            <summary>Represents the method that will handle the CommandSent event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A CommandSentEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.FileTransferStatusEventHandler">
            <summary>Represents the method that will handle the FileTransferStatus event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A FileTransferStatusEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.MultipleFileTransferErrorEventHandler">
            <summary>Represents the method that will handle the MultipleFileTransferError event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A MultipleFileTransferErrorEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.ParsingListingLineEventHandler">
            <summary>Represents the method that will handle the ParsingListingLine event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ParsingListingLineEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.QuickFtp+ByteProgressionCallback">
            <summary>Delegate for ByteProgression notification.</summary>
            <param name="currentItemName">The name of the current item.</param>
            <param name="currentItemBytesProcessed">The bytes of the current item that have been processed.</param>
            <param name="currentItemTotalBytes">The total number of bytes of the current item.</param>
            <param name="currentItemPercent">The percentage completed of the current item.</param>
            <param name="allFilesBytesProcessed">The number of bytes processed of all the items.</param>
            <param name="allFilesTotalBytes">The total number of bytes of all items.</param>
            <param name="allFilesPercent">The percentage completed of all items.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="T:Xceed.Ftp.QuickFtp+CertificateReceivedCallback">
            <summary>Delegate for CertificateReceived notification.</summary>
            <param name="serverCertificate">The certificate received from the FTP server.</param>
            <param name="verificationAction">The verification action to take when a certificate is received from an FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="verificationStatus">The verification status of the certificate received from the FTP server.</param>
        </member>
        <member name="T:Xceed.Ftp.QuickFtp+CertificateRequiredCallback">
            <summary>Delegate for CertificateRequired notification.</summary>
            <param name="certificate">The certificate passed to the server when the CertificateRequired event is received.</param>
        </member>
        <member name="T:Xceed.Ftp.QuickFtp+ItemProgressionCallback">
            <summary>Delegate for ItemProgression notification.</summary>
            <param name="currentItemName">The name of the current item.</param>
            <param name="itemsProcessed">The number of items processed up to this point.</param>
            <param name="totalItemsCount">The total number of items to be processed.</param>
            <param name="totalItemsPercent">The percentage of items competed.</param>
            <param name="abort">Boolean value indicating whether or not the operation should be aborted.</param>
            <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="T:Xceed.Ftp.ReplyReceivedEventHandler">
            <summary>Represents the method that will handle the ReplyReceived event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ReplyReceivedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.TransferringFileEventHandler">
            <summary>Represents the method that will handle the SendingFile and ReceivingFile events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A TransferringFileEventArgs that contains the event data.</param>
        </member>
    </members>
</doc>
