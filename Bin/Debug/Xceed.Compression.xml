<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Xceed.Compression</name>
    </assembly>
    <members>
        <member name="N:Xceed.Compression">
            <summary>The Xceed.Compression namespace defines the CompressedStream class which can be constructed around any kind of Stream object to compress data that is written to the stream and decompress data that is read from the stream.</summary>
        </member>
        <member name="T:Xceed.Compression.CompressionLevel">
            <summary>Represents the amount of compression to be applied when compressing data. The greater the amount of compression applied, the greater the time it takes to perform the compression.</summary>
            <remarks>The compression level only applies to the Deflated and Deflated64 compression methods. It does not apply to the BZip2, BWT, or PPMd compression methods.</remarks>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.None">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.Lowest">
            <summary>Minimum compression. Takes the least amount of time to compress data.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.Normal">
            <summary>Normal compression. Best balance between the time it takes to compress data and the compression ratio achieved.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionLevel.Highest">
            <summary>Maximum compression. Best compression ratio that the compression algorithm is capable of producing. Compared to the Normal compression level, this level significantly increases compression time for only slightly smaller compressed data. It is recommended to use this setting only when you really need to achieve the smallest possible files and when compression time is not important.</summary>
        </member>
        <member name="T:Xceed.Compression.CompressionMethod">
            <summary>Represents the compression algorithm to be used when compressing data.</summary>
            <remarks>    The PPMd algorithm uses a custom memory management system     called SubAllocator. In a zip file, the memory size the     SubAllocator uses is defined in the WinZip PPMd header for the     compressed file and this header's value is used when     decompressing the data. In general, WinZip uses 64Mb. Since the     algorithm used was not optimized from the original PPMd version     I revision 1, the SubAllocator initially requires the total     amount of memory specified in the PPMd compressor. This means     you must have at least 64 free Mb of RAM when using this     compression method.          The compression     level only applies to the Deflated and Deflated64 compression     methods. It does not apply to the BZip2,     BWT, or PPMd compression methods.</remarks>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.Stored">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.Deflated">
            <summary>Deflate algorithm. Standard algorithm used by the PKZip 2.04g format.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.Deflated64">
            <summary>    Deflate64 algorithm also know as Enhanced Deflate.     Deflate64 is a variation of the Deflate algorithm that     uses a 64K sliding window rather than a 32K window in order to     compress a sequence of bits. Deflate64 takes longer to compress     data than Deflate, however it provides better compression.     The Xceed Self-Extractor Module does not support the     Deflated64 compression method.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.BZip2">
            <summary>    BZip2 algorithm.     A BWT-based block-sorting algorithm used in zip files     created with WinZip 11.0 and up. An excellent alternative to     Deflate and Deflate64 when speed can be traded off.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.LZMA">
            <summary>    LZMA algorithm.     The Lempel-Ziv-Markov chain-Algorithm (LZMA) uses an     improved and optimized version of the Lempel-Ziv (LZ77)     compression algorithm, backed by a Markov chain range encoder.     It uses a variable dictionary size. Used in zip files created     with WinZip 12.0 and up.     LZMA typically provides much better compression than the     Deflate and Deflate64 algorithms at the expense of speed and     memory usage when compressing. It also typically provides     compression ratios a little better than BZip2/BWT and PPMd     while being a little faster.     Compression usually requires (&lt;dictionary size&gt; *     11.5 + 6 MB)     Decompression is usually fast and requires &lt;dictionary     size&gt; + 16K</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.BWT">
            <summary>    BWT algorithm.     The raw BWT block-sorting algorithm. Produces smaller     compressed output than the BZip2 method, but is not compatible     with WinZip. It is compatible with zip files created using the     BWT compression method offered by Xceed Zip Compression Library     ActiveX.</summary>
        </member>
        <member name="F:Xceed.Compression.CompressionMethod.PPMd">
            <summary>    PPMd algorithm.     A PPM-based predictor algorithm used in zip files created     with Winzip 11.0 and up. In our tests, especially with text     files and XML files, the PPMd method generally produced the     smallest compressed output.     Xceed recommends that the PPMd compression method be     selected when dealing with text files, XML files, and other     files with high redundancy, as this is where the PPMd algorithm     is able to create smaller files than the other compression     methods.     PPMd is not supported by Xceed Zip for Compact     Framework or 64-bit platforms.</summary>
        </member>
        <member name="T:Xceed.Compression.LZMAHeaderType">
            <summary>Identifies the various header formats that can be read/written by the ManagedLZMACompressor and ManagedLZMADecompressor classes.</summary>
        </member>
        <member name="F:Xceed.Compression.LZMAHeaderType.None">
            <summary>    No header will be read or written. Use this value if     you're making your own data format.     Note that LZMA will not work correctly without knowing     its properties.</summary>
        </member>
        <member name="F:Xceed.Compression.LZMAHeaderType.Properties">
            <summary>The header consists only of the LZMA properties as encoded by the LZMA engine. It is 5 bytes long. The first byte is an encoded property value and the remaining 4 bytes represent the dictionary size.</summary>
        </member>
        <member name="F:Xceed.Compression.LZMAHeaderType.Zip">
            <summary>The header is in the format specified by the Zip Specification 6.3.2 for the LZMA compression method. Refer to the specification for more details.</summary>
        </member>
        <member name="T:Xceed.Compression.MatchFinder">
            <summary>Identifies the various match finder algorithms supported by the LZMA compression method.</summary>
        </member>
        <member name="F:Xceed.Compression.MatchFinder.bt2">
            <summary>Binary tree with 2 bytes hashing. The memory requirement is dictionary size * 9.5 + 4 MB.</summary>
        </member>
        <member name="F:Xceed.Compression.MatchFinder.bt4">
            <summary>Binary tree with 4 bytes hashing. The memory requirement is dictionary_size * 11.5 + 4 MB.</summary>
        </member>
        <member name="T:Xceed.Compression.CompressedStream">
            <summary>Pass-through stream that applies compression and decompression to an inner stream.</summary>
            <remarks>    Compression is applied to data being written to the     stream, and decompression is performed when data is read from     the stream.     The compression engine itself is not built into the     CompressedStream class. Instead, user-supplied     Compressor and Decompressor classes are used.     It is possible to implement your own compression     algorithm by implementing classes derived from Compressor and     Decompressor.     By default, closing the CompressedStream     will also close the inner stream. This behavior can be modified     by setting the Transient property to     true.</remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor">
            <summary>Initializes a new instance of the CompressedStream class.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream)">
            <summary>Initializes a CompressedStream using the default compressor and decompressor classes.</summary>
            <param name="inner">Inner stream.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>Initializes a CompressedStream using the provided compression method and level.</summary>
            <param name="inner">Inner stream.</param>
            <param name="method">Compression method to use.</param>
            <param name="level">Compression level to use.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Compressor)">
            <summary>Initializes a compress-only CompressedStream using the provided compressor class.</summary>
            <param name="inner">Inner stream.</param>
            <param name="compressor">Compressor class used to perform data compression.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Compressor,Xceed.Compression.Decompressor)">
            <summary>Initializes a CompressedStream using the provided compressor and decompressor classes.</summary>
            <param name="inner">Inner stream.</param>
            <param name="compressor">Compressor class used to perform data compression.</param>
            <param name="decompressor">Decompressor class used to perform data decompression.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.#ctor(System.IO.Stream,Xceed.Compression.Decompressor)">
            <summary>Initializes a decompress-only CompressedStream using the provided decompressor class.</summary>
            <param name="inner">Inner stream.</param>
            <param name="decompressor">Decompressor class used to perform data decompression.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Dispose">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Dispose(System.Boolean)">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Finalize">
            <summary>Allows the CompressedStream object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Flush">
            <summary>Causes all pending compressed data to be written to the inner stream, and updates the underlying data source or repository of the inner stream with the current state of the buffer.</summary>
            <remarks>    This may degrade compression for some compression     algorithms, so it should be used only when     necessary.Even if all the inner buffers are flushed, the     inner stream will not be complete unless the Close is called.     This is because when the CompressedStream is closed it writes     the final compressed information to the inner stream; Flush     does not.</remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.GetRemainingStream">
            <summary>Retrieves a stream which starts immediately after the last byte of compressed data.</summary>
            <returns>A Stream containing the data located immediately after the last byte of compressed data allowing you to continue reading the data.</returns>
            <remarks>    In order to access the remaining data, the     CompressedStream's Transient property must be set to     true.     In the case where more than one chunks of compressed data     are appended to each other in the same stream, you can use the     GetRemainingStream method to decompress the next chunk of     compressed data.     Closing the stream returned by the GetRemainingStream     method will not close the inner stream. You will need to call     the inner stream's Close method yourself once you are finished     with the returned stream.     GetRemainingStream must be called before the     CompressedStream's Close method is called.</remarks>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads and decompresses a sequence of bytes from the inner stream.</summary>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes aren't currently available, or zero if the end of the stream has been reached. Applications must check the return value to prevent data corruption.</returns>
            <remarks>    The CompressedStream object reads and decompresses data     from the inner stream into a private buffer, and uses this     buffer to satisfy Read requests. If a such a request cannot be     satisfied, more data is read and decompressed from the inner     stream.     When Read returns a positive value, it means that there     is more uncompressed data available in the CompressedStream     buffer, but the end of the inner stream could have already been     reached.     When this method returns 0, it really means that all of     the inner stream's data has been read and decompressed.     If the reading process to decompress the byte array has     already begun, CanWrite will always return false.</remarks>
            <param name="buffer">An array of bytes. A maximum of count bytes are stored in this array.</param>
            <param name="offset">The byte offset in buffer at which to begin storing the data decompressed from the inner stream.</param>
            <param name="count">The maximum number of bytes to be stored in buffer.</param>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>A CompressedStream object is not seekable.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.SetLength(System.Int64)">
            <summary>A CompressedStream object is not seekable.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses and writes a sequence of bytes to the inner stream.</summary>
            <returns>The total number of bytes written to the inner stream. This may be less than the count parameter. It may even be 0.</returns>
            <remarks>    In order to achieve optimum compression, some compression     algorithms store data to compress into internal buffers before     actually compressing it.     When Write returns, all the data provided in the buffer     parameter has been successfully given to the compressor, but     has not necessarily been written to the inner stream.     The return value of this method represents the number of     compressed bytes that have been actually written to the inner     stream.     If you need to write all pending data to the inner     stream, you can call the Flush method on the     CompressedStream.     If the writing process to compress the byte array has     already begun, CanRead will always return false.</remarks>
            <param name="buffer">An array of bytes. A maximum of count bytes are taken from this array and compressed into the inner stream.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.CanRead">
            <summary>Determines whether the inner stream supports reading AND the compressed stream supports data decompression.</summary>
            <remarks>    If the reading process to decompress the stream's data     has already begun, CanWrite will always return false.</remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.CanSeek">
            <summary>A CompressedStream object is not seekable.</summary>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.CanWrite">
            <summary>Determines whether the inner stream supports writing AND the compressed stream supports data compression.</summary>
            <remarks>    If the writing process to compress the stream's data has     already begun, CanRead will always return false.</remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.InnerStream">
            <summary>Gets the Stream that was passed when creating this CompressedStream.</summary>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.Length">
            <summary>A CompressedStream object is not seekable.</summary>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.Position">
            <summary>A CompressedStream object is not seekable.</summary>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.RemainingOffset">
            <summary>Gets the negative byte offset at which the compressed data ends inside the last data buffer read by the object.</summary>
            <remarks>This property in only useful in advanced decompression scenarios.</remarks>
        </member>
        <member name="P:Xceed.Compression.CompressedStream.Transient">
            <summary>Gets or sets a boolean value indicating if the stream is responsible for closing its inner stream.</summary>
        </member>
        <member name="T:Xceed.Compression.CompressionException">
            <summary>Exception that is thrown when there is a problem compressing or decompressing data.</summary>
            <remarks>    This exception serves as the base class for all custom     exceptions defined in the Xceed.Compression namespace.     Since this exception is thrown by the CompressedStream     object, it derives from IOException. This is because any code     that use streams will expect an IOException to be thrown in     case of errors while working with the stream.</remarks>
        </member>
        <member name="M:Xceed.Compression.CompressionException.#ctor">
            <summary>Initializes a new instance of the exception with the specified message text.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressionException.#ctor(System.String)">
            <summary>Initializes a new instance of the exception with the specified message text.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Compression.CompressionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.Compression.CompressionInternalException">
            <summary>Exception that is thrown when something unexpected occurs while compressing or decompressing data.</summary>
            <remarks>    This exception means that there was an internal failure     in the library, and that nothing could be done to prevent it.     Such failures should never occur.     To get more details about what went wrong, you can     inspect the InnerException property. It is a reference to the     exception that caused the internal failure.     If you ever catch this exception in your code, please     contact Xceed Software Technical Support immediately.</remarks>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor">
            <summary>Initializes a new instance of the exception.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor">
            <summary>Initializes a new instance of the exception.</summary>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the exception with the specified inner exception.</summary>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor(System.String)">
            <summary>Initializes a new instance of the exception with the specified message test.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Compression.CompressionInternalException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.Compression.Compressor">
            <summary>Abstract class from which other classes can derive to implement custom compression algorithms.</summary>
            <remarks>    This class (and its subclasses) will primarily be used by     the CompressedStream class.     A subclass must at least implement the abstract Byte[]@)     method.</remarks>
        </member>
        <member name="M:Xceed.Compression.Compressor.Compress(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Byte[]@)">
            <summary>Compresses an array of bytes.</summary>
            <returns>The number of bytes written to the compressed parameter.</returns>
            <remarks>    When the first call to Compress is made, a compression     "session" is created. This session remains opened as long as     Compress is called with the parameter endOfData set to False.     During a compression session, the compression engine can     choose to keep the data to compress in an internal buffer and     return an empty array after a call to Compress. Many     compression algorithms do this to get optimum compression by     examining a certain number of bytes before compressing     anything.     A call to Compress with an empty buffer or a count of     zero tells the compression engine to flush its internal buffer     and return the compressed data. This may degrade the     compression ratio.     When Compress is called with the parameter endOfData set     to True, the compression session is closed and all of the     remaining compressed data is returned. The next call to     Compress will create a new compression session.     The compressed array may have a Length greater than the     number of bytes returned by the call to Compress.</remarks>
            <param name="buffer">An array of bytes to compress. A maximum of count bytes are taken from this array and compressed.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="endOfData">Indicates if this call ends the stream of data to compress.</param>
            <param name="compressed">An array of bytes containing the compressed data. Can be empty.</param>
        </member>
        <member name="T:Xceed.Compression.Decompressor">
            <summary>An abstract class from which other classes can derive to implement custom decompression algorithms.</summary>
            <remarks>    This class (and its subclasses) will primarily be used by the     CompressedStream class.     A subclass must at least implement the abstract Int32@)     method.</remarks>
        </member>
        <member name="M:Xceed.Compression.Decompressor.Decompress(System.Byte[],System.Int32,System.Int32,System.Boolean@,System.Byte[]@,System.Int32@)">
            <summary>Decompresses an array of bytes.</summary>
            <returns>The number of bytes written to the decompressed parameter.</returns>
            <remarks>    When the first call to Decompress is made, a decompression     "session" is created. This session remains opened as long as     Decompress is called with the parameter endOfData set to False.     During a decompression session, the decompression engine     can choose to keep the data to decompress in an internal buffer     and return an empty array after a call to Decompress. This     could happen if not enough compressed data has yet been     provided to determine the decompressed result.     When Decompress is called with the parameter endOfData     set to True, the decompression session is closed and all of the     remaining decompressed data is returned. The next call to     Decompress will create a new decompression session.     The decompressed array may have a Length greater than the     number of bytes returned by the call to Decompress.</remarks>
            <param name="buffer">An array of bytes to decompress. A maximum of count bytes are taken from this array and decompressed.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to decompress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="endOfData">true if the end of the compressed data has been reached; false otherwise.</param>
            <param name="decompressed">An array of bytes containing the decompressed data. Can be empty if no bytes were decompressed.</param>
            <param name="remaining">The number of unused bytes read from buffer the for decompression.</param>
        </member>
        <member name="T:Xceed.Compression.Licenser">
            <summary>Class which is used to register the classes located in the Xceed.Compression namespace.</summary>
            <remarks>    We recommend you set the LicenseKey property in the main     entry point of the application. For example, the LicenseKey     property can be set, for C# users, in the static main function.     For VB.NET users, it can be set in the constructor of the main     form or in the "Sub Main" procedure. If no entry point is     available, it is recommended that the LicenseKey property be     set in a static constructor of a class that will be accessed     systematically before any of the library's classes are     instantiated or, you can simply set the LicenseKey property     immediately BEFORE you instantiate a class.</remarks>
        </member>
        <member name="P:Xceed.Compression.Licenser.LicenseKey">
            <summary>Gets or sets the license key used to license this product.</summary>
        </member>
        <member name="T:Xceed.Compression.LZMAOptions">
            <summary>Represents the options that can be used to fine-tune LZMA compression.</summary>
        </member>
        <member name="M:Xceed.Compression.LZMAOptions.#ctor">
            <summary>Initializes a new instance of the LZMAOptions class.</summary>
        </member>
        <member name="M:Xceed.Compression.LZMAOptions.#ctor">
            <summary>Initializes a new instance of the LZMAOptions class.</summary>
            <remarks>Sets the options to default values appropriate for most situations.</remarks>
        </member>
        <member name="M:Xceed.Compression.LZMAOptions.#ctor(Xceed.Compression.CompressionLevel)">
            <summary>Initializes a new instance of the LZMAOptions class using the provided compression level.</summary>
            <param name="level">Compression level to use.</param>
        </member>
        <member name="M:Xceed.Compression.LZMAOptions.SetTemplate(Xceed.Compression.CompressionLevel)">
            <summary>Sets the LZMAOptions properties to values appropriate to the passed level of compression.</summary>
            <remarks>    If CompressionLevel.Lowest is supplied, the dictionary     size will be 4k.     If CompressionLevel.Normal is supplied, the dictionary     size will be 16MB.     If CompressionLevel.Highest is supplied, the dictionary     size will be 32MB.</remarks>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.DictionarySize">
            <summary>Get or sets the dictionary size.</summary>
            <remarks>    The size must be between 1 byte and 1 GB.To     decompress data compressed with a dictionary size of D, you'll     need about D bytes of memory.</remarks>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.MatchFinder">
            <summary>Gets or sets the match finder algorithm to use.</summary>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.NumFastBytes">
            <summary>Gets or sets the number of fast bytes.</summary>
            <remarks>    The number must be between 5 and 273.Usually, a     big number gives a little bit better compression ratio at the     cost of a slower compression process.</remarks>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.NumLiteralContextBits">
            <summary>Gets or sets the number of literal context bits.</summary>
            <remarks>    The number must be between 0 and 8.Sometimes     setting this property to 4 provides a gain for large streams.</remarks>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.NumLiteralPositionBits">
            <summary>Gets or sets the number of literal position bits.</summary>
            <remarks>    The number must be between 0 and 4.     The number of literal position bits (N) is intended for     periodical data when the period is equal to 2^N. For example,     for 32-bit (4 bytes) periodical data you can use a value of 2.     Often it's better to set the literal context bits property to     0, if you change this property's default value.</remarks>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.NumPositionBits">
            <summary>Gets or sets the number of position bits.</summary>
            <remarks>    The number must be between 0 and 4.     The number of position bits (N) is intended for     periodical data when the period is equal to 2^N.</remarks>
        </member>
        <member name="P:Xceed.Compression.LZMAOptions.UseEndOfStreamMarker">
            <summary>Gets or sets whether an end-of-stream marker is written at the end of the compressed data.</summary>
            <remarks>Using the marker makes it possible for LZMA to detect the end of data automatically when decompressing, removing the need to know the size of the data, allowing true streaming to be achieved.</remarks>
        </member>
        <member name="T:Xceed.Compression.ManagedLZMACompressor">
            <summary>Implements the LZMA compression algorithm.</summary>
            <remarks>    This class is primarily used by the CompressedStream     class.</remarks>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.#ctor">
            <summary>Initializes a new instance of the ManagedLZMACompressor class.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.#ctor">
            <summary>Initializes a new instance of the ManagedLZMACompressor class.</summary>
            <remarks>    Sets the LZMA options to CompressionLevel.Normal and     writes a zip-compatible header.</remarks>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.#ctor(Xceed.Compression.CompressionLevel)">
            <summary>Initializes a new instance of the ManagedLZMACompressor class using the provided compression level.</summary>
            <param name="compressionLevel">CompressionLevel value indicating the compression level.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.#ctor(Xceed.Compression.CompressionLevel,Xceed.Compression.LZMAHeaderType)">
            <summary>Initializes a new instance of the ManagedLZMACompressor class using the provided compression level and header type.</summary>
            <param name="compressionLevel">CompressionLevel value indicating the compression level.</param>
            <param name="headerType">An LZMAHeaderType value that indicatest which header format will be used.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.#ctor(Xceed.Compression.LZMAOptions,Xceed.Compression.LZMAHeaderType)">
            <summary>Initializes a new instance of the ManagedLZMACompressor class using the provided options and header type.</summary>
            <param name="options">An LZMAOptions objecting representing the options to use.</param>
            <param name="headerType">An LZMAHeaderType value that indicatest which header format will be used.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.Compress(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Byte[]@)">
            <summary>Compresses an array of bytes.</summary>
            <returns>The number of bytes written to the compressed parameter.</returns>
            <remarks>    When the first call to Compress is made,     a compression "session" is created. This session remains opened     as long as Compress is called with the parameter     endOfData set to false.     During a compression session, the compression engine can     choose to keep the data to compress in an internal buffer and     return an empty array after a call to     Compress. Many compression algorithms do this     to get optimum compression by examining a certain     number of bytes before compressing anything.     A call to Compress with count     of zero tells the compression engine to flush its internal     buffer and return the compressed data. This may degrade the     compression ratio.     A call to Compress with an empty     buffer has no effect.     When Compress is called with the     parameter endOfData true, the     compression session is closed and all of the remaining     compressed data is returned. The next call to Compress will     create a new compression session.     The compressed array may have a Length greater     than the number of bytes returned by the call to     Compress.     If you're using your own format, you can use the      WriteLZMAProperties method to initialize the LZMA     engine.</remarks>
            <param name="buffer">An array of bytes to compress. A maximum of count bytes are taken from this array and compressed.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="endOfData">Indicates if this call ends the stream of data to compress.</param>
            <param name="compressed">An array of bytes containing the compressed data. Can be empty.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.Dispose">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.Dispose">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.Dispose(System.Boolean)">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.WriteLZMAProperties">
            <summary>Writes the LZMA coder properties to the specified stream.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.WriteLZMAProperties(System.IO.Stream)">
            <summary>Writes the LZMA coder properties to the specified stream.</summary>
            <remarks>    This is an advanced method and does not need to be called     in most cases. It is however useful if you want to use your own     file format header.     This method should be called before calling Compress     with data.</remarks>
            <param name="stream">A Stream object representing the output stream.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMACompressor.WriteLZMAProperties">
            <summary>Writes the LZMA coder properties to the specified byte array.</summary>
            <returns>A byte array containing the LZMA coder properties written by the method.</returns>
        </member>
        <member name="P:Xceed.Compression.ManagedLZMACompressor.HeaderType">
            <summary>Gets or sets the type of header the compressor will write before the compressed data.</summary>
            <remarks>Setting this property after  Compress has been called with data has no effect.</remarks>
        </member>
        <member name="T:Xceed.Compression.ManagedLZMADecompressor">
            <summary>Implements the LZMA decompression algorithm.</summary>
            <remarks>    This class is primarily used by the CompressedStream     class.</remarks>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.#ctor">
            <summary>Initializes a new instance of the ManagedLZMADecompressor class.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.#ctor">
            <summary>Initializes a new instance of the ManagedLZMADecompressor class.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.#ctor(System.Int64,System.Int64,Xceed.Compression.LZMAHeaderType)">
            <summary>Initializes a new instance of the ManagedLZMADecompressor class using the provided compressed and uncompressed sizes, and the header type.</summary>
            <param name="compressedSize">The length of the compressed data to decompress. Use -1 to specify decompressing until the end of the stream is reached. The default value is -1. This value is useful when the compressed data does no contain the LZMA end-of-stream marker.</param>
            <param name="uncompressedSize">The length of the uncompressed data to output. Use -1 to specify an unlimited size. The default value is -1.</param>
            <param name="headerType">The type of header to read before the compressed data starts. Only use None if you intend to make your own format. In that case the  SetLZMAProperties method will be useful. The default value is LZMAHeaderType.Properties.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.#ctor(Xceed.Compression.LZMAHeaderType)">
            <summary>Initializes a new instance of the ManagedLZMADecompressor class using the provided header type.</summary>
            <param name="headerType">The type of header to read before the compressed data starts. Only use None if you intend to make your own format. In that case the  SetLZMAProperties method will be useful. The default value is LZMAHeaderType.Properties.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.Decompress(System.Byte[],System.Int32,System.Int32,System.Boolean@,System.Byte[]@,System.Int32@)">
            <summary>Decompresses an array of bytes.</summary>
            <returns>The number of bytes written to the decompressed parameter.</returns>
            <remarks>    When the first call to Decompress is     made, a decompression "session" is created. This session     remains opened as long as Decompress is called with the     parameter endOfData set to     false.     During a decompression session, the decompression engine     can choose to keep the data to decompress in an internal buffer     and return an empty array after a call to     Decompress. This could happen if not enough     compressed data has yet been provided to determine the     decompressed result.     When Decompress is called with the     parameter endOfData set to true, the     decompression session is closed and all of the remaining     decompressed data is returned. The next call to Decompress will     create a new decompression session.     The decompressed array may have a Length greater     than the number of bytes returned by the call to     Decompress.     Calling the method with an empty buffer has no effect. If     you're using your own format, you can use the      SetLZMAProperties method to initialize the LZMA     engine.</remarks>
            <param name="buffer">An array of bytes to decompress. A maximum of count bytes are taken from this array and decompressed.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to decompress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="endOfData">true if the end of the compressed data has been reached; false otherwise.</param>
            <param name="decompressed">An array of bytes containing the decompressed data. Can be empty if no bytes were decompressed.</param>
            <param name="remaining">The number of unused bytes read from buffer the for decompression.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.Dispose">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.Dispose">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.Dispose(System.Boolean)">
            <summary>Provides correct cleanup of resources in the base class and its derived classes.</summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Compression.ManagedLZMADecompressor.SetLZMAProperties(System.Byte[])">
            <summary>Initializes an LZMA engine for decompression using the specified encoded properties.</summary>
            <remarks>It is only necessary to call this method if you're using your own format.</remarks>
            <param name="properties">A byte array representing the LZMA engine properties in the format specified by LZMA v4.65. It is the data that is generated by  WriteLZMAProperties. Cannot be null.</param>
        </member>
        <member name="P:Xceed.Compression.ManagedLZMADecompressor.CompressedSize">
            <summary>Gets or sets the length of the compressed data to decompress.</summary>
            <remarks>    Use -1 to specify decompressing until the end of the     stream is reached. This value is useful when the compressed     data does no contain the LZMA end-of-stream marker.     Setting this property after Decompress     has been called with data has no effect.</remarks>
        </member>
        <member name="P:Xceed.Compression.ManagedLZMADecompressor.HeaderType">
            <summary>Gets or sets the type of header the decompressor will read before the compressed data starts.</summary>
            <remarks>Setting this property after  Decompress has been called with data has no effect.</remarks>
        </member>
        <member name="P:Xceed.Compression.ManagedLZMADecompressor.UncompressedSize">
            <summary>Gets or sets the length of the uncompressed data to output.</summary>
            <remarks>    Use -1 to specify an unlimited size.     Setting this property after Decompress     has been called with data has no effect.</remarks>
        </member>
        <member name="T:Xceed.Compression.QuickCompression">
            <summary>Exposes static methods that allow basic byte array compression and decompression operations.</summary>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress">
            <summary>Compresses an array of bytes.</summary>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress(System.Byte[])">
            <summary>Compresses an array of bytes.</summary>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks>    The byte array will be compressed using the Deflated     compression method and the Highest compression level.     If the data to compress is not a byte array, it will need     to be converted into a byte array before it can be compressed.     This can be done, in the case of a string, using the Char[])     method of the Encoding class.</remarks>
            <param name="buffer">The array of bytes to compress.</param>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress(System.Byte[],Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>Compresses an array of bytes using the specified compression method and level.</summary>
            <returns>An array of bytes containing the compressed data.</returns>
            <remarks>    If the data to compress is not a byte array, it will need     to be converted into a byte array before it can be compressed.     This can be done, in the case of a string, using the Char[])     method of the Encoding class.     The BZip, BWT, and PPMd compression methods are not     supported. The compression     level only applies to the Deflated and Deflated64 compression     methods.     The PPMd algorithm uses a custom memory management system     called SubAllocator. In a zip file, the memory size the     SubAllocator uses is defined in the WinZip PPMd header for the     compressed file and this header's value is used when     decompressing the data. In general, WinZip uses 64Mb. Since the     algorithm used was not optimized from the original PPMd version     I revision 1, the SubAllocator initially requires the total     amount of memory specified in the PPMd compressor. This means     you must have at least 64 free Mb of RAM when using this     compression method.</remarks>
            <param name="buffer">The array of bytes to compress.</param>
            <param name="method">A CompressionMethod value representing the compression method to use.</param>
            <param name="level">A CompressionLevel value representing the compression level to use.</param>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Compress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod,Xceed.Compression.CompressionLevel)">
            <summary>Compresses an array of bytes specifying the amount of bytes to compress as well as the compression method and level.</summary>
            <returns>An array of bytes containing the compressed data. Can be empty.</returns>
            <remarks>    If the data to compress is not a byte array, it will need     to be converted into a byte array before it can be compressed.     This can be done, in the case of a string, using the Char[])     method of the Encoding class.     The BZip, BWT, and PPMd compression methods are not     supported. The compression     level only applies to the Deflated and Deflated64 compression     methods.     The PPMd algorithm uses a custom memory management system     called SubAllocator. In a zip file, the memory size the     SubAllocator uses is defined in the WinZip PPMd header for the     compressed file and this header's value is used when     decompressing the data. In general, WinZip uses 64Mb. Since the     algorithm used was not optimized from the original PPMd version     I revision 1, the SubAllocator initially requires the total     amount of memory specified in the PPMd compressor. This means     you must have at least 64 free Mb of RAM when using this     compression method.</remarks>
            <param name="buffer">The array of bytes to compress. A maximum of count bytes are taken from this array and compressed</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="method">A CompressionMethod value representing the compression method to use.</param>
            <param name="level">A CompressionLevel value representing the compression level to use.</param>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress">
            <summary>Decompresses an array of bytes compressed using the Deflated compression method.</summary>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[])">
            <summary>Decompresses an array of bytes compressed using the Deflated compression method.</summary>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks>    If the original data contained within the decompressed     byte array was a string, then it is possible to retrieve the     string using the Char[]) method of the Encoding class.</remarks>
            <param name="buffer">An array of bytes to decompress.</param>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[],Xceed.Compression.CompressionMethod)">
            <summary>Decompresses an array of compressed bytes specifying the compression method that was used to compress the byte array.</summary>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks>    If the original data contained within the decompressed     byte array was a string, then it is possible to retrieve the     string using the Char[]) method of the Encoding class.     The BZip, BWT, and PPMd compression methods are not     supported.</remarks>
            <param name="buffer">An array of bytes to decompress.</param>
            <param name="method">A CompressionMethod value representing the compression method that was used to compress the byte array.</param>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod)">
            <summary>Decompresses a compressed byte array specifying the amount of bytes to decompress as well as the compression method that was used to compress the byte array.</summary>
            <returns>An array of bytes containing the decompressed data.</returns>
            <remarks>    If the original data contained within the decompressed     byte array was a string, then it is possible to retrieve the     string using the Char[]) method of the Encoding class.     The BZip, BWT, and PPMd compression methods are not     supported.</remarks>
            <param name="buffer">An array of bytes to decompress.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="method">A CompressionMethod value representing the compression method that was used to compress the byte array.</param>
        </member>
        <member name="M:Xceed.Compression.QuickCompression.Decompress(System.Byte[],System.Int32,System.Int32,Xceed.Compression.CompressionMethod,System.Boolean)">
            <summary>Decompresses a compressed byte array specifying the amount of bytes to decompress as well as the compression method that was used to compress the byte array.</summary>
            <remarks>The BZip, BWT, and PPMd compression methods are not supported.</remarks>
            <param name="buffer">An array of bytes to decompress.</param>
            <param name="offset">The byte offset in buffer at which to begin taking the data to compress.</param>
            <param name="count">The maximum number of bytes to be taken from buffer.</param>
            <param name="method">A CompressionMethod value representing the compression method that was used to compress the byte array.</param>
            <param name="enforceFormatIntegrity">A boolean value indicating whether the format's integrity should be enforced.</param>
        </member>
    </members>
</doc>
