<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Xceed.FileSystem</name>
    </assembly>
    <members>
        <member name="N:Xceed.FileSystem">
            <summary>The Xceed.FileSystem namespace defines various classes which provide generic implementations for handling files and folders.</summary>
        </member>
        <member name="T:Xceed.FileSystem.IBatchUpdateable">
            <summary>Allows a AbstractFolder object to optimize its updates, by modifying its underlying physical store only once.</summary>
            <remarks>    This interface is usually implemented by a root     folder.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate">
            <summary>Prevents a AbstractFolder object from modifying its underlying physical store until the EndUpdate method is called.</summary>
            <remarks>    A call to BeginUpdate must be     accompanied by a subsequent call to EndUpdate, or     desynchronization can occur. One mean of making sure that both     calls stay synchronized is to use a finally     block:                try  {   i.BeginUpdate();   // Do some modifications to the folder } finally  {   i.EndUpdate(); }                    In C#, the preferred way is to use the         AutoBatchUpdate class in a using         statement.     </remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Prevents a AbstractFolder object from modifying its underlying physical store until the EndUpdate method is called and raises events during the process.</summary>
            <remarks>    A call to BeingUpdate must be     accompanied by a subsequent call to EndUpdate, or     desynchronization can occur. One mean of making sure that both     calls stay synchronized is to use a finally     block:                try  {   i.BeginUpdate();   // Do some modifications to the folder } finally  {   i.EndUpdate(); }                    In C#, the preferred way is to use the         AutoBatchUpdate class in a using         statement.     </remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate">
            <summary>Informs a AbstractFolder object to apply to its underlying physical store all the modifications that have been made since the call to BeginUpdate.</summary>
            <remarks>    A call to EndUpdate must be preceded by     a call to BeginUpdate, or desynchronization can occur. One mean     of making sure that both calls stay synchronized is to use a     finally block:                try  {   i.BeginUpdate();   // Do some modifications to the folder } finally  {   i.EndUpdate(); }                    In C#, the preferred way is to use the         AutoBatchUpdate class in a using         statement.     </remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Informs a AbstractFolder object to apply to its underlying physical store all the modifications that have been made since the call to BeginUpdate and raises events during the process.</summary>
            <remarks>    A call to EndUpdate must be     preceded by a call to BeginUpdate, or desynchronization can     occur. One mean of making sure that both calls stay     synchronized is to use a finally block:                try  {   i.BeginUpdate();   // Do some modifications to the folder } finally  {   i.EndUpdate(); }                    In C#, the preferred way is to use the         AutoBatchUpdate class in a using         statement.     </remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="T:Xceed.FileSystem.DateTimeFilter+ApplicableDateTime">
            <summary>Specifies which type of date/time will be filtered by a DateTimeFilter class.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter+ApplicableDateTime.Creation">
            <summary>The filter will apply only to the creation date/time.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter+ApplicableDateTime.LastWrite">
            <summary>The filter will apply only to the last modified date/time.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter+ApplicableDateTime.LastAccess">
            <summary>The filter will apply only to the last accessed date/time.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter+ApplicableDateTime.All">
            <summary>The filter will apply to all date/times.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FilterResult">
            <summary>Indicates if an item was accepted or rejected by a Filter, or if the FilterScope does not apply to the specified FileSystemItem.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterResult.Reject">
            <summary>The item was rejected by the filter.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterResult.Accept">
            <summary>The item was accepted by the filter.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterResult.NotApplicable">
            <summary>The filter's scope does not apply to this item type or the specified FilterScope.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FilterScope">
            <summary>Specifies which type of FileSystemItem will be filtered by a Filter object.</summary>
            <remarks>    The File and Folder values determine what items are     included or excluded, but do not prevent recursing into     subfolders even though that folder would be excluded by the     filter. To prevent recursing into a subfolder, use the Recurse     value with the applicable filter.</remarks>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.File">
            <summary>The filter will be applied to any AbstractFile object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.Folder">
            <summary>The filter will be applied to any AbstractFolder object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.All">
            <summary>The filter will be applied to all types of FileSystemItem objects.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.Recurse">
            <summary>The filter only applies to subfolder AbstractFolder objects when the recursive parameter of the applicable methods is set to true.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionAction">
            <summary>Value representing the action to take when an exception is thrown during the processing of a FileSystemItem object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Abort">
            <summary>The entire process will be aborted and the exception will be thrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Retry">
            <summary>Retry processing the item. A corrective action must be taken otherwise the same exception will be rethrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Ignore">
            <summary>Ignore the item that caused the error and continue processing the other items.</summary>
        </member>
        <member name="T:Xceed.FileSystem.AbstractFile">
            <summary>Represents a generic file and exposes properties and methods that allow file-oriented operations to be performed.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>Builds a list of FileSystemItem objects to process.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. For example, the desination folder for a folder that will be copied.</param>
            <param name="forward">true if folders will be added to the list of FileSystemItem objects to process first; false if files will be added to the list first.</param>
            <param name="recursive">true if items in subfolders should be added to the list of items to process; false otherwise.</param>
            <param name="includeFolders">true if folders will be included in the list of items to process; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the list of FileSystemItem objects to process.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo">
            <summary>Copies the file's data to another file.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo(Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>Copies the file's data to another file.</summary>
            <returns>A reference to a FileSystemItem object that represents the destination file.</returns>
            <remarks>    This method only copies the data of a file to     another file.     If the file specified by destinationFile does not exist,     it is created. If it does exist, an exception is thrown if     replaceIfExists is false, or it is overwritten if     replaceIfExists is true.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <param name="destinationFile">An AbstractFile object that represents the file to which the current file's data must be copied. Cannot be $$NULL$$.</param>
            <param name="replaceIfExists">true if the destination file should be replaced if it exists; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>Copies the file's data to another file, and raises events during the process.</summary>
            <returns>A reference to a FileSystemItem object that represents the destination file.</returns>
            <remarks>    This method only copies the data of a file to     another file.     If the file specified by destinationFile does not exist,     it is created. If it does exist, an exception is thrown if     replaceIfExists is false, or it is overwritten if     replaceIfExists is true.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="destinationFile">An AbstractFile object that represents the file to which the current file's data must be copied. Cannot be $$NULL$$.</param>
            <param name="replaceIfExists">true if the destination file should be replaced if it exists; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite">
            <summary>Creates a file and opens it for writing.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite">
            <summary>Creates a file and opens it for writing.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The file will be opened with None shared access.     If the file exists, an ItemAlreadyExistsException will be     thrown. To retrieve a stream on a file that already exists,     Boolean) should be used.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite(System.IO.FileShare)">
            <summary>Creates a file and opens it for writing using the specified file sharing mode.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The parameter allows you to control how the file is     shared by different processes. Some specializations of the     AbstractFile class may not support any or all of the values     defined in this enumeration. In this case, an exception is     thrown.     If the file exists, an ItemAlreadyExistsException will be     thrown. To retrieve a stream on a file that already exists,     Boolean) should be used.</remarks>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Creates a file and opens it for writing.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The file will be opened with None shared access.     If the file exists, an ItemAlreadyExistsException will be     thrown. To retrieve a stream on a file that already exists,     Boolean) should be used.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare)">
            <summary>Creates a file and opens it for writing using the specified file sharing mode and raises events during the process.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The parameter allows you to control how the file is     shared by different processes. Some specializations of the     AbstractFile class may not support any or all of the values     defined in this enumeration. In this case, an exception is     thrown.     If the file exists, an ItemAlreadyExistsException will be     thrown. To retrieve a stream on a file that already exists,     Boolean) should be used.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>Copies the file into the destination.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An FileSystemItem object into which the file will be copied. Cannot be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoCreateWrite(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Creates the file and opens it for writing.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream should be guaranteed to be writable,     but does not have to be seekable.     The share parameter should allow control over how the     file is shared by different processes. If the values defined in     this enumeration are not supported, an exception should be     thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Opens the file for reading.</summary>
            <remarks>    The returned stream should be guaranteed to be readable,     but does not have to be seekable.     The share parameter should allow control over how the     file is shared by different processes. If the values defined in     this enumeration are not supported, an exception should     thrown.</remarks>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing.</summary>
            <remarks>    The returned stream should be guaranteed to be writable,     but does not have to be seekable.     The share parameter should allow control over how the     file is shared by different processes. If the values defined in     this enumeration are not supported, an exception should be     thrown.     If the File implementation does not support appending or     overwriting, an exception should be thrown.     If there is no existing data, the parameter overwrite     should be ignored.</remarks>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite">true if existing data for the file should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo">
            <summary>Moves the contents of the AbstractFile object to the target AbstractFile object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo(Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>Moves the contents of the AbstractFile object to the target AbstractFile object.</summary>
            <remarks>    If the physical file specified by destinationFile does     not exist, it is created.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <returns>A FileSystemItem object that represents the newly moved item.</returns>
            <param name="destinationFile">An AbstractFile object into which the contents of the item will be moved. Cannot be $$NULL$$.</param>
            <param name="replaceIfExists">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>Moves the contents of the AbstractFile object to the target AbstractFile object and raises events during the process.</summary>
            <remarks>    If the physical file specified by destinationFile does     not exist, it is created.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <returns>A FileSystemItem object that represents the newly moved item.</returns>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="destinationFile">An AbstractFile object into which the contents of the item will be moved. Cannot be $$NULL$$.</param>
            <param name="replaceIfExists">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead">
            <summary>Opens the file for reading.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead">
            <summary>Opens the file for reading.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The file will be opened with Read shared access.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(System.IO.FileShare)">
            <summary>Opens the file for reading with the specified file sharing mode.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The file will be opened with Read shared access.     The share parameter allows you to control how the file is     shared by different processes. Some specializations of the     AbstractFile class may not support any or all of the values     defined in this enumeration. In this case, an exception is     thrown.</remarks>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Opens the file for reading and raises events during the process.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The file will be opened with Read shared access.     The returned stream is guaranteed to be readable, but may     or may not be seekable.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare)">
            <summary>Opens the file for reading with the specified file sharing mode and raises events during the process.</summary>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes. Some specializations of the     AbstractFile class may not support any or all of the values     defined in this enumeration. In this case, an exception is     thrown.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite">
            <summary>Opens the file for writing.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(System.Boolean)">
            <summary>Opens the file for writing.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The file will be opened with None shared access.     If the file does not exist, the CreateWrite method should     be used to retrieve the stream rather than OpenWrite.</remarks>
            <param name="overwrite">true if existing data for the item should be replaced; false if existing data should be preserved, appending new data at the end.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing with the specified file sharing mode.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes. Some specializations of the     AbstractFile class may not support any or all of the values     defined in this enumeration. In this case, an exception is     thrown.     Some File implementations may not support appending or     overwriting. In this case, an exception is thrown.     If there is no existing data, the parameter overwrite is     ignored.     If the file does not exist, the CreateWrite method should     be used to retrieve the stream rather than OpenWrite.</remarks>
            <param name="overwrite">true if existing data for the item should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean)">
            <summary>Opens the file for writing and raises events during the process.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The file will be opened with None shared access.     If the file does not exist, the CreateWrite method should     be used to retrieve the stream rather than OpenWrite.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="overwrite">true if existing data for the item should be replaced; false if existing data should be preserved, appending new data at the end.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing with the specified file sharing mode and raises events during the process.</summary>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes. Some specializations of the     AbstractFile class may not support any or all of the values     defined in this enumeration. In this case, an exception is     thrown.     Some File implementations may not support appending or     overwriting. In this case, an exception is thrown.     If there is no existing data, the parameter overwrite is     ignored.     If the file does not exist, the CreateWrite method should     be used to retrieve the stream rather than OpenWrite.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="overwrite">true if existing data for the item should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFile.DoSize">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 should be returned.     If the file does not physically exist, an exception     should be thrown.Refresh should be called before     accessing this property, or the information returned could be     outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFile.Size">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 is returned.     If the file does not physically exist, an exception is     thrown.Refresh should be called before accessing this     property, or the information returned could be outdated.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.AbstractFolder">
            <summary>Represents a generic folder, and exposes properties and methods that allow folder-oriented operations to be performed.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>Builds a list of FileSystemItem objects to process.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. For example, the desination folder for a folder that will be copied.</param>
            <param name="forward">true if folders will be added to the list of FileSystemItem objects to process first; false if files will be added to the list first.</param>
            <param name="recursive">true if items in subfolders should be added to the list of items to process; false otherwise.</param>
            <param name="includeFolders">true if folders will be included in the list of items to process; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the list of FileSystemItem objects to process.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo">
            <summary>Copies the folder's content to another folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo(Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>Copies the folder's content to another folder.</summary>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     The folder's content (files and subfolders) that matches     the provided filters is immediately copied to the     destination.     When replacingExistingFiles is true, any file in the     destination that has the same name as a file being copied is     automatically replaced.     When replacingExistingFiles is false, an exception is     thrown whenever the destination contains a file with the same     name as a file being copied.     To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                FileSystemItem) is called on the destination items;     therefore, the attributes and dates of the original items are     applied to the destination items.</remarks>
            <param name="destinationFolder">An AbstractFolder object into which the folder's content must be copied. Cannot be $$NULL$$.</param>
            <param name="recursive">true if the content of the folders contained in the subfolders should be copied; false if only the current folder's content should be copied.</param>
            <param name="replaceExistingFiles">true if existing files in the destination should be replaced; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be copied.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>Copies the folder's content to another folder, and raises events during the process.</summary>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     The folder's content (files and subfolders) that matches     the provided filters is immediately copied to the     destination.     When replacingExistingFiles is true, any file in the     destination that has the same name as a file being copied is     automatically replaced.     When replacingExistingFiles is false, an exception is     thrown whenever the destination contains a file with the same     name as a file being copied.     To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                FileSystemItem) is called on the destination items;     therefore, the attributes and dates of the original items are     applied to the destination items.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="destinationFolder">An AbstractFolder object into which the folder's content must be copied. Cannot be $$NULL$$.</param>
            <param name="recursive">true if the content of the folders contained in the subfolders should be copied; false if only the current folder's content should be copied.</param>
            <param name="replaceExistingFiles">true if existing files in the destination should be replaced; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be copied.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile">
            <summary>Creates a new file in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile(System.String,System.Boolean)">
            <summary>Creates a new file in the folder.</summary>
            <returns>An AbstractFile object representing the newly created file.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/file.txt", "../file.txt", etc.     If a file named relativeName already exist in the     destination folder and replaceIfExists is false, an exception     is thrown. If replaceIfExists is true, the existing file is     replaced by the newly created one.     If the physical folder in which the new file is to be     created does not exist, it is created.     The current property values (such as Attributes) are     applied to the newly created file.</remarks>
            <param name="relativeName">Relative name of the new file.</param>
            <param name="replaceIfExists">true if the new file should replace an existing file; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile(Xceed.FileSystem.FileSystemEvents,System.Object,System.String,System.Boolean)">
            <summary>Creates a new file in the folder and raises events during the process.</summary>
            <returns>An AbstractFile object representing the newly created file.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/file.txt", "../file.txt", etc.     If a file named relativeName already exist in the     destination folder and replaceIfExists is false, an exception     is thrown. If replaceIfExists is true, the existing file is     replaced by the newly created one.     If the physical folder in which the new file is to be     created does not exist, it is created.     The current property values (such as Attributes) are     applied to the newly created file.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the new file.</param>
            <param name="replaceIfExists">true if the new file should replace an existing file; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder">
            <summary>Creates a new folder in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder(System.String)">
            <summary>Creates a new folder in the folder.</summary>
            <returns>An AbstractFolder object representing the newly created folder.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/subFolder", "../folder", etc.     If a folder named relativeName already exist, this method     does nothing.     If the physical folder in which the new folder is to be     created does not exist, it is created.     The current property values (such as Attributes) are     applied to the newly created folder.</remarks>
            <param name="relativeName">Relative name of the new folder.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>Creates a new folder in the folder and raises events during the process.</summary>
            <returns>An AbstractFolder object representing the newly created folder.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/subFolder", "../folder", etc.     If a folder named relativeName already exist, this method     does nothing.     If the physical folder in which the new folder is to be     created does not exist, it is created.     The current property values (such as Attributes) are     applied to the newly created folder.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the new file.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateTempFile">
            <summary>Creates the temporary file.</summary>
            <returns>A reference to an AbstractFile object representing the temporary file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>Copies the folder to another folder.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An FileSystemItem object into which the folder will be copied. Cannot be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Retrieves an array of FileSystemItem objects.</summary>
            <returns>An array of FileSystemItem objects representing the items ( files and folders ) contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFile object.</summary>
            <remarks>    fileName should not end with a     DirectorySeparatorChar.</remarks>
            <returns>Should return a reference to an AbstractFile object regardless if the file represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFiles(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>Retrieves an array of AbstractFile objects.</summary>
            <returns>An array of AbstractFile objects representing the files contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="recursive">true if items in subfolders should be processed; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the list of FileSystemItem objects to process.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFolder object.</summary>
            <remarks>    folderName should not end with a     DirectorySeparatorChar.</remarks>
            <returns>Should return reference to an AbstractFolder object regardless if the folder represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFolders(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>Retrieves an array of AbstractFolder objects.</summary>
            <returns>An array of AbstractFolder objects representing the folders contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="recursive">true if items in subfolders should be processed; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the list of FileSystemItem objects to process.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetItems(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>Retrieves an array of FileSystemItem objects.</summary>
            <returns>An array of FileSystemItem objects representing the files and folders contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="recursive">true if items in subfolders should be processed; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile">
            <summary>Returns an AbstractFile object that represents a file contained in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile(System.String)">
            <summary>Returns an AbstractFile object that represents a file contained in the folder.</summary>
            <returns>An AbstractFile object representing the file named relativeName.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/file.txt", "../file.txt", etc.     This method allows to get a reference to an AbstractFile     object for a file that exists, as well as for a file that does     not exist. Further, the folder on which this method is called     may not exist.</remarks>
            <param name="relativeName">Relative name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>Returns an AbstractFile object that represents a file contained in the folder and raises events during the process.</summary>
            <returns>An AbstractFile object representing the file named relativeName.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/file.txt", "../file.txt", etc.     This method allows to get a reference to an AbstractFile     object for a file that exists, as well as for a file that does     not exist. Further, the folder on which this method is called     may not exist.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles">
            <summary>Returns a filtered list of files contained in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles(System.Boolean,System.Object[])">
            <summary>Returns a filtered list of files contained in the folder.</summary>
            <returns>An array of AbstractFile objects representing the files that match the specified filters.</returns>
            <remarks>    To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is. By default, an AndFilter is                 used.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                For more detailed information on how to use filters,     please refer to the Using filters topic.</remarks>
            <param name="recursive">true if files contained in the subfolders should be returned; false if only files that are immediate children of the folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of files returned.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.Object[])">
            <summary>Returns a filtered list of files contained in the folder, and raises events during the process.</summary>
            <returns>An array of AbstractFile objects representing the files that match the specified filters.</returns>
            <remarks>    To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is. By default, an AndFilter is                 used.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                For more detailed information on how to use filters,     please refer to the Using filters topic.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="recursive">true if files contained in the subfolders should be returned; false if only files that are immediate children of the folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of files returned.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder">
            <summary>Returns an AbstractFolder object that represents a folder contained in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder(System.String)">
            <summary>Returns an AbstractFolder object that represents a folder contained in the folder.</summary>
            <returns>An AbstractFolder object representing the folder named relativeName.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/subFolder", "../folder", etc.     This method allows to get a reference to an     AbstractFolder object for a folder that exists, as well as for     a folder that does not exist. Further, the folder on which this     method is called may not exist.</remarks>
            <param name="relativeName">Relative name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>Returns an AbstractFolder object that represents a folder contained in the folder and raises events during the process.</summary>
            <returns>An AbstractFolder object representing the folder named relativeName.</returns>
            <remarks>    The relativeName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/subFolder", "../folder", etc.     This method allows to get a reference to an     AbstractFolder object for a folder that exists, as well as for     a folder that does not exist. Further, the folder on which this     method is called may not exist.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders">
            <summary>Returns a filtered list of folders contained in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders(System.Boolean,System.Object[])">
            <summary>Returns a filtered list of folders contained in the folder.</summary>
            <returns>An array of AbstractFolder objects representing the folders that match the specified filters.</returns>
            <remarks>    To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                Note that when passing a string, for example "folder", as     the folder to retrieve in the filters parameter, a NameFilter     class will be created around the string. By default, the     FilterScope of the NameFilter class is File.     This means that only files will be filter and all     folders will be returned.     In order to filter folders, a NameFilter class needs to     be constructed around the string and the FilterScope must be     set to Folder. For example:                GetFolders( true, new NameFilter( "folder", FilterScope.Folder ) );                </remarks>
            <param name="recursive">true if folders contained in the subfolders should be returned; false if only folders that are immediate children of the folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of folders returned.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.Object[])">
            <summary>Returns a filtered list of folders contained in the folder, and raises events during the process.</summary>
            <returns>An array of AbstractFolder objects representing the folders that match the specified filters.</returns>
            <remarks>    To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                Note that when passing a string, for example "folder", as     the folder to retrieve in the filters parameter, a NameFilter     class will be created around the string. By default, the     FilterScope of the NameFilter class is File.     This means that only files will be filter and all     folders will be returned.     In order to filter folders, a NameFilter class needs to     be constructed around the string and the FilterScope must be     set to Folder. For example:                GetFolders( true, new NameFilter( "folder", FilterScope.Folder ) );                </remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="recursive">true if folders contained in the subfolders should be returned; false if only folders that are immediate children of the folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of folders returned.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems">
            <summary>Returns a list of items contained in the folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems(System.Boolean)">
            <summary>Returns a list of items contained in the folder.</summary>
            <returns>An array of FileSystemItem objects representing the items contained in the folder.</returns>
            <param name="recursive">true if items contained in the subfolders should be returned; false if only items that are immediate children of the folder should be returned.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean)">
            <summary>Returns a list of items contained in the folder, and raises events during the process.</summary>
            <returns>An array of FileSystemItem objects representing the items contained in the folder.</returns>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="recursive">true if items contained in the subfolders should be returned; false if only items that are immediate children of the folder should be returned.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo">
            <summary>Moves the folder's content to another folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo(Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>Moves the folder's content to another folder.</summary>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     The folder's content (files and subfolders) that matches     the provided filters is immediately moved to the     destination.     When replacingExistingFiles is true, any file in the     destination that has the same name as a file being moved is     automatically replaced.     When replacingExistingFiles is false, an exception is     thrown whenever the destination contains a file with the same     name as a file being moved.     To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                FileSystemItem) is called on the destination items;     therefore, the attributes and dates of the original items are     applied to the destination items.</remarks>
            <param name="destinationFolder">An AbstractFolder object into which the folder's content must be moved. Cannot be $$NULL$$.</param>
            <param name="recursive">true if the content of the folders contained in the subfolders should be moved; false if only the current folder's content should be moved.</param>
            <param name="replaceExistingFiles">true if existing files in the destination should be replaced; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be moved.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>Moves the folder's content to another folder, and raises events during the process.</summary>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     The folder's content (files and subfolders) that matches     the provided filters is immediately moved to the     destination.     When replacingExistingFiles is true, any file in the     destination that has the same name as a file being moved is     automatically replaced.     When replacingExistingFiles is false, an exception is     thrown whenever the destination contains a file with the same     name as a file being moved.     To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                                FileSystemItem) is called on the destination items;     therefore, the attributes and dates of the original items are     applied to the destination items.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="destinationFolder">An AbstractFolder object into which the folder's content must be moved. Cannot be $$NULL$$.</param>
            <param name="recursive">true if the content of the folders contained in the subfolders should be moved; false if only the current folder's content should be moved.</param>
            <param name="replaceExistingFiles">true if existing files in the destination should be replaced; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be moved.</param>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFolder.DoIsRoot">
            <summary>Gets a boolean value indicating if the folder is a root folder.</summary>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFolder.IsRoot">
            <summary>Gets a value indicating if the folder is a root folder.</summary>
            <remarks>    See RootFolder for more information about root     folders.</remarks>
        </member>
        <member name="F:Xceed.FileSystem.AbstractFolder.m_isRoot">
            <summary>Identifies if this folder is a root folder.</summary>
            <remarks>    Notes to inheritors: The constructors of derived     classes should set this field to true if they represent the     root folder.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.AndFilter">
            <summary>Performs a logical AND operation on a set of Filter objects.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AndFilter.#ctor(System.Object[])">
            <summary>Initializes a new instance of the AndFilter class.</summary>
            <param name="filters">Filters that are part of the logical AND operation.</param>
        </member>
        <member name="M:Xceed.FileSystem.AndFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches all of the filters.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AndFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches all of the filters.</summary>
            <returns>true if item matches all of the filters; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.AndFilter.Filters">
            <summary>Gets an array of Filter objects that are part of the logical AND operation.</summary>
        </member>
        <member name="P:Xceed.FileSystem.AndFilter.Scope">
            <summary>Gets or sets the scope of the inner filter.</summary>
        </member>
        <member name="T:Xceed.FileSystem.AttributeFilter">
            <summary>Filters a FileSystemItem object based on its attributes.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.#ctor">
            <summary>Initializes a new instance of the AttributeFilter class.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.#ctor(System.IO.FileAttributes)">
            <summary>Initializes a new instance of the AttributeFilter class.</summary>
            <param name="attributes">FileAttributes fields that represent the attributes used to filter files and folders.</param>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.#ctor(System.IO.FileAttributes,Xceed.FileSystem.FilterScope)">
            <summary>Initializes a new instance of the AttributeFilter class.</summary>
            <param name="attributes">FileAttributes fields that represent the attributes used to filter files and folders.</param>
            <param name="scope">Determines whether the filter applies to files, folders or both.</param>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches at least one of the file attributes.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches at least one of the file attributes.</summary>
            <returns>true if item matches at least one of the file attributes; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.AttributeFilter.Attributes">
            <summary>Gets the file attributes used to filter files and folders.</summary>
        </member>
        <member name="T:Xceed.FileSystem.AutoBatchUpdate">
            <summary>Class that verifies if the object implements the IBatchUpdateable interface.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor">
            <summary>Verifies if the object implements the IBatchUpdateable interface.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor(System.Object)">
            <summary>Verifies if the object implements the IBatchUpdateable interface.</summary>
            <remarks>    The AutoBatchUpdate class will verify if     batchUpdateable implements the IBatchUpdateable interface and     will automatically call the BeginUpdate and     EndUpdate methods if it does. If     batchUpdateable does not implement the IBatchUpdateable     interface, the code will be executed normally.</remarks>
            <param name="batchUpdateable">object that may or may not implement the IBatchUpdateable interface.</param>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor(System.Object,Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Verifies if the object implements the IBatchUpdateable interface and raises events during the process.</summary>
            <remarks>    The AutoBatchUpdate class will verify if     batchUpdateable implements the IBatchUpdateable interface and     will automatically call the BeginUpdate and     EndUpdate methods if it does. If     batchUpdateable does not implement the IBatchUpdateable     interface, the code will be executed normally.</remarks>
            <param name="batchUpdateable">Object that may or may not implement the IBatchUpdateable interface.</param>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="T:Xceed.FileSystem.ByteProgressionEventArgs">
            <summary>Provides byte progression information.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ByteProgressionEventArgs.#ctor(Xceed.FileSystem.ProgressionInfo,Xceed.FileSystem.ProgressionInfo)">
            <summary>Initializes a new instance of the ByteProgressionEventArgs argument class.</summary>
            <param name="currentFileBytes">The size, in bytes, of the file currently being processed.</param>
            <param name="allFilesBytes">The total combined size, in bytes, of all files being processed.</param>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.AllFilesBytes">
            <summary>Gets the total combined size, in bytes, of all files being processed.</summary>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.CurrentFileBytes">
            <summary>Gets the size, in bytes, of the file currently being processed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_allFilesBytes">
            <summary>An instance of the ProgressionInfo class representing the byte count information in regards to all the items to be processed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_currentFileBytes">
            <summary>An instance of the ProgressionInfo class representing the byte count information in regards to the current item being processed.</summary>
        </member>
        <member name="T:Xceed.FileSystem.DateTimeFilter">
            <summary>Filters a FileSystemItem object based on its date and time.</summary>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor">
            <summary>Initializes a new instance of the DateTimeFilter class.</summary>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime)">
            <summary>Initializes a new instance of the DateTimeFilter class.</summary>
            <remarks>The filter will apply only to files.</remarks>
            <param name="minValue">A DateTime field that represents the minimum date and time of the filter.</param>
            <param name="maxValue">A DateTime field that represents the maximum date and time of the filter.</param>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime,Xceed.FileSystem.DateTimeFilter+ApplicableDateTime)">
            <summary>Initializes a new instance of the DateTimeFilter class, specifying to which type of date/time the filter applies.</summary>
            <remarks>The filter will apply only to files.</remarks>
            <param name="minValue">A DateTime field that represents the minimum date and time of the filter.</param>
            <param name="maxValue">A DateTime field that represents the maximum date and time of the filter.</param>
            <param name="applicableDateTimes">Determines to which type of date/time the filter applies.</param>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime,Xceed.FileSystem.DateTimeFilter+ApplicableDateTime,Xceed.FileSystem.FilterScope)">
            <summary>Initializes a new instance of the DateTimeFilter class, specifying to which type of date/time and FileSystemItem object the filter applies.</summary>
            <param name="minValue">A DateTime field that represents the minimum date and time of the filter.</param>
            <param name="maxValue">A DateTime field that represents the maximum date and time of the filter.</param>
            <param name="applicableDateTimes">Determines to which type of date/time the filter applies.</param>
            <param name="scope">Determines whether the filter applies to files, folders or both.</param>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime,Xceed.FileSystem.FilterScope)">
            <summary>Initializes a new instance of the DateTimeFilter class, specifying to which type of FileSystemItem object the filter applies.</summary>
            <param name="minValue">A DateTime field that represents the minimum date and time of the filter.</param>
            <param name="maxValue">A DateTime field that represents the maximum date and time of the filter.</param>
            <param name="scope">Determines whether the filter applies to files, folders or both.</param>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches the date/time filter.</summary>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches the date/time filter.</summary>
            <returns>true if item matches the date/time filter; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.DateTimeFilter.ApplicableDateTimes">
            <summary>Gets the dates and times used to filter files and folders.</summary>
        </member>
        <member name="P:Xceed.FileSystem.DateTimeFilter.MaxDateTime">
            <summary>Gets the maximum date and time value of the filter.</summary>
        </member>
        <member name="P:Xceed.FileSystem.DateTimeFilter.MinDateTime">
            <summary>Gets the minimum date and time value of the filter.</summary>
        </member>
        <member name="T:Xceed.FileSystem.DiskFile">
            <summary>Specialization of the AbstractFile class that implements access to a disk file.</summary>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.#ctor(System.String)">
            <summary>Initializes a new instance of the DiskFile class with the fully qualified name of an underlying physical file.</summary>
            <remarks>    The fileName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/file.txt", "../file.txt", etc.     In this context, a name is relative to the current     working direcory of the application.     This method allows to initialize a DiskFile object for a     file that exists, as well as for a file that does not     exist.</remarks>
            <param name="fileName">Fully qualified name of the underlying physical file. This file may or may not physically exist.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical file.</summary>
            <remarks>    The file must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Opens the file for reading.</summary>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.</remarks>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing.</summary>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.     If there is no existing data, the parameter overwrite is     ignored.</remarks>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite">true if existing data for the file should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties is taken. This     snapshot is not automatically updated whenever the     physical item's properties change.     Refresh re-reads the information from     the physical item and updates the snapshot.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example "d:\folder\file.txt"); false otherwise (for example "file.txt").</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.BatchUpdateable">
            <summary>Returns null (Nothing in Visual Basic) since a DiskFile or a DiskFolder does not support the IBatchUpdateable interface.</summary>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item is immediately modified if it     exists. If it does not exist, the attributes are cached and     will be applied whenever this item is created.     Some types of items may not expose attributes. In this     case, an exception is thrown when trying to read or modify the     attributes.     Refresh should be called before accessing this     property, or the information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.     The property will always reflect the physical item's     existence.Refresh does not need to be called     before accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The fullname consists of the item's name,     fully-qualified, with a path. For example:     "c:\folder\file.txt".     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character regardless of whether it represents a file     or a folder.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder represents the starting point of a folder     hierarchy. On a physical disk, it is usually represented by a     drive letter ("C:\") or UNC root ("\\server\share\").     If the current item is the root of a folder hierarchy,     the RootFolder property returns a reference to     itself.     If a root folder is not available, the     RootFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoSize">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 is returned.     If the file does not physically exist, an exception will     be thrown.Refresh should be called before accessing this     property, or the information returned could be outdated.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.DiskFolder">
            <summary>Specialization of the AbstractFolder class that implements access to a disk folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.#ctor(System.String)">
            <summary>Initializes a new instance of the DiskFolder class with the fully qualified name of an underlying physical folder.</summary>
            <remarks>    The folderName parameter can include relative path     information, in which ".." means "previous folder". For     example: "folder/file", "../file", etc.     In this context, a name is relative to the current     working direcory of the application.     This method allows to initialize a DiskFolder object for     a folder that exists, as well as for a folder that does not     exist.</remarks>
            <param name="folderName">Fully qualified name of the underlying physical folder. This folder may or may not physically exist.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical folder.</summary>
            <remarks>    The folder must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical folder.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Retrieves an array of FileSystemItem objects.</summary>
            <returns>An array of FileSystemItem objects representing the items ( files and folders ) contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFile object.</summary>
            <remarks>    fileName should not end with a     DirectorySeparatorChar.</remarks>
            <returns>A reference to an AbstractFile object regardless of if the file represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFolder object.</summary>
            <remarks>    folderName should not end with a     DirectorySeparatorChar.</remarks>
            <returns>A reference to an AbstractFolder object regardless of if the folder represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties is taken. This     snapshot is not automatically updated whenever the     physical item's properties change.     Refresh re-reads the information from     the physical item and updates the snapshot.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example "d:\folder"); false otherwise. (for example "folder")</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item</summary>
            <remarks>    Previous implementations of Xceed Zip for .NET (before     2.0.200) only supported this interface via the RootFolder     property. Only the root folder of a FileSystemItem needed to     implement this interface to support it for every child.     The default implementation does not break this behavior.     It queries the RootFolder property for IBatchUpdateable     support.     If a FileSystemItem does not support this interface, this     property can be overridden and return $$NULL$$. This will     improve performance by avoiding unnecessary access to the     RootFolder property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item is immediately modified if it     exists. If it does not exist, the attributes are cached and     will be applied whenever this item is created.Refresh     should be called before accessing this property, or the     information returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)).     The property will always reflect the physical item's     existence.Refresh does not need to be called     before accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The full name consists of the item's name fully-qualified     with a path. For example: "c:\folder\file.txt",     "c:\folder\".     If the item represents a file, its name does not     end with a path separator character.     If the item represents a folder, its name does end     with a path separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.     This property cannot be set under the .NET Compact     Framework.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder represents the starting point of a folder     hierarchy. On a physical disk, it is usually represented by a     drive letter ("C:\") or UNC root ("\\server\share\").     If a root folder is not available, the     RootFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEventArgs">
            <summary>The base class for argument classes used by all events.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventArgs.#ctor">
            <summary>Initializes a new instance of the FileSystemEventArgs class.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.CurrentItem">
            <summary>Gets or sets the current FileSystemItem object being processed.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.TargetItem">
            <summary>Gets or sets the destination FileSystemItem object.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.UserData">
            <summary>Gets or sets the opaque data that will be sent back to the event handler whenever an event is raised.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_currentItem">
            <summary>The current FileSystemItem object being processed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_targetItem">
            <summary>The current target FileSystemItem object of the process.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_userData">
            <summary>Opaque data that is sent back to the event handler when an event is raised.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEvents">
            <summary>Class that dispatches events raised from methods called on FileSystemItem objects or objects that derive from the FileSystemItem class.</summary>
            <remarks>    This class serves as a central point of access to     associate event handlers with method calls, for methods that     need to raise events.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.BeginSubOperation">
            <summary>Called when a sub-operation is begun within a process.</summary>
            <remarks>Increments the sub-operation counter.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.CreateSession(System.Object,System.Object)">
            <summary>Initializes a new session from a FileSystemEvents object.</summary>
            <returns>A reference to a FileSystemEventsSession object.</returns>
            <param name="sender">The FileSystemItem object from which the session is created.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.EndSubOperation">
            <summary>Called when a sub-operation is ended within a process.</summary>
            <remarks>Decrements the sub-operation counter.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnByteProgression(System.Object,Xceed.FileSystem.ByteProgressionEventArgs)">
            <summary>Raises the ByteProgression event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ByteProgressionEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnItemException(System.Object,Xceed.FileSystem.ItemExceptionEventArgs)">
            <summary>Raises the ItemException event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An ItemExceptionEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnItemProgression(System.Object,Xceed.FileSystem.ItemProgressionEventArgs)">
            <summary>Raises the ItemProgression event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An ItemProgressionEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnScanningFolder(System.Object,Xceed.FileSystem.ScanningFolderEventArgs)">
            <summary>Raises the ScanningFolder event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ScanningFolderEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.ValidateParams(System.Object,Xceed.FileSystem.FileSystemEventArgs)">
            <summary>Verifies the validity of the parameters sent to the event handlers.</summary>
            <param name="sender">The FileSystemItem on which the method was called.</param>
            <param name="e">An instance of the FileSystemEventArgs argument class.</param>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.Empty">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsByteProgression">
            <summary>Gets a boolean value indicating if the FileSystemEvents object has subscribed to the ByteProgression event.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsItemException">
            <summary>Gets a boolean value indicating if the FileSystemEvents object has subscribed to the ItemException event.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsItemProgression">
            <summary>Gets a boolean value indicating if the FileSystemEvents object has subscribed to the ItemProgression event.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsScanningFolder">
            <summary>Gets a boolean value indicating if the FileSystemEvents object has subscribed to the ScanningFolder event.</summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">
            <summary>Raised for every 64k of bytes processed when a FileSystemItem object is being processed.</summary>
            <remarks>In the event where the total size is unknown, the amount of processed bytes will be incremented during the read process, the total bytes will always be zero, and the percent will always by 100.</remarks>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ItemException">
            <summary>Raised when an exception is caught during the processing of a FileSystemItem object, allowing the handler to decide the action to take.</summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">
            <summary>Raised every time a FileSystemItem object is about to be processed, providing progression information to the event handler.</summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">
            <summary>Raised when an AbstractFolder object is accessed or is scanned for matching items while building a list of items to process.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEventsSession">
            <summary>Class which holds information about the session which is responsible for raising all events that occur during the process.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.#ctor(Xceed.FileSystem.FileSystemEvents,System.Object,System.Object)">
            <summary>Initializes a new instance of the FileSystemEventsSession class.</summary>
            <remarks>    This constructor is called within the Object) method     found in the FileSystemEvents class.</remarks>
            <param name="events">The FileSystemEvents object from which we created the session.</param>
            <param name="sender">The FileSystemItem object on which the process was called.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.AssignComparer(System.Collections.Generic.IComparer`1{Xceed.FileSystem.ItemPair})">
            <summary>Sorts the list of items to be processed using a specific comparer.</summary>
            <returns>true if the comparer was successfully assigned; false if the same comparer is already assigned.</returns>
            <remarks>    This method throws an exception if a different comparer     is already assigned. By default, items are processed in a     first-in first-out manner.</remarks>
            <param name="comparer">An IComparer&lt;T&gt; where T is the ItemPair that will be used to sort the list of items.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.GetNextItemPair(System.Boolean)">
            <summary>Retrieves the next pair of FileSystemItem objects to be processed.</summary>
            <returns>An ItemPair object.</returns>
            <remarks>    A pair of FileSystemItem objects consisting of the     current item being processed and it's eventual target or     destination item.</remarks>
            <param name="raiseBytesProgression">A boolean value indicating if the ByteProgression event should be raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnBytesCompleted">
            <summary>Forces the byte progression to 100 completion.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnBytesProcessed(System.Int64)">
            <summary>Raises the FileSystemEvents.ByteProgression event.</summary>
            <param name="increment">The amount of bytes to be added to the total amount of bytes processed so far.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnCompletion">
            <summary>Raises the last ItemProgression event when the process is completed.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnException(System.Exception)">
            <summary>Raises the ItemException event whenever an error occurs during the processing of a FileSystemItem object.</summary>
            <returns>true if we want to retry processing the item; false if the item should be ignored or the process aborted.</returns>
            <param name="except">The error that occurred.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnNewItemToProcess(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem)">
            <summary>Places the new item in the list of FileSystemItem objects to be processed.</summary>
            <remarks>    If both currentItem and targetItem are null, the total     number of items to process is incremented, but no ItemPair is     added to the list. In this case, the caller is now responsible     for calling OnProcessingNewItem the same number of times, and     explicitly call OnCompletion when done, since the final call to     GetNextItemPair (which returns null) won't complete the     progression.</remarks>
            <param name="currentItem">The FileSystemItem object being processed.</param>
            <param name="targetItem">The eventual target FileSystemItem object being added to the list of items.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnProcessingNewItem(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>Called when a new item is about to be processed.</summary>
            <param name="current">The current FileSystemItem object being processed.</param>
            <param name="target">The eventual target FileSystemItem object for the process.</param>
            <param name="raiseBytesProgression">A boolean value indicating if we want bytes progression events to be raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnScanningFolder(Xceed.FileSystem.AbstractFolder)">
            <summary>Raises the ScanningFolder event.</summary>
            <param name="currentFolder">The AbstractFolder object being scanned.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnUndoBytesProcessed">
            <summary>Removes the amount of bytes processed for an item if an error occurred during the processing of that item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.CurrentItem">
            <summary>Gets or sets the FileSystemItem object currently being processed.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.Events">
            <summary>Gets the original FileSystemEvents object used to create the session.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.IsEmpty">
            <summary>Gets a boolean value indicating if the session's list of FileSystemItem objects to process contains no items.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.TargetItem">
            <summary>Gets or sets the eventual target FileSystemItem object for the process.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.UserData">
            <summary>Gets the opaque data that is sent back to the event handler when an event is raised.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_allFilesBytes">
            <summary>An instance of the ProgressionInfo class representing the byte count information in regards to all the items to be processed for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_allItems">
            <summary>An instance of the ProgressionInfo class representing the item count information for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_byteProgressionArgs">
            <summary>An instance of the ByteProgressionEventArgs class that provides byte progression information for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_currentFileBytes">
            <summary>An instance of the ProgressionInfo class representing the byte count information in regards to the current item being processed for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_currentItem">
            <summary>The current FileSystemItem object being processed for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_events">
            <summary>An instance of the FileSystemEvents class representing the original FileSystemEvents object from which we created the session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemExceptionArgs">
            <summary>An instance of the ItemExceptionEventArgs class that provides information on the exception that was thrown during a process for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemPairList">
            <summary>Represents a sorted collection of the items to process for the current session. Some FileSystem implementations require sorting items before processing them in order to improve performance.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemPairQueue">
            <summary>Represents a first-in, first-out collection of the items to process for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemProgressionArgs">
            <summary>An instance of the ItemProgressionEventArgs class that provides item progression information for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_scanningFolderArgs">
            <summary>An instance of the ScanningFolderEventArgs class that provides information on the folder being scanned or accessed for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_sender">
            <summary>The FileSystemItem object on which the process was called.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_targetItem">
            <summary>The current target FileSystemItem object of the process for the current session.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_userData">
            <summary>This is set at construction, and updated after each event. It is assigned to each argument structure before each event.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemException">
            <summary>Exception that is thrown when an error occurs in the Xceed.FileSystem namespace.</summary>
            <remarks>    This exception serves as the base class for all custom     exceptions defined in the Xceed.FileSystem namespace.     Specializations of the FileSystem object model also throw     exceptions that derives from     FileSystemException.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor">
            <summary>Initializes a new instance of the exception with the specified message text.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String)">
            <summary>Initializes a new instance of the exception with the specified message text.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemException.Item">
            <summary>Gets or sets the FileSystemItem object that caused the current exception.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemException.Message">
            <summary>Gets a message that describes the current exception.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemInternalException">
            <summary>Exception that is thrown when something unexpected occurs in the Xceed.FileSystem namespace.</summary>
            <remarks>    This exception means that there was an internal failure     in the library, and that nothing could be done to prevent it.     Such failures should never occur.     To get more details about what went wrong, you can     inspect the InnerException property. It is a reference to the     exception that caused the internal failure.     If you ever catch this exception in your code, please     contact Xceed Software Technical Support immediately.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor">
            <summary>Initializes a new instance of the exception.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor">
            <summary>Initializes a new instance of the exception.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the exception with the specified inner exception.</summary>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String)">
            <summary>Initializes a new instance of the exception with the specified message text.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemIOException">
            <summary>Exception that is thrown when an I/O error occurs while reading from or writing to an AbstractFile object.</summary>
            <remarks>A IOException will almost always be available in the InnerException property of this exception. This is the I/O exception that caused the FileSystemIOException to be thrown.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(System.String)">
            <summary>Initializes a new instance of the exception with the specified message text.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemItem">
            <summary>Root class for all types of items that can exist in a generic (abstract) folder. For example, a file and a folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo">
            <summary>Copies the item's properties to another item.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)">
            <summary>Copies the item's properties to another item.</summary>
            <remarks>    Only the values of the CreationDateTime,     LastAccessDateTime, LastWriteDateTime and Attributes properties     will be copied.     If the current item does not exist, its cached properties     are copied to the destination. If it does exist, its physical     properties are copied.     If the target item does not exist, it caches the values     of the properties. If it does exist, its physical properties     are changed immediately.     This method only copies the properties that are supported     by the source and target items. No exception will be thrown if     one of the items does not support one of the copied     properties.Refresh does not need to be called     before calling this method. This method will always copy the     up-to-date property values to the target item.</remarks>
            <param name="targetItem">A FileSystemItem object to which the current item's properties must be copied. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.FileSystemItem)">
            <summary>Copies the item's properties to another item and raises events during the process.</summary>
            <remarks>    Only the values of the CreationDateTime,     LastAccessDateTime, LastWriteDateTime and Attributes properties     will be copied.     If the current item does not exist, its cached properties     are copied to the destination. If it does exist, its physical     properties are copied.     If the target item does not exist, it caches the values     of the properties. If it does exist, its physical properties     are changed immediately.     This method only copies the properties that are supported     by the source and target items. No exception will be thrown if     one of the items does not support one of the copied     properties.Refresh does not need to be called     before calling this method. This method will always copy the     up-to-date property values to the target item.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="targetItem">A FileSystemItem object to which the current item's properties must be copied. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>Builds a list of FileSystemItem objects to process.</summary>
            <remarks>    This method is overridden in both the AbstractFolder and     AbstractFile classes and does not need to be overridden     in more specific implementations.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. For example, the desination folder for a folder that will be copied.</param>
            <param name="forward">true if folders will be added to the list of FileSystemItem objects to process first; false if files will be added to the list first.</param>
            <param name="recursive">true if items in subfolders should be added to the list of items to process; false otherwise.</param>
            <param name="includeFolders">true if folders will be included in the list of items to process; false otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the list of FileSystemItem objects to process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BuildListForCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Handles the special cases in regards to building the list of items to process when creating a FileSystemItem object.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo">
            <summary>Copies the item to another folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>Copies the item to another folder.</summary>
            <returns>A FileSystemItem object that represents the newly copied item.</returns>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     If this FileSystemItem object represents a file, the     physical file is immediately copied to the destination     folder.     If it represents a folder, the folder and all it's     content (files and subfolders) is immediately copied to the     destination.     When replaceExistingFiles is true, any item in the     destination that has the same name as an item being copied is     automatically replaced.     When replaceExistingFiles is false, an exception is     thrown whenever the destination contains an item with the same     name as an item being copied.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <param name="destinationFolder">An AbstractFolder object into which the item will be copied. Cannot be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>Copies the item to another folder, and raises events during the process.</summary>
            <returns>A FileSystemItem object that represents the newly copied item.</returns>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     If this FileSystemItem object represents a file, the     physical file is immediately copied to the destination     folder.     If it represents a folder, the folder and all it's     content (files and subfolders) is immediately copied to the     destination.     When replaceExistingFiles is true, any item in the     destination that has the same name as an item being copied is     automatically replaced.     When replaceExistingFiles is false, an exception is     thrown whenever the destination contains an item with the same     name as an item being copied.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="destinationFolder">An AbstractFolder object into which the item will be copied. Cannot be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create">
            <summary>Creates the physical item represented by this FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create">
            <summary>Creates the physical item represented by this FileSystemItem object.</summary>
            <remarks>    If this FileSystemItem object represents a file, an empty     file is created. If it represents a folder, a folder is     created.     If the physical item already exists, an exception is     thrown.     If the physical folder in which the new item is to be     created does not exist, it is created.     The current property values (such as Attributes) are     applied to the newly created item.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Creates the physical item represented by this FileSystemItem object and raises events during the process.</summary>
            <remarks>    If this FileSystemItem object represents a file, an empty     file is created. If it represents a folder, a folder is     created.     If the physical item already exists, an exception is     thrown.     If the physical folder in which the new item is to be     created does not exist, it is created.     The current property values (such as Attributes) are     applied to the newly created item.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete">
            <summary>Permanently deletes the physical item.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete">
            <summary>Permanently deletes the physical item.</summary>
            <remarks>    If this FileSystemItem object represents a file, the file     is deleted. If it represents a folder, the folder and all     it's content is deleted.     If the physical item does not exist, an exception is     thrown.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Permanently deletes the physical item, and raises events during the process.</summary>
            <remarks>    If this FileSystemItem object represents a file, the file     is deleted. If it represents a folder, the folder and all     it's content is deleted.     If the physical item does not exist, an exception is     thrown.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoApplyPropertiesFrom(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoApplyPropertiesTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>Copies the item's properties to another item.</summary>
            <remarks>This method should be overridden only in the case where the physical item ( file or folder ) supports specific meta-data ( other than attributes, dates, size, etc... ). The override should eventually call the base implementation in order to address the regular FileSystemItem meta-data.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="targetItem">A FileSystemItem object to which the current item's properties must be copied. Should not be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>Copies the item to another folder.</summary>
            <remarks>    If the destination does not exists, it should be     created.     If an error occurs during the copying process of a file,     the destination should not be automatically deleted.     If the destination is created during the process, the     metadata of the source item should be applied to the     destination by calling FileSystemItem).</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An FileSystemItem object into which the item will be copied. Should not be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical item represented by the FileSystemItem object.</summary>
            <remarks>    If the parents of the FileSystemItem object do not exist     upon creation of the item, an exception should be     thrown.     If an exception is thrown during the creation of the     item, the physical item should not be deleted     automatically.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <remarks>    If this method is called for an AbstractFolder object,     all children should have been previously deleted or the folder     be empty or an exception should be thrown.     All metadata ( attributes, size, etc... ) associated with     the FileSystemItem object should be reset to their default     values after the item is deleted.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties should be taken.     This snapshot should not be automatically updated     whenever the physical item's properties change.     Refresh should re-read the information     from the physical item and updates the     snapshot.Refresh should be called     before accessing a property, or the information returned could     be outdated.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.EnsureDateIsValid(System.DateTime)">
            <summary>Ensures that the DateTime value is valid.</summary>
            <remarks>This method should be overridden only in the case where the physical item ( file or folder ) supports a specific date/time interval for our DateTime values ( creation, modified, accessed ). In that case, MinValue should be supported since it indicates that no date was specified.</remarks>
            <param name="value">The DateTime value to validate.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted in the environment of the FileSystemItem object we are dealing with.</summary>
            <returns>true if the path is rooted; false otherwise.</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <remarks>    If the target item is $$NULL$$, this method should return     false</remarks>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCopyTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>Copies each item in the FileSystemEventsSession object's list to each item's destination.</summary>
            <returns>A reference to a FileSystemItem object representing the target item of the firstItemPair.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCopyToCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair,System.Boolean)">
            <summary>Copies the item pair's current FileSystemItem to its target FileSystemItem.</summary>
            <param name="session">A reference to a FileSystemEventsSession object responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to an ItemPair object which contains the FileSystemItem to be copied and its eventual target.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates each item in the FileSystemEventsSession object's list.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCreateCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair)">
            <summary>Creates the item pair's current FileSystemItem.</summary>
            <param name="session">A reference to a FileSystemEventsSession object responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to an ItemPair object which contains the item to be created.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Deletes each item in the FileSystemEventsSession object's list.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListDeleteCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair)">
            <summary>Deletes the item pair's current FileSystemItem.</summary>
            <param name="session">A reference to a FileSystemEventsSession object responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to an ItemPair object which contains the item to be deleted.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListMoveTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>Moves each item in the FileSystemEventsSession object's list to each item's destination.</summary>
            <returns>A reference to a FileSystemItem object representing the target item of the lastItemPair.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListMoveToCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair,System.Boolean)">
            <summary>Moves the item pair's current FileSystemItem to its target FileSystemItem.</summary>
            <param name="session">A reference to a FileSystemEventsSession object responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to a ItemPair object which contains the FileSystemItem to be moved and its eventual target.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo">
            <summary>Moves the item to another folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo(Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>Moves the item to another folder.</summary>
            <returns>A FileSystemItem object that represents the newly moved item.</returns>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     If this FileSystemItem object represents a file, the     physical file is immediately moved to the destination     folder.     If it represents a folder, the folder and all it's     content (files and subfolders) is immediately moved to the     destination.     When replaceExistingFiles is true, any item in the     destination that has the same name as an item being moved is     automatically replaced.     When replaceExistingFiles is false, an exception is     thrown whenever the destination contains an item with the same     name as an item being moved.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <param name="destinationFolder">An AbstractFolder object into which the item will be moved. Cannot be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>Moves the item to another folder, and raises events during the process.</summary>
            <returns>A FileSystemItem object that represents the newly moved item.</returns>
            <remarks>    If the physical folder specified by destinationFolder     does not exist, it is created.     If this FileSystemItem object represents a file, the     physical file is immediately moved to the destination     folder.     If it represents a folder, the folder and all it's     content (files and subfolders) is immediately moved to the     destination.     When replaceExistingFiles is true, any item in the     destination that has the same name as an item being moved is     automatically replaced.     When replaceExistingFiles is false, an exception is     thrown whenever the destination contains an item with the same     name as an item being moved.     FileSystemItem) is called on the destination item;     therefore, the attributes and dates of the original item are     applied to the destination item.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="destinationFolder">An AbstractFolder object into which the item will be moved. Cannot be $$NULL$$.</param>
            <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh">
            <summary>Re-reads the information from the physical item.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh">
            <summary>Re-reads the information from the physical item.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties is taken. This     snapshot is not automatically updated whenever the     physical item's properties change.     Refresh re-reads the information from     the physical item and updates the snapshot.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>Re-reads the information from the physical item and raises events during the process.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties is taken. This     snapshot is not automatically updated whenever the     physical item's properties change.     Refresh re-reads the information from     the physical item and updates the snapshot.</remarks>
            <param name="events">A FileSystemEvents object that will be used to raise events. Cannot be $$NULL$$.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ToString">
            <summary>Returns the full name of the item.</summary>
            <returns>A string that represents the full name of the item.</returns>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Attributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item is immediately modified if it     exists. If it does not exist, the attributes are cached and     will be applied whenever this item is created.     If HasAttributes returns false, the getter returns Normal     and Directory while the setter throws a     FileSystemNotSupportedException.     Keep in mind that even if HasAttributes returns true, it     is not guaranteed that all the attributes are supported. The     non-supported attributes will simply be ignored.Refresh     should be called before accessing this property, or the     information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item, or null (Nothing in Visual Basic) if this item does not support this interface.</summary>
            <remarks>    Previous implementations of Xceed Zip for .NET (before     2.0.200) only supported this interface via the RootFolder. Only     the root folder of a file system needed to implement this     interface to support it for every child.     The default implementation does not break this behavior.     It queries the RootFolder for IBatchUpdateable support.     If a file system does not support this interface, it can     override this property and simply return null (Nothing in     Visual Basic). This will improve performance by avoiding     unnecessary access to the RootFolder property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.CreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.     If HasCreationDateTime returns false, the getter returns     MinValue while the setter throws a     FileSystemNotSupportedException.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item should be immediately modified if     it exists. If it does not exist, the attributes should be     cached and applied whenever this item is created.     Some types of items may not expose attributes; in this     case, DoHasAttributes should return false to prevent     DoAttributes from being called.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item should be immediately modified if     it exists. If it does not exist, the date should be cached and     applied whenever this item is created.     Some types of items may not expose a creation date and     time; in this case, DoHasCreationDateTime should return false     to prevent DoCreationDateTime from being called.     Other types of items that do expose a creation date and     time may not have the information available. In this case,     MinValue should be returned.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item, otherwise an     exception should be raised from the method.     The property should always reflect the physical item's     existence.Refresh does not need to be called before     accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The full name should consist of the item's name     fully-qualified with a path. For example: "c:\folder\file.txt",     "c:\folder\".     If the item represents a file, its name should not end     with a path separator character.     If the item represents a folder, its name should end with     a path separator character.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes">
            <summary>Gets a boolean value indicating if the item supports attributes.</summary>
            <remarks>    If IsRoot returns true, DoHasAttributes returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime">
            <summary>Gets a boolean value indicating if the item supports having a creation date and time.</summary>
            <remarks>    If IsRoot returns true, DoHasCreationDateTime returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime">
            <summary>Gets a boolean value indicating if the item supports having a last access date and time.</summary>
            <remarks>    If IsRoot returns true, DoHasLastAccessDateTime returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime">
            <summary>Gets a boolean value indicating if the item supports having a last write date and time.</summary>
            <remarks>    If IsRoot returns true, DoHasLastWriteDateTime returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item should be immediately modified if     it exists. If it does not exist, the date should be cached and     applied whenever this item is created.     Some types of items may not expose a last access date and     time; in this case, DoHasLastAccessDateTime should return false     to prevent DoLastAccessDateTime from being called.     Other types of items that do expose a last access date     and time may not have the information available. In this case,     MinValue should be returned.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item should be immediately modified if     it exists. If it does not exist, the date should be cached and     applied whenever this item is created.     Some types of items may not expose a modification date     and time; in this case, DoHasLastWriteDateTime should return     false to prevent DoLastWriteDateTime from being called.     Other types of items that do expose a modification date     and time may not have the information available. In this case,     MinValue should be returned.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item should be immediately renamed if it exists. If it does not     exist, the new name should be cached and applied whenever this     item is created. In either cases, if a physical item with the     same name already exists, an exception should be thrown.     The filename, without path, of an item should not end     with a path separator character regardless of whether it     represents a file or a folder.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property should return     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder should represent the starting point of a     folder hierarchy. On a physical disk, it is usually represented     by a drive letter ("C:\") or UNC root     ("\\server\share\").     If the current item is the root of a folder hierarchy,     the RootFolder property should return a     reference to itself.     If a root folder is not available, the     RootFolder property should return     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Exists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.Refresh does not need to be called     before accessing this property. The property will always     reflect the physical item's existence.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.FullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The full name consists of the item's name fully-qualified     with a path. For example: "c:\folder\file.txt",     "c:\folder\".     If the item represents a file, its name does not     end with a path separator character.     If the item represents a folder, its name does end     with a path separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasAttributes">
            <summary>Gets a boolean value indicating if the item supports attributes.</summary>
            <remarks>    If IsRoot returns true, DoHasAttributes returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasCreationDateTime">
            <summary>Gets a boolean value indicating if the item supports having a creation date and time.</summary>
            <remarks>    If IsRoot returns true, HasCreationDateTime returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasLastAccessDateTime">
            <summary>Gets a boolean value indicating if the item supports having a last access date and time.</summary>
            <remarks>    If IsRoot returns true, HasLastAccessDateTime returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasLastWriteDateTime">
            <summary>Gets a boolean value indicating if the item supports having a last write date and time.</summary>
            <remarks>    If IsRoot returns true, HasLastWriteDateTime returns     false.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HostedFullName">
            <summary>Gets a human-readable full pathname representing the fully qualified path of all host files containing the item and the path of the item itself.</summary>
            <remarks>The full pathname returned is useful for displaying a more meaningful filename to the user.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HostFile">
            <summary>Gets an AbstractFile containing an archived version of this FileSystemItem.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.InvalidChars">
            <summary>Gets the characters that are invalid in file and folder names.</summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.          If HasLastAccessDateTime returns false, the getter     returns MinValue while the setter throws a     FileSystemNotSupportedException.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.     If HasLastWriteDateTime returns false, the getter returns     MinValue while the setter throws a     FileSystemNotSupportedException.Refresh should be called     before accessing this property, or the information returned     could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Name">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character regardless of whether it represents a file     or a folder.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.ParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.RootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder represents the starting point of a folder     hierarchy. On a physical disk, it is usually represented by a     drive letter ("C:\") or UNC root ("\\server\share\").     Some specializations of the AbstractFolder class may     define a specialized class that represents a root folder,     exposing properties and methods that apply only to a     root.     Therefore, the RootFolder property may     return an AbstractFolder instance that is in fact a specialized     class representing the root.     If the current item is the root of a folder hierarchy,     the RootFolder property returns a reference to     itself, or a reference to a specialized object that represents     the root folder with more details.     If a root folder is not available, the     RootFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemItem.AltFolderSeparator">
            <summary>String equivalent of AltDirectorySeparatorChar.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemItem.FolderSeparator">
            <summary>String equivalent of DirectorySeparatorChar.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemNotSupportedException">
            <summary>Exception that is thrown when calling a method or accessing a property that is not supported by a FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.Filter">
            <summary>The Filter class allows to filter a list of FileSystemItem objects.</summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.GetFiltersFromParams(System.Object[])">
            <summary>Converts a generic array of parameters to an array of Filter objects.</summary>
            <returns>An array of Filter objects.</returns>
            <remarks>    To filter a list of files or folders, you can pass a     variable number of objects in the filters parameter. These     objects may be of the following types:                                            Object type                 Type of filter applied                                           String                 The string is assumed to be a file                 mask, and a NameFilter object is automatically                 created for the passed string, with File as the                 default FilterScope.                                           FileAttributes                 A AttributeFilter object is                 automatically created for the provided attributes,                 with File as the default FilterScope.                                           Filter                 The provided Filter object is used                 as-is.                                           Array of Object                 Each object in the array may be of the                 types described in this table, and is used                 accordingly.                                           Other                 If any other type is found, an                 exception is thrown.                           </remarks>
            <param name="filters">An array of objects that must be converted to an array of Filter objects.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemInScope(Xceed.FileSystem.FileSystemItem)">
            <summary>Retrieves a boolean value indicating if the specified item is within the scope of the filter.</summary>
            <returns>true if the item is within the scope of the filter; false otherwise.</returns>
            <param name="item">The item to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches the filter.</summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches the filter.</summary>
            <returns>true if item matches the filter or does not apply to the filter; false otherwise.</returns>
            <param name="item">The FileSystemItem object to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatching(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FilterScope)">
            <summary>Gets a FilterResult value indicating if the item matches the filter.</summary>
            <returns>A FilterResult value: NotApplicable if the filter's scope does not match the applicable scope; Accept if the filter matches the item; Reject otherwise.</returns>
            <param name="item">The FileSystemItem object to verify.</param>
            <param name="applicableScope">The applicable FilterScope.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingAll">
            <summary>Verifies if the FileSystemItem object matches all of the provided filters.</summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingAll(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.Filter[])">
            <summary>Verifies if the FileSystemItem object matches all of the provided filters.</summary>
            <returns>true if item matches all of the provided filters; false otherwise.</returns>
            <remarks>    Only filters with a File or Folder FilterScope are     considered, depending on the item type.</remarks>
            <param name="item">The FileSystemItem object that will be verified.</param>
            <param name="filters">The array of Filter objects against which item will be verified.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingAll(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FilterScope,Xceed.FileSystem.Filter[])">
            <summary>Verifies if the FileSystemItem object matches all of the provided filters.</summary>
            <returns>A FilterResult value indicating whether the item matches all the Filter objects, or whether the FilterScope does not apply to the specified FileSystemItem.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
            <param name="applicableScope">The FilterScope of the filters to consider. Filters that do not share a common scope are ignored.</param>
            <param name="filters">The array of Filter objects against which item will be verified.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingOne">
            <summary>Verifies if the FileSystemItem object matches at least one of the provided filters.</summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingOne(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.Filter[])">
            <summary>Verifies if the FileSystemItem object matches at least one of the provided filters.</summary>
            <returns>true if item matches one of the provided filters; false otherwise.</returns>
            <remarks>    Only filters with a File or Folder FilterScope are     considered, depending on the item type.</remarks>
            <param name="item">The FileSystemItem object that will be verified.</param>
            <param name="filters">The array of Filter objects against which item will be verified.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingOne(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FilterScope,Xceed.FileSystem.Filter[])">
            <summary>Verifies if the FileSystemItem object matches at least one of the provided filters.</summary>
            <returns>A FilterResult value indicating whether the item matches at least one of the Filter objects, or whether the FilterScope does not apply to the specified FileSystemItem.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
            <param name="applicableScope">The FilterScope of the filters to consider. Filters that do not share a common scope are ignored.</param>
            <param name="filters">The array of Filter objects against which item will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.Filter.Scope">
            <summary>Gets or sets the scope of the filter.</summary>
        </member>
        <member name="T:Xceed.FileSystem.IsolatedFile">
            <summary>Specialization of the AbstractFile class that implements access to a file located in Isolated Storage. This class is not supported by Xceed Zip for .NET Compact Framework as Isolated Storage does not exist on the .NET Compact Framework.</summary>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.#ctor(System.String)">
            <summary>Initializes a new instance of the IsolatedFile class with the fully qualified name of an underlying physical file.</summary>
            <remarks>    Allowed paths: "file.txt", "folder\file.txt",     "\folder\file.txt"</remarks>
            <param name="fileName">Fully qualified name of the underlying physical file. This file may or may not physically exist.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical file.</summary>
            <remarks>    The file must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Opens the file for reading.</summary>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.</remarks>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing.</summary>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.     If there is no existing data, the parameter overwrite is     ignored.</remarks>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite">true if existing data for the file should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item.</summary>
            <remarks>    When a FileSystemItem object's properties, such as     Attributes or CreationDateTime, are first accessed, a snapshot     of the underlying physical item's properties is taken. This     snapshot is not automatically updated whenever the     physical item's properties change.     Refresh re-reads the information from     the physical item and updates the snapshot.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example "folder\file.txt"); false otherwise (for example "file.txt").</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoAttributes">
            <summary>Gets or sets the attributes of the item. Not supported.</summary>
            <remarks>    Because DoHasAttributes always returns false,     DoAttributes should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item. Not supported.</summary>
            <remarks>    Because DoHasCreationDateTime always returns false,     DoCreationDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.     The property will always reflect the physical item's     existence.Refresh does not need to be called     before accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The fullname consists of the item's name,     fully-qualified, with a path. For example:     "folder\file.txt".     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasAttributes">
            <summary>Gets a boolean value indicating if the file supports attributes.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasCreationDateTime">
            <summary>Gets a boolean value indicating if the file supports having a creation date and time.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasLastAccessDateTime">
            <summary>Gets a boolean value indicating if the file supports having a last access date and time.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasLastWriteDateTime">
            <summary>Gets a boolean value indicating if the file supports having a last write date and time.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item. Not supported.</summary>
            <remarks>    Because DoHasLastAccessDateTime always returns false,     DoLastAccessDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item. Not supported.</summary>
            <remarks>    Because DoHasLastWriteDateTime always returns false,     DoLastWriteDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character regardless of whether it represents a file     or a folder.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoSize">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 is returned.     If the file does not physically exist, an exception will     be thrown.Refresh should be called before accessing this     property, or the information returned could be outdated.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.IsolatedFolder">
            <summary>Specialization of the AbstractFolder class that implements access to a folder located in Isolated Storage. This class is not supported by Xceed Zip for .NET Compact Framework as Isolated Storage does not exist on the .NET Compact Framework.</summary>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.#ctor(System.String)">
            <summary>Initializes a new instance of the IsolatedFolder class with the fully qualified name of an underlying physical folder.</summary>
            <remarks>    Allowed paths: "folder", "folder\subFolder",     "\folder\subFolder"</remarks>
            <param name="folderName">Fully qualified name of the underlying physical folder. This folder may or may not physically exist.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical folder.</summary>
            <remarks>    The folder must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical folder.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Retrieves an array of FileSystemItem objects.</summary>
            <returns>An array of FileSystemItem objects representing the items ( files and folders ) contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFile object.</summary>
            <returns>A reference to an AbstractFile object regardless of if the file represented by the object exists or not.</returns>
            <remarks>    fileName should not end with a     DirectorySeparatorChar.     Case-sensitivity is system specific in Isolated     Storage.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFolder object.</summary>
            <returns>A reference to an AbstractFolder object regardless of if the folder represented by the object exists or not.</returns>
            <remarks>    folderName should not end with a     DirectorySeparatorChar.     Case-sensitivity is system specific in Isolated     Storage.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item. In the case of a IsolatedFolder object, we are always up-to-date.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example "\folder"); false otherwise. (for example "folder")</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoAttributes">
            <summary>Gets or sets the attributes of the item. Not supported.</summary>
            <remarks>    Because DoHasAttributes always returns false,     DoAttributes should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item. Not supported.</summary>
            <remarks>    Because DoHasCreationDateTime always returns false,     DoCreationDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)).     The property will always reflect the physical item's     existence.Refresh does not need to be called     before accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The full name consists of the item's name fully-qualified     with a path. For example: "folder\file.txt", "folder\".     If the item represents a file, its name does not     end with a path separator character.     If the item represents a folder, its name does end     with a path separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasAttributes">
            <summary>Gets a boolean value indicating if the folder supports attributes.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasCreationDateTime">
            <summary>Gets a boolean value indicating if the folder supports having a creation date and time.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasLastAccessDateTime">
            <summary>Gets a boolean value indicating if the folder supports having a last access date and time.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasLastWriteDateTime">
            <summary>Gets a boolean value indicating if the folder supports having a last write date and time.</summary>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item. Not supported.</summary>
            <remarks>    Because DoHasLastAccessDateTime always returns false,     DoLastAccessDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item. Not supported.</summary>
            <remarks>    Because DoHasLastWriteDateTime always returns false,     DoLastWriteDateTime should never be called.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ItemAlreadyExistsException">
            <summary>Exception that is thrown when performing an operation on a FileSystemItem object that already exists.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemDoesNotExistException">
            <summary>Exception that is thrown when performing an operation on a FileSystemItem object that does not yet exist.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionEventArgs">
            <summary>Provides information on the exception that was thrown during a process.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemExceptionEventArgs.#ctor">
            <summary>Intializes a new instance of the ItemExceptionEventArgs argument class.</summary>
        </member>
        <member name="P:Xceed.FileSystem.ItemExceptionEventArgs.Action">
            <summary>Gets or sets the action taken when an exception is thrown during the processing of a FileSystemItem object.</summary>
        </member>
        <member name="P:Xceed.FileSystem.ItemExceptionEventArgs.Exception">
            <summary>Gets or sets the exception that was thrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionEventArgs.m_action">
            <summary>An instance of the ItemExceptionAction class representing the action that will be taken in the OnItemException event handler.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionEventArgs.m_exception">
            <summary>An instance of the Exception class representing the exception that was thrown and caused the OnItemException event to be raised.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ItemIsReadOnlyException">
            <summary>Exception that is thrown when performing an operation on a FileSystemItem object that is read only.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemIsRootFolderException">
            <summary>Exception that is thrown when performing an illegal operation on a FileSystemItem object that is a root folder.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.</summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes a new instance of the exception with the specified message text and FileSystemItem object.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>Initializes a new instance of the exception with the specified message text, FileSystemItem object and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemPair">
            <summary>Represents a pair of FileSystemItem objects consisting of the item being processed and its eventual target or destination item.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemPair.#ctor(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem)">
            <summary>Initializes an instance of the ItemPair class specifying the current and target items.</summary>
            <param name="currentItem">The current FileSystemItem object being processed.</param>
            <param name="targetItem">The eventual target or destination FileSystemItem object.</param>
        </member>
        <member name="F:Xceed.FileSystem.ItemPair.current">
            <summary>The FileSystemItem object being procesed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemPair.target">
            <summary>The eventual target or destination FileSystemItem object.</summary>
            <remarks>    Can be $$NULL$$ in cases where there is no target, for     example when calling the method.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.ItemProgressionEventArgs">
            <summary>Provides item progression information.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemProgressionEventArgs.#ctor(Xceed.FileSystem.ProgressionInfo)">
            <summary>Initializes an new instance of the ItemProgressionEventArgs argument class.</summary>
            <param name="allItems">The total number of items being processed.</param>
        </member>
        <member name="P:Xceed.FileSystem.ItemProgressionEventArgs.AllItems">
            <summary>Gets the total number of items being processed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemProgressionEventArgs.m_allItems">
            <summary>An instance of the ProgressionInfo class representing the item count information.</summary>
        </member>
        <member name="T:Xceed.FileSystem.Licenser">
            <summary>Class which is used to register the classes located in the Xceed.FileSystem namespace.</summary>
            <remarks>    We recommend you set the LicenseKey property in the main     entry point of the application. For example, the LicenseKey     property can be set, for C# users, in the static main function.     For VB.NET users, it can be set in the constructor of the main     form or in the "Sub Main" procedure. If no entry point is     available, it is recommended that the LicenseKey property be     set in a static constructor of a class that will be accessed     systematically before any of the library's classes are     instantiated or, you can simply set the LicenseKey property     immediately BEFORE you instantiate a class.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.Licenser.LicenseKey">
            <summary>Gets or sets the license key used to license this product.</summary>
        </member>
        <member name="T:Xceed.FileSystem.MemoryFile">
            <summary>Specialization of the AbstractFile class that implements access to a file located in memory.</summary>
            <remarks>    As long as you hold at least one instance on a MemoryFile     or a MemoryFolder located in a specific root name, all files     and folders in that same virtual ram drive stay alive. When a     root name is no longer referenced, all its content will get     garbage collected later.     To make sure the memory allocated for a MemoryFile's data     is released, as soon as you don't need the file anymore, call     Delete on that MemoryFile.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor">
            <summary>Initializes a new instance of the MemoryFile class, using a unique root name and filename.</summary>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor">
            <summary>Initializes a new instance of the MemoryFile class, using a unique root name and filename.</summary>
            <remarks>    As long as you hold at least one instance on a MemoryFile     or a MemoryFolder located in a specific root name, all files     and folders in that same virtual ram drive stay alive. When a     root name is no longer referenced, all its content will get     garbage collected later.     To make sure the memory allocated for a MemoryFile's data     is released, as soon as you don't need the file anymore, call     Delete on that MemoryFile.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor(System.String)">
            <summary>Initializes a new instance of the MemoryFile class specifying its full name.</summary>
            <remarks>    As long as you hold at least one instance on a MemoryFile     or a MemoryFolder located in a specific root name, all files     and folders in that same virtual ram drive stay alive. When a     root name is no longer referenced, all its content will get     garbage collected later.     To make sure the memory allocated for a MemoryFile's data     is released, as soon as you don't need the file anymore, call     Delete on that MemoryFile.</remarks>
            <param name="fullName">The fully qualified name of the MemoryFile, as returned by FullName, including the root part. The file does not need to exist. For example, "RAM:\memoryFile.txt" or "MyRam1:\subfolder\MyFile.txt"</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the MemoryFile class specifying its root name and filename.</summary>
            <remarks>    As long as you hold at least one instance on a MemoryFile     or a MemoryFolder located in a specific root name, all files     and folders in that same virtual ram drive stay alive. When a     root name is no longer referenced, all its content will get     garbage collected later.     To make sure the memory allocated for a MemoryFile's data     is released, as soon as you don't need the file anymore, call     Delete on that MemoryFile.</remarks>
            <param name="rootName">The root name of the MemoryFile, without the colon (:). You can see this as the drive letter (or name) of your memory drive. For example: "RamDrive1"</param>
            <param name="fullName">The name of the MemoryFile, without the root part. Can contain a path. For example, "memoryFile.txt" or "\subfolder\MyFile.txt</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical file.</summary>
            <remarks>The file must be created in an existing folder.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Opens the file for reading.</summary>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.</remarks>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing.</summary>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.     If there is no existing data, the parameter overwrite is     ignored.</remarks>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite">true if existing data for the file should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item. In the case of a MemoryFile object, we are always up-to-date.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example "RAM_DRIVE:\folder\file.txt"); false otherwise (for example "file.txt").</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item is immediately modified if it     exists. If it does not exist, the attributes are cached and     will be applied whenever this item is created.Refresh     should be called before accessing this property, or the     information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.     The property will always reflect the physical item's     existence.Refresh does not need to be called     before accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The fullname consists of the item's name,     fully-qualified, with a path. For example:     "RAM_DRIVE:\folder\file.txt".     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created.     The name of an item must not end with a path     separator character regardless of whether it represents a file     or a folder.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder represents the starting point of a folder     hierarchy. On a physical disk, it is usually represented by a     drive letter ("C:\") or UNC root ("\\server\share\").     If the current item is the root of a folder hierarchy,     the RootFolder property returns a reference to     itself.     If a root folder is not available, the     RootFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoSize">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 is returned.     If the file does not physically exist, an exception will     be thrown.Refresh should be called before accessing this     property, or the information returned could be outdated.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.MemoryFolder">
            <summary>Specialization of the AbstractFolder class that implements access to a folder located in memory.</summary>
            <remarks>    As long as you hold at least one instance on a MemoryFile     or a MemoryFolder     located in a specific root name, all files and folders in that     same virtual ram drive stay alive. When a root name is no     longer referenced, all its content will get garbage collected     later.     To make sure the memory allocated for a MemoryFile's data     is released, as soon as you don't need the file anymore, call     Delete on that MemoryFile.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor">
            <summary>Initializes a new instance of the MemoryFolder class, using a unique root name.</summary>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor">
            <summary>Initializes a new instance of the MemoryFolder class, using a unique root name.</summary>
            <remarks>This creates a root folder.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor(System.String)">
            <summary>Initializes a new instance of the MemoryFolder class specifying its full path name.</summary>
            <param name="fullName">The full name of the MemoryFolder, as returned by FullName, including the root part. The folder does not need to exist. For example, "RAM:\" or "MyRam1:\Data\Images\Gifs"</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the MemoryFolder class specifying its root name and folder path.</summary>
            <param name="rootName">The root name of the MemoryFolder, without the colon (:). You can see this as the drive letter (or name) of your memory drive. For example: "RamDrive1"</param>
            <param name="fullPath">The full path of the MemoryFolder, without the root part. For example, "\" or "\Data\Images\Gifs"</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical folder.</summary>
            <remarks>    The folder must be created in a folder that exists     otherwise an exception will be thrown.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical folder.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Retrieves an array of FileSystemItem objects.</summary>
            <returns>An array of FileSystemItem objects representing the items ( files and folders ) contained within the folder.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFile object.</summary>
            <remarks>    fileName should not end with a     DirectorySeparatorChar.</remarks>
            <returns>A reference to an AbstractFile object regardless of if the file represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="name">The name of the file to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>Retrieves a reference to an AbstractFolder object.</summary>
            <remarks>    folderName should not end with a     DirectorySeparatorChar.</remarks>
            <returns>A reference to an AbstractFolder object regardless of if the folder represented by the object exists or not.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="name">The name of the folder to retrieve.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item. In the case of a MemoryFolder object, we are always up-to-date.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true if the path is rooted (for example "RAM_DRIVE:\folder"); false otherwise. (for example "folder")</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
            <returns>true if the source and target FileSystemItem objects represent the same physical entity; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination item.</param>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item is immediately modified if it     exists. If it does not exist, the attributes are cached and     will be applied whenever this item is created.Refresh     should be called before accessing this property, or the     information returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)).     The property will always reflect the physical item's     existence.Refresh does not need to be called     before accessing this property.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The full name consists of the item's name fully-qualified     with a path. For example: "RAM_DRIVE:\folder\file.txt",     "RAM_DRIVE:\folder\".     If the item represents a file, its name does not     end with a path separator character.     If the item represents a folder, its name does end     with a path separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.Refresh should be     called before accessing this property, or the information     returned could be outdated.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder represents the starting point of a folder     hierarchy. On a physical disk, it is usually represented by a     drive letter ("C:\") or UNC root ("\\server\share\").     If a root folder is not available, the     RootFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.NameFilter">
            <summary>Filters a FileSystemItem object based on its name.</summary>
            <remarks>By default, the FilterScope is set to File.</remarks>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.#ctor">
            <summary>Initializes a new instance of the NameFilter class.</summary>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.#ctor(System.String)">
            <summary>Initializes a new instance of the NameFilter class.</summary>
            <remarks>    By default, the mask is not case sensitive. To make it     case sensitive, just prepend '&gt;' to the mask     parameter.</remarks>
            <param name="mask">Mask to use to filter file names (e.g. "*.txt", "a??.txt", etc.) By default, the FilterScope is set to File.</param>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.#ctor(System.String,Xceed.FileSystem.FilterScope)">
            <summary>Initializes a new instance of the NameFilter class.</summary>
            <remarks>    By default, the mask is not case sensitive. To make it     case sensitive, just prepend '&gt;' to the mask     parameter.</remarks>
            <param name="mask">Mask to use to filter file names (e.g. "*.txt", "a??.txt", etc.) By default, the FilterScope is set to File.</param>
            <param name="scope">Determines whether the scope applies to files, folders or both.</param>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches at least one of the name filters.</summary>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches at least one of the name filters.</summary>
            <returns>true if item matches at least one of the name filters; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.NameFilter.CaseSensitive">
            <summary>Gets a value indicating whether the file or folder name matching is case-sensitive.</summary>
        </member>
        <member name="P:Xceed.FileSystem.NameFilter.Masks">
            <summary>Gets an array of string masks that are used to filter the files and folders.</summary>
        </member>
        <member name="T:Xceed.FileSystem.NotFilter">
            <summary>Performs a logical NOT operation on a Filter object.</summary>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.#ctor">
            <summary>Initializes a new instance of the NotFilter class.</summary>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.#ctor(Xceed.FileSystem.Filter)">
            <summary>Initializes a new instance of the NotFilter class.</summary>
            <param name="filter">Filter whose result must be inverted.</param>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.#ctor(System.Object)">
            <summary>Initializes a new instance of the NotFilter class.</summary>
            <param name="filter">Filter whose result must be inverted.</param>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item does not match the filter.</summary>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item does not match the filter.</summary>
            <returns>true if item does not match the filter; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.NotFilter.Filter">
            <summary>Gets the Filter object that is used for the logical NOT operation.</summary>
        </member>
        <member name="P:Xceed.FileSystem.NotFilter.Scope">
            <summary>Gets or sets the scope of the inner filter.</summary>
        </member>
        <member name="T:Xceed.FileSystem.OrFilter">
            <summary>Performs a logical OR operation on a set of Filter objects.</summary>
        </member>
        <member name="M:Xceed.FileSystem.OrFilter.#ctor(System.Object[])">
            <summary>Initializes a new instance of the OrFilter class.</summary>
            <param name="filters">Filters that are part of the logical OR operation.</param>
        </member>
        <member name="M:Xceed.FileSystem.OrFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches at least one of the filters.</summary>
        </member>
        <member name="M:Xceed.FileSystem.OrFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches at least one of the filters.</summary>
            <returns>true if item matches at least one of the filters; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.OrFilter.Filters">
            <summary>Gets an array of Filter objects that are part of the logical OR operation.</summary>
        </member>
        <member name="P:Xceed.FileSystem.OrFilter.Scope">
            <summary>Gets or sets the scope of the inner filter.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ProgressionInfo">
            <summary>Provides progression information for progression events.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ProgressionInfo.#ctor">
            <summary>Initializes a new instance of the ProgressionInfo class.</summary>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Percent">
            <summary>Gets the ratio (percentage) of bytes or FileSystemItem objects processed so far.</summary>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Processed">
            <summary>Gets or sets the number of bytes or FileSystemItem objects processed so far.</summary>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Total">
            <summary>Gets or sets the total number of bytes or FileSystemItem objects to be processed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ProgressionInfo.m_processed">
            <summary>The amount of bytes or items processed.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ProgressionInfo.m_total">
            <summary>The total amount of bytes or items to process.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ScanningFolderEventArgs">
            <summary>Provides information on the folder being scanned or accessed.</summary>
        </member>
        <member name="M:Xceed.FileSystem.ScanningFolderEventArgs.#ctor">
            <summary>Initializes a new instance of the ScanningFolderEventArgs argument class.</summary>
        </member>
        <member name="T:Xceed.FileSystem.SizeFilter">
            <summary>Filters a FileSystemItem object based on its size.</summary>
        </member>
        <member name="M:Xceed.FileSystem.SizeFilter.#ctor(System.Int64,System.Int64)">
            <summary>Initializes a new instance of the SizeFilter class.</summary>
            <param name="minSize">A value that represents the minimum size of the filter.</param>
            <param name="maxSize">A value that represents the maximum size of the filter.</param>
        </member>
        <member name="M:Xceed.FileSystem.SizeFilter.IsItemMatching">
            <summary>Gets a boolean value indicating if the item matches the size filter.</summary>
        </member>
        <member name="M:Xceed.FileSystem.SizeFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the item matches the size filter.</summary>
            <returns>true if item matches the size filter; false otherwise.</returns>
            <param name="item">The FileSystemItem object that will be verified.</param>
        </member>
        <member name="P:Xceed.FileSystem.SizeFilter.MaxSize">
            <summary>Gets the maximum size value of the filter.</summary>
        </member>
        <member name="P:Xceed.FileSystem.SizeFilter.MinSize">
            <summary>Gets the minimum size value of the filter.</summary>
        </member>
        <member name="T:Xceed.FileSystem.StreamFile">
            <summary>Specialization of the AbstractFile class that implements access to any type of stream as though it were a file.</summary>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor">
            <summary>Initializes a new instance of the StreamFile class specifying its inner stream.</summary>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the StreamFile class specifying its inner stream.</summary>
            <param name="stream">The inner stream around which the StreamFile will be created.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor(System.IO.Stream,System.String)">
            <summary>Initializes a new instance of the StreamFile class specifying its inner stream as well as its name.</summary>
            <param name="stream">The inner stream around which the StreamFile will be created.</param>
            <param name="name">The name representing the StreamFile object.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Creates the physical file. This method will always throw a FileSystemNotSupportedException exception since it is not possible to recreate a StreamFile once it has been destroyed.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Permanently deletes the physical item.</summary>
            <remarks>This does not close the attached stream; It simply invalidates this StreamFile.</remarks>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>Opens the file for reading.</summary>
            <remarks>    The returned stream is guaranteed to be readable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.</remarks>
            <returns>A Stream object that can be used to read data from the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>Opens the file for writing.</summary>
            <remarks>    The returned stream is guaranteed to be writable, but may     or may not be seekable.     The share parameter allows you to control how the file is     shared by different processes.     If there is no existing data, the parameter overwrite is     ignored.</remarks>
            <returns>A Stream object that can be used to write data to the file.</returns>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite">true if existing data for the file should be replaced; false if existing data should be preserved, appending new data at the end.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by different processes.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>Re-reads the information from the physical item. In the case of a StreamFile object, there is nothing to refresh.</summary>
            <param name="session">A reference to a FileSystemEventsSession object which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.IsPathRooted(System.String)">
            <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
            <returns>true since every StreamFile is considered to be rooted.</returns>
            <param name="path">The path to verify.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>Gets a boolean value indicating if the source and target file are the same.</summary>
            <returns>true if the source and target files are the same; false otherwise.</returns>
            <param name="target">A FileSystemItem object representing the destination file.</param>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.BatchUpdateable">
            <summary>Gets the IBatchUpdateable implementation for this item.</summary>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoAttributes">
            <summary>Gets or sets the attributes of the item.</summary>
            <remarks>    When changing the item's attributes through this     property, the physical item is immediately modified if it     exists. If it does not exist, the attributes are cached and     will be applied whenever this item is created.     Some types of items may not expose attributes. In this     case, an exception is thrown when trying to read or modify the     attributes.     </remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoCreationDateTime">
            <summary>Gets or sets the creation date and time of the item.</summary>
            <remarks>    When changing the item's creation date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoExists">
            <summary>Gets a boolean value indicating if the item physically exists.</summary>
            <remarks>    This property should be evaluated before calling a method     that needs to access the underlying physical item (For example,     Boolean)), otherwise these methods will throw an     exception.     The property will always reflect the physical item's     existence.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoFullName">
            <summary>Gets the full name of the item.</summary>
            <remarks>    The fullname consists of the item's name,     fully-qualified, with a path. For example:     "folder\file.zip".     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoLastAccessDateTime">
            <summary>Gets or sets the last access date and time of the item.</summary>
            <remarks>    When changing the item's access date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoLastWriteDateTime">
            <summary>Gets or sets the modification date and time of the item.</summary>
            <remarks>    When changing the item's modification date through this     property, the physical item is immediately modified if it     exists. If it does not exist, the date is cached and will be     applied whenever this item is created.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoName">
            <summary>Gets or sets the filename, without path, of the item.</summary>
            <remarks>    When assigning a new name to this property, the physical     item is immediately renamed if it exists. If it does not exist,     the new name is cached and will be applied whenever this item     is created. In either cases, if a physical item with the same     name already exists, an exception is thrown.     The name of an item must not end with a path     separator character regardless of whether it represents a file     or a folder.     The separator character is defined in     DirectorySeparatorChar and AltDirectorySeparatorChar.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoParentFolder">
            <summary>Gets a reference to the parent folder of this item.</summary>
            <remarks>    If the current item is the root of a folder hierarchy, it     has no parent folder. In this case, the     ParentFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoRootFolder">
            <summary>Gets a reference to the root folder of this item.</summary>
            <remarks>    A root folder represents the starting point of a folder     hierarchy.     If the current item is the root of a folder hierarchy,     the RootFolder property returns a reference to     itself.     If a root folder is not available, the     RootFolder property returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoSize">
            <summary>Gets the size of the file in bytes.</summary>
            <remarks>    Some types of files may not have the size information     available. In this case, -1 is returned.     If the file does not physically exist, an exception is     thrown.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.ByteProgressionEventHandler">
            <summary>Represents the method that will handle the ByteProgression event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ByteProgressionEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionEventHandler">
            <summary>Represents the method that will handle the ItemException event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An ItemExceptionEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemProgressionEventHandler">
            <summary>Represents the method that will handle the ItemProgression event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An ItemProgressionEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ScanningFolderEventHandler">
            <summary>Represents the method that will handle the ScanningFolder event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ScanningFolderEventArgs that contains the event data.</param>
        </member>
    </members>
</doc>
