<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Schedule.2</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1Schedule.UI.WeekEndDisplay">
            <summary>
            Determines the style which is used for displayng weekends.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.WeekEndDisplay.Bold">
            <summary>
            Display weekends in a bold font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.WeekEndDisplay.Trail">
            <summary>
            Display weekends as trail days.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.WeekEndDisplay.Normal">
            <summary>
            Display weekends as working days.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.WeekEndDisplay.Invisible">
            <summary>
            Hide weekends.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.SelectionCommand">
            <summary>
            Determines the type of selection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.CalendarElement">
            <summary>
            Panel which contains some month elements. Alignes months according to the
            current size of available space, adds or removes months if it is necessary.
            </summary>
        </member>
        <member name="T:C1.Framework.BasePanel">
            <summary>
            Base class for all <see cref="T:C1.Framework.Element"/> object that contain child elements.
            </summary>
            <remarks>
            <para>This class extends <see cref="T:C1.Framework.Element"/> and implements the <see cref="P:C1.Framework.BasePanel.Children"/> property.</para>
            <para>This class acts like a static canvas. It has no layout logic other than sizing itself to fit its children.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.#ctor(C1.Framework.Style)">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.Element.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Focus">
            <summary>
            Sets the focus to the host control and to this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <returns>True if the focus was set successfully.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element)">
            <summary>
            Gets or sets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position within its parent.</returns>
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this element by the specified amount.
            </summary>
            <param name="x">Offset in the horizontal direction.</param>
            <param name="y">Offset in the vertical direction.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean,System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
            <param name="layoutOnly">Whether ContentElements (e.g. Text, Images) also need to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Clone">
            <summary>
            Returns a clone of this element.
            </summary>
            <returns>A clone of this element</returns>
        </member>
        <member name="M:C1.Framework.Element.Layout(System.Drawing.Graphics)">
            <summary>
            Lays out this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="M:C1.Framework.Element.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.Element.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Render this element's content (no children). 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle to render into.</param>
        </member>
        <member name="M:C1.Framework.Element.HitTest(System.Drawing.Point)">
            <summary>
            Returns the element at a given point.
            </summary>
            <param name="pt">Point to check.</param>
            <returns>The element at the point.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetParentOfType(System.Type)">
            <summary>
            Navigates up the tree to find an ancestor of a given type.
            </summary>
            <param name="type">Type of element we're looking for.</param>
            <returns>A reference to the ancestor of the given type, null if not found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetScrollOrigin">
            <summary>
            Returns the scroll origin (override to implement non-scrolling areas).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Element.IsChildOf(C1.Framework.Element)">
            <summary>
            Determines whether this element is a child of another element.
            </summary>
            <param name="parent">Parent element to investigate.</param>
            <returns>True if <paramref name="parent"/> contains this element.</returns>
        </member>
        <member name="M:C1.Framework.Element.Invalidate(System.Boolean)">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <param name="update">Whether to repaint the host control immediately after invalidation.</param>
        </member>
        <member name="M:C1.Framework.Element.Invalidate">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnter(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnterHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeaveHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the mouse moves over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnClick(System.EventArgs)">
            <summary>
            Called by the host control when the user clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnDoubleClick(System.EventArgs)">
            <summary>
            Called by the host control when the user double-clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> receives the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user presses a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called by the host control when the user presses a character key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnStateChanged(C1.Framework.Element.ElementFlags)">
            <summary>
            Called by the host control when the state of this <see cref="T:C1.Framework.Element"/> changes.
            </summary>
            <param name="oldFlags"><see cref="T:C1.Framework.Element.ElementFlags"/> that contains the state before the change.</param>
            <remarks>
            The state of an element is represented by a combination of <see cref="T:C1.Framework.Element.ElementFlags"/> values.
            Each individual flag is represented by a specific property, including <see cref="P:C1.Framework.Element.Visible"/>, <see cref="P:C1.Framework.Element.Enabled"/>,
            etc.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.GetImageResource(System.String)">
            <summary>
            Gets an <see cref="T:System.Drawing.Image"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the image.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBitmapResource(System.String)">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the bitmap.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.FindMnemonic(C1.Framework.Element,System.Char)">
            <summary>
            Finds the <see cref="T:C1.Framework.Element"/> that is represented by a given hot key.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to search (including all its children).</param>
            <param name="charCode">Hot key to search for.</param>
            <returns>The <see cref="T:C1.Framework.IMnemonicElement"/> that is represented by the given hot key.</returns>
        </member>
        <member name="P:C1.Framework.Element.Parent">
            <summary>
            Gets the element's parent, or null if this is the root element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Root">
            <summary>
            Gets the element's top-level parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Style">
            <summary>
            Gets or sets the Style object used to render this Element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.RenderStyle">
            <summary>
            Gets the element's style, or a default style if the element doesn't have one.
            This never returns null.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Visible">
            <summary>
            Gets or sets whether the element is visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsVisible">
            <summary>
            Gets whether this element and all its ancestors are visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Enabled">
            <summary>
            Gets or sets whether the element is enabled (can receive mouse and keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsEnabled">
            <summary>
            Gets whether this element and all its ancestors are enabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HitTestable">
            <summary>
            Gets or sets whether the element is hit-testable (receives mouse messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Focusable">
            <summary>
            Gets or sets whether the element is focusable (receives keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ShowFocusRectangle">
            <summary>
            Gets or sets whether the element should display a focus rectangle when it has focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Focused">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ContainsFocus">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Framework.Element"/> or one of its children has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsHot">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Hot style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsPressed">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Pressed style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Bounds">
            <summary>
            Gets or sets the element's bounds (size and location) within its parent element, in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Size">
            <summary>
            Gets or sets the size of the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ContentBounds">
            <summary>
            Content bounds within the parent element, in pixels.
            This discounts margins, borders, and padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Width">
            <summary>
            Element width. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Height">
            <summary>
            Element height. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Location">
            <summary>
            Gets or sets the location of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Left">
            <summary>
            Gets or sets the horizontal position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Top">
            <summary>
            Gets or sets the vertical position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsDirty">
            <summary>
            Gets a valut that indicates this element needs to be laid out.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.LineDescent">
            <summary>
            Gets the portion of the element that renders below the baseline.
            Usually non-zero only for text elements, depends on font.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.Element"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Children">
            <summary>
            Gets a list of child elements.
            </summary>
            <remarks>
            The base class always returns null; panel elements should be based on CanvasPanel.
            </remarks>
        </member>
        <member name="P:C1.Framework.Element.HasChildren">
            <summary>
            Gets a value that indicates the element has a non-empty Children collection.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HostControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosting this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.ElementFlags">
            <summary>
            Flags that represent the state of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Dirty">
            <summary>
            Element should be laid out before it is rendered.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Visible">
            <summary>
            Element is visible.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoWidth">
            <summary>
            The width of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoHeight">
            <summary>
            The height of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Enabled">
            <summary>
            The element is enabled and may receive mouse and keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.HitTestable">
            <summary>
            The element recognizes mouse messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Focusable">
            <summary>
            The element recognizes keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.ShowFocus">
            <summary>
            The element should display a focus rectangle when it has the focus.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Hot">
            <summary>
            The mouse is over the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Pressed">
            <summary>
            The mouse is over the element and the left button is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Isolated">
            <summary>
            The Hot state does not propagate automatically to the parent element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Horizontal">
            <summary>
            Flow child elements in the horizontal direction.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.LineBreak">
            <summary>
            Flags that represent the line-breaking behavior caused by an element when it is contained
            in a paragraph.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.None">
            <summary>
            The element does not cause line breaks.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.Before">
            <summary>
            Insert line breaks before the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.After">
            <summary>
            Insert line breaks after the element.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/> with a given <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> object used to measure and render this <see cref="T:C1.Framework.BasePanel"/>.</param>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="P:C1.Framework.BasePanel.Children">
            <summary>
            Gets or sets the list of child elements contained in this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.Dimensions">
            <summary>
            Gets or sets maximum number of months (from 1 to 12)
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.Theme">
            <summary>
            Gets or sets current theme
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.CurrentMonth">
            <summary>
            Gets or sets current month
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.SelectedDate">
            <summary>
            Gets or sets selected date
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.SelectedDates">
            <summary>
            Gets or sets an array of selected dates
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.MaxSelectionCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.BoldedDates">
            <summary>
            Gets or sets an array of bolded dates
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.ShowHeader">
            <summary>
            Determines whether to show month header or no
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarElement.ShowButtons">
            <summary>
            Determines whether to show navigation buttons or no
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.MonthElement">
            <summary>
            GridPanel which represents single month
            </summary>
        </member>
        <member name="T:C1.Framework.GridPanel">
            <summary>
            Inherits from BasePanel and provides a grid with rows and columns.
            At each intersection there is a cell object that contains an element.
            Cells may span rows and columns.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.MonthElement.GetStyle(C1.Win.C1Schedule.UI.CalendarDayElement)">
            <summary>
            Returns correct style object for specified day.
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.MonthElement.First">
            <summary>
            Set to true to show trailing dates in the beginning.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.MonthElement.Last">
            <summary>
            Set to true to show trailing dates in the end.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.BrowseButton">
            <summary>
            BrowseButton
            </summary>
        </member>
        <member name="T:C1.Framework.RepeatButtonElement">
            <summary>
            Repeat button (fires repeatedly, like scrollbars).
            </summary>
        </member>
        <member name="T:C1.Framework.ButtonElement">
            <summary>
            Simple button with text and image.
            </summary>
        </member>
        <member name="T:C1.Framework.StackPanel">
            <summary>
            <para>Panel that stacks children horizontally or vertically.</para>
            </summary>
        </member>
        <member name="P:C1.Framework.IToolTipElement.ToolTip">
            <summary>
            Gets the text that should be displayed in a tooltip when the mouse hovers over the <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.WeekNumberElement">
            <summary>
            Represents week number
            </summary>
        </member>
        <member name="T:C1.Framework.ValueElement">
            <summary>
            <para>Element that displays a simple value (numbers, dates, etc).</para>
            
            <para>The element's <see cref="T:C1.Framework.Style"/> is responsible for formatting the value 
            (with <see cref="T:System.IFormattable"/>).</para>
            </summary>
        </member>
        <member name="T:C1.Framework.ContentElement">
            <summary>
            <para>Abstract class for elements that display text or images.</para>
            
            <para>Derived classes should override <see cref="M:C1.Framework.ContentElement.GetValue"/> method to 
            provide the content (text, images, formatted values).</para>
            
            <para>This class does not have child elements.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor(C1.Framework.Style)">
            <summary>
            Creates a new instance of a ContentElement.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor">
            <summary>
            Creates a new instance of a ContentElement.
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.GetValue">
            <summary>
            Gets the value represented by this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>Object to be rendered as this element's content.</returns>
            <remarks>
            The value is an object that the <see cref="T:C1.Framework.Style"/> class can measure and render, usually a string,
            an <see cref="T:System.Drawing.Image"/>, or an <see cref="T:System.IFormattable"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.ContentElement.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element contents into the specified <see cref="T:System.Drawing.Graphics"/> object at the specified location.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the <see cref="T:C1.Framework.Element"/> will be rendered.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> where the <see cref="T:C1.Framework.Element"/> contents will be rendered.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.ToString">
            <summary>
            Gets a string representation of this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>A string representation of this <see cref="T:C1.Framework.ContentElement"/>.</returns>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.CalendarDayElement">
            <summary>
            Represents single day
            </summary>
        </member>
        <member name="T:C1.C1Schedule.C1ScheduleStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.C1ScheduleStorage"/> implements all data operations for the 
            C1Schedule control. It does all the background work required by 
            the scheduling application. It contains specific data storages for appointments, 
            resources, contacts, labels and statuses, which are intended for binding different 
            schedule views and collections to the data. 
            Also it implements data export and import to other scheduling applications and formats.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.System#IServiceProvider#GetService(System.Type)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Clear">
            <summary>
            Clears all unbound storages. Loads default sets if any for unbound storages. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.String,C1.C1Schedule.FileFormatEnum)">
            <summary>
            Exports the scheduler's data to a file in the specified format. 
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the full path 
            (including the file name and extension) to export the scheduler's data to. </param>
            <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.IO.Stream,C1.C1Schedule.FileFormatEnum)">
            <summary>
            Exports the scheduler's data to a stream in the specified format. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the scheduler's data will be exported.</param>
            <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.String,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.FileFormatEnum)">
            <summary>
            Exports the appointments' data to a file in the specified format. 
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the full path 
            (including the file name and extension) to export. </param>
            <param name="appointments"><see cref="T:System.Collections.Generic.IList`1"/> to be exported.</param>
            <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.IO.Stream,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.FileFormatEnum)">
            <summary>
            Exports the appointments' data to a stream in the specified format. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the appointments's data will be exported.</param>
            <param name="appointments"><see cref="T:System.Collections.Generic.IList`1"/> to be exported.</param>
            <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Import(System.String,C1.C1Schedule.FileFormatEnum)">
            <summary>
            Imports data into the scheduler from a file of the specified format.
            </summary>
            <param name="path">A <see cref="T:System.String"/> value containing the full path 
            (including the file name and extension) to a file which contains 
            the data to be imported into the scheduler.</param>
            <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Import(System.IO.Stream,C1.C1Schedule.FileFormatEnum)">
            <summary>
            Imports the scheduler's data from a stream whose data is in the specified format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
            <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum"/> value.</param>
        </member>
        <member name="F:C1.C1Schedule.C1ScheduleStorage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleStorage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.C1ScheduleStorage.AppointmentsLoaded">
            <summary>
            Occurs when appointments were loaded from the file.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.C1ScheduleStorage.SystemTimeChanged">
            <summary>
            Occurs when system time has been changed.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.System#ComponentModel#ISite#Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.System#ComponentModel#ISite#Container">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.DesignMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.System#ComponentModel#ISite#Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.AppointmentStorage">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.AppointmentStorage"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.LabelStorage">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.LabelStorage"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.ResourceStorage">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ResourceStorage"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.StatusStorage">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.StatusStorage"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.CategoryStorage">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.CategoryStorage"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1ScheduleStorage.Reminders">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ReminderCollection"/> object. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.RecurrenceStateEnum">
            <summary>
            Determines the type of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceStateEnum.NotRecurring">
            <summary>
            Represents a standard (non-recurring) appointment. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceStateEnum.Master">
            <summary>
            Represents the appointment which serves as the pattern 
            for the other recurring appointments. 
            The pattern for recurring appointments is specified via 
            the Appointment.Recurrence property.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceStateEnum.Occurrence">
            <summary>
            Represents one of recurring appointments whose pattern appointment 
            is specified via the Appointment.Recurrence property.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceStateEnum.Exception">
            <summary>
            Represents a recurring appointment, which was changed 
            and now doesn't satisfy the pattern of the recurring series.  
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceStateEnum.Removed">
            <summary>
            Represents a recurring appointment, which was deleted
            and now doesn't satisfy the pattern of the recurring series.  
            </summary>
        </member>
        <member name="T:C1.C1Schedule.ImportanceEnum">
            <summary>
            Determines the importance of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.ImportanceEnum.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:C1.C1Schedule.ImportanceEnum.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:C1.C1Schedule.ImportanceEnum.High">
            <summary>
            High
            </summary>
        </member>
        <member name="T:C1.C1Schedule.SensitivityEnum">
            <summary>
            Determines the sensitivity of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SensitivityEnum.Confidential">
            <summary>
            Confidential
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SensitivityEnum.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SensitivityEnum.Personal">
            <summary>
            Personal
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SensitivityEnum.Private">
            <summary>
            Private
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Appointment">
            <summary>
            The <see cref="T:C1.C1Schedule.Appointment"/> object is a meeting, a one-time appointment, 
            or a recurring appointment or meeting in the C1Schedule. 
            The <see cref="T:C1.C1Schedule.Appointment"/> class includes properties 
            that specify meeting details such as the location and time.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BasePersistableObject">
            <summary>
            The <see cref="T:C1.C1Schedule.BasePersistableObject"/> is a base class for persistable objects.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.OnPropertyChanged(System.String)">
            <summary>
            Overrides the default behaviour.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.#ctor">
            <summary>
            Creates new BasePersistableObject object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A method called when serializing.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.BeginEdit">
            <summary>
            Brings the object in edit mode.
            </summary>
            <remarks>
            A corresponding item from a data source will not be updated on this object's
            property changes while the object is in edit mode. Data synchronization will
            be performed when the <see cref="M:C1.C1Schedule.BasePersistableObject.EndEdit"/> method will be called.
            </remarks>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.EndEdit">
            <summary>
            Finishes edit mode started by the <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit"/> method and
            updates a corresponding data source item.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.EndEdit(System.Boolean)">
            <summary>
            
            </summary>
            <param name="canRaiseChangeNotification"></param>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit"/> call.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.SetBaseSourceItemMap(C1.C1Schedule.ItemsMapTableRow)">
            <summary>
            WARNING: don't call this method! This a special method that must be called
            from the BaseStorage.SetCollectionItemBaseItem method only!
            </summary>
            <param name="sourceItemMap"></param>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.Xml.XmlNode)">
            <summary>
            Loads an object from the specified<see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"></param>
            <returns>Returns true if object has been changed.</returns>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.ToXml(System.Xml.XmlWriter)">
            <summary>
            Saves an object into specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.IO.Stream)">
            <summary>
            Loads an object from the specified<see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"></param>
            <returns>Returns true if object has been changed.</returns>
        </member>
        <member name="M:C1.C1Schedule.BasePersistableObject.ToXml(System.IO.Stream)">
            <summary>
            Saves an object into specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:C1.C1Schedule.BasePersistableObject.Id">
            <summary>
            Unique value for serialization purposes.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BasePersistableObject.Index">
            <summary>
            User can specify mapping either for Id property or for Index property
            (depending on his database structure or object model).
            In unbound mode or if user doesn't specify mapping for any of these properties,
            Index will contain index of the object in containing collection.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BasePersistableObject.IsEdit">
            <summary>
            Indicates whether the object is in edit mode started with the 
            <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit"/> method.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BasePersistableObject.BaseSourceItemMap">
            <summary>
            Keeps a reference to a data source item that this object is based on.
            A null value means that there is no base source item.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Appointment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment"/> class.
            </summary>
            <remarks>Creates an appointment with default properties.</remarks>
        </member>
        <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment"/> 
            class with the specified parameters.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="end">The <see cref="T:System.DateTime"/> value which specifies 
            the end date and time of the appointment.</param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment"/> 
            class with the specified parameters.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="duration">The <see cref="T:System.TimeSpan"/> value which specifies 
            the duration of the appointment.</param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment"/> 
            class with the specified parameters.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="end">The <see cref="T:System.DateTime"/> value which specifies 
            the end date and time of the appointment.</param>
            <param name="subject">The <see cref="T:System.String"/> value wich contains 
            the subject of the appointment.</param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment"/> 
            class with the specified parameters.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="duration">The <see cref="T:System.TimeSpan"/> value which specifies 
            the duration of the appointment.</param>
            <param name="subject">The <see cref="T:System.String"/> value wich contains 
            the subject of the appointment.</param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.BeginEdit">
            <summary>
            Prevents the <see cref="T:C1.C1Schedule.Appointment"/> object from being updated until 
            the <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)"/> method is called.
            </summary>
            <remarks>The <see cref="M:C1.C1Schedule.Appointment.BeginEdit"/> and <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)"/> methods 
            are designed to implement batch modifications. 
            This allows you to prevent generation of change notifications
            when changing multiple settings at the same time. 
            To do this enclose the code that changes the properties in calls to these methods.
            Each call to <see cref="M:C1.C1Schedule.Appointment.BeginEdit"/> must be paired with a call to <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)"/>. 
            To ensure that <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)"/> is always called even if an exception occurs, 
            wrap any calls to these methods in a try...finally statement.</remarks>
        </member>
        <member name="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)">
            <summary>
            Unlocks the <see cref="T:C1.C1Schedule.Appointment"/> object after a call 
            to the <see cref="M:C1.C1Schedule.Appointment.BeginEdit"/> method and causes an immediate update. 
            </summary>
            <param name="canRaiseChangeNotification"></param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.ClearRecurrencePattern">
            <summary>
            Removes the recurrence settings and restores 
            the <see cref="F:C1.C1Schedule.RecurrenceStateEnum.NotRecurring"/> state for an appointment.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Appointment.GetRecurrencePattern">
            <summary>
            Returns the <see cref="T:C1.C1Schedule.RecurrencePattern"/> object that represents 
            the recurrence attributes of an appointment. 
            If there is no existing recurrence pattern, a new 
            empty <see cref="T:C1.C1Schedule.RecurrencePattern"/> object is returned.
            </summary>
            <returns>The <see cref="T:C1.C1Schedule.RecurrencePattern"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.Appointment.Copy">
            <summary>
            Creates the copy of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
            <returns>The new <see cref="T:C1.C1Schedule.Appointment"/> instance.</returns>
        </member>
        <member name="M:C1.C1Schedule.Appointment.CopyFrom(C1.C1Schedule.Appointment,System.Boolean)">
             <summary>
             Copies properties from the specified <see cref="T:C1.C1Schedule.Appointment"/> object to this one. 
             </summary>
             <param name="app">The <see cref="T:C1.C1Schedule.Appointment"/> instance to copy.</param>
             <param name="includeKeys">Specifies whether to copy internal keys.</param>
            <remarks><para>Set includeKeys to true if you want to receive exact copy 
            of the specified <see cref="T:C1.C1Schedule.Appointment"/> object.</para>
            <para>Set includeKeys to false in order to copy only descriptive <see cref="T:C1.C1Schedule.Appointment"/> 
            properties to other <see cref="T:C1.C1Schedule.Appointment"/> object (for example, 
            if you want to duplicate appointment from one day to another).</para></remarks>
        </member>
        <member name="M:C1.C1Schedule.Appointment.Delete">
            <summary>
            Deletes an appointment and removes it from 
            the owning <see cref="T:C1.C1Schedule.AppointmentCollection"/> collection.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Appointment.GetTimeTillEvent">
            <summary>
            Returns a time term before the appointment start, a negative value means that 
            appointment is expired.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.Appointment.SaveAs(System.String,C1.C1Schedule.FileFormatEnum)">
            <summary>
            Saves the appointment to the specified path in the format 
            of the specified file format. 
            </summary>
            <param name="path">Required string. The path in which to save the item.</param>
            <param name="fileFormat">The <see cref="T:C1.C1Schedule.FileFormatEnum"/>value indicating the file format to save.</param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.FromXml(System.Xml.XmlNode)">
            <summary>
            Reconstructs appointment from an <see cref="T:System.Xml.XmlNode"/>. 
            </summary>
            <param name="node"></param>
            <returns>True if appointment has been changed.</returns>
        </member>
        <member name="M:C1.C1Schedule.Appointment.ToXml(System.Xml.XmlWriter)">
            <summary>
            Creates an XML encoding of the appointment. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.PropsFromXml(System.Xml.XmlNode)">
            <summary>
            Reconstructs appointment propreties from an <see cref="T:System.Xml.XmlNode"/>. 
            </summary>
            <param name="node"></param>
            <returns>True if appointment has been changed.</returns>
        </member>
        <member name="M:C1.C1Schedule.Appointment.PropsToXml(System.Xml.XmlWriter)">
            <summary>
            Creates an XML encoding of the appointment properties. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.C1Schedule.Appointment.OnPropertyChanged(System.String)">
            <summary>
            Overrides default behaviour.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ParentCollection">
            <summary>
            Gets the reference to the parent <see cref="T:C1.C1Schedule.AppointmentCollection"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Subject">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value 
            representing the subject of the <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Body">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value representing 
            the body of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Action">
            <summary>
            Gets an <see cref="P:C1.C1Schedule.Appointment.Action"/> object for the <see cref="T:C1.C1Schedule.Appointment"/> object.
            Once this property is first requested, a new <see cref="P:C1.C1Schedule.Appointment.Action"/> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Action"/> property.
            </summary>
            <remarks>The <see cref="P:C1.C1Schedule.Appointment.Action"/> object contains information regarding 
            the type of action to perform as well as the command 
            and parameters to pass to the action.
            If the action object is enabled, the action will be invoked 
            when the start date and time of the owning <see cref="T:C1.C1Schedule.Appointment"/> object has occurred.
            </remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Conflicts">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList"/> object representing 
            the list of <see cref="T:C1.C1Schedule.Appointment"/> objects which are in conflict 
            with this particular appointment.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.AutoResolvedWinner">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value determining if the item is 
            a winner of an automatic conflict resolution.
            </summary>
            <remarks>A value of false does not necessarily indicate that the item is 
            a loser of an automatic conflict resolution. 
            The item should be in conflict with another item.
            If an item has its Conflicts.Count property greater than zero 
            and if its <see cref="P:C1.C1Schedule.Appointment.AutoResolvedWinner"/> property is true, 
            it is a winner of an automatic conflict resolution. 
            On the other hand, if the item is in conflict and has its 
            <see cref="P:C1.C1Schedule.Appointment.AutoResolvedWinner"/> property as false, 
            it is a loser in an automatic conflict resolution.</remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Start">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value determining the 
            start date and time of the appointment. 
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent"/> property is set to true, 
            then the start date of the appointment is the <see cref="P:System.DateTime.Date"/> of 
            the <see cref="P:C1.C1Schedule.Appointment.Start"/>, and the start time of the appointment is 0:00.</para>
            <para>At setting this property, if it's time is not equal 0:00, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent"/> property will be set to false.</para></remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.End">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value determining 
            the end date and time of the appointment. 
            </summary>
            <remarks> <para>The <see cref="P:C1.C1Schedule.Appointment.End"/> property is usually specified 
            by the <see cref="P:C1.C1Schedule.Appointment.Start"/> and <see cref="P:C1.C1Schedule.Appointment.Duration"/> properties, 
            and is always calculated as <see cref="P:C1.C1Schedule.Appointment.End"/> = <see cref="P:C1.C1Schedule.Appointment.Start"/> + <see cref="P:C1.C1Schedule.Appointment.Duration"/>. 
            When setting the <see cref="P:C1.C1Schedule.Appointment.End"/> property, the <see cref="P:C1.C1Schedule.Appointment.Start"/> property 
            retains its value, and the <see cref="P:C1.C1Schedule.Appointment.Duration"/> is changed according 
            to the new value of the <see cref="P:C1.C1Schedule.Appointment.End"/> property. 
            If the new <see cref="P:C1.C1Schedule.Appointment.End"/> property's value is less than 
            the <see cref="P:C1.C1Schedule.Appointment.Start"/> property's value, then an exception will be raised.</para>
            <para>At setting this property, if it's time is not equal 0:00, 
            or value is equal to the value of <see cref="P:C1.C1Schedule.Appointment.Start"/> property, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent"/> property will be set to false.</para></remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.IsOneDay">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating either it is 
            a one day appointment or shares some days.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Duration">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> value indicating the 
            duration of the appointment.
            </summary>
            <remarks>At setting this property, if it's value is not equal to the whole 
            number of days, the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent"/> property will be set to false.</remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Location">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value specifying 
            where the appointment is going to be.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Importance">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.ImportanceEnum"/> value indicating 
            the relative importance level for the appointment.
            Default value is <see cref="F:C1.C1Schedule.ImportanceEnum.Normal"/>.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.AllDayEvent">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating 
            if the current appointment is an All-day appointment.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Reminder">
            <summary>
            Gets the <see cref="P:C1.C1Schedule.Appointment.Reminder"/> object which is associated with the appointment.
            To associate an appointment with the reminder, set its 
            <see cref="P:C1.C1Schedule.Appointment.ReminderSet"/> property to true. 
            Once this property is set to true, a new <see cref="P:C1.C1Schedule.Appointment.Reminder"/> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Reminder"/> property.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ReminderSet">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating whether 
            a reminder is associated with the appointment. 
            Once this property is set to true, a new <see cref="P:C1.C1Schedule.Appointment.Reminder"/> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Reminder"/> property.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> value indicating the 
            interval of time the reminder should occur 
            prior to the start of the appointment. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ReminderOverrideDefault">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating if the associated
            <see cref="P:C1.C1Schedule.Appointment.Reminder"/> object has non-default settings.
            True if the reminder overrides the default reminder behavior for the appointment.
            You must set the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault"/> property to validate 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound"/> and 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderSoundFile"/> properties.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ReminderPlaySound">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating if the reminder 
            should play a sound when it occurs for this appointment or task. 
            The <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound"/> property must be set in order to validate 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderSoundFile"/> property. 
            This property is only valid if the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault"/> property 
            is set to true.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ReminderSoundFile">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value indicating the path and file name 
            of the sound file to play when the reminder occurs for the appointment. 
            This property is only valid if the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault"/> and 
            <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound"/> properties are set to true.
            </summary>
            <remarks>The default sound is <see cref="P:System.Media.SystemSounds.Exclamation"/>.</remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.IsRecurring">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value indicating if the appointment is recurring.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.ParentRecurrence">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.Appointment"/> object that defines the recurrence 
            criteria for this <see cref="T:C1.C1Schedule.Appointment"/> object. 
            If this appointment is a not member of a recurrence, 
            or is itself a root appointment, null is returned. 
            </summary>
            <remarks>If an appointment is recurring (see the <see cref="P:C1.C1Schedule.Appointment.IsRecurring"/> property) 
            it represents an occurrence in the series that is started and defined 
            by a specific pattern appointment. 
            Use the <see cref="P:C1.C1Schedule.Appointment.ParentRecurrence"/> property to obtain the pattern 
            of the current appointment. A pattern appointment can be recognized by its 
            <see cref="P:C1.C1Schedule.Appointment.RecurrenceState"/> property set 
            to the <see cref="F:C1.C1Schedule.RecurrenceStateEnum.Master"/> value. 
            The recurrence information defined by the pattern appointment can be accessed 
            via the <see cref="T:C1.C1Schedule.RecurrencePattern"/> property of the appointment. 
            </remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.RecurrenceState">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.RecurrenceStateEnum"/> value indicating 
            the recurrence state of the appointment. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Tag">
            <summary>
            Gets or sets custom information associated with this object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Label">
            <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.Appointment.Label"/> object associated with this appointment.
            </summary>
            <remarks>Labels may be associated with an appointment 
            to effectively group appointments. </remarks>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Resources">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceList"/> object which holds the set of 
            <see cref="T:C1.C1Schedule.Resource"/> objects for this appointment.
            An appointment may be associated with multiple resources.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Links">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactList"/> object which holds the set 
            of <see cref="T:C1.C1Schedule.Contact"/> objects for this appointment.
            An appointment may be associated with multiple contacts.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.BusyStatus">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.Status"/> object indicating the busy status 
            of the user for the appointment.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Categories">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryList"/> object which holds the set 
            of categories assigned to the appointment.
            Categories may be associated with an appointment to effectively group appointments. 
            An appointment may be associated with multiple categories.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Saved">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value indicating if the appointment 
            has not been modified since the last save.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Sensitivity">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.SensitivityEnum"/> value indicating 
            the sensitivity level of the appointment. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Appointment.Private">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining 
            whether the calendar owner intend to keep the <see cref="T:C1.C1Schedule.Appointment"/>
            object private.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.BaseFloatieForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BaseFloatieForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BaseFloatieForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.BaseThemeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.BaseThemeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.BaseThemeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.ScheduleThemeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ScheduleThemeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ScheduleThemeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.CalendarThemeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.CalendarThemeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.CalendarThemeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.CalendarSettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.CalendarSettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.CalendarSettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Design.IconPicker">
            <summary>
            IconPicker
            Uses the Image UITypeEditor to show a form where users can pick icons
            </summary>
        </member>
        <member name="T:C1.Util.Design.UITypeEditorControl">
            <summary>
            UITypeEditorControl
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.ScheduleBehaviorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ScheduleBehaviorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ScheduleBehaviorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Design.ColorPicker">
            <summary>
            ColorPicker
            Uses the Color UITypeEditor to show a form where users can pick colors
            </summary>
        </member>
        <member name="T:C1.Util.Design.FileNamePicker">
            <summary>
            FileNamePicker
            Uses the FileName UITypeEditor to show a form where users can pick filenames
            </summary>
        </member>
        <member name="T:C1.Util.Design.ImagePicker">
            <summary>
            ImagePicker
            Uses the Image UITypeEditor to show a form where users can pick images
            </summary>
        </member>
        <member name="T:C1.Util.Design.FontPicker">
            <summary>
            FontPicker
            Uses the Font UITypeEditor to show a form where users can pick fonts
            </summary>
        </member>
        <member name="T:C1.Util.Design.DockPicker">
            <summary>
            DockPicker
            Uses the Dock UITypeEditor to show a form where users can pick Dock settings
            </summary>
        </member>
        <member name="T:C1.Util.Design.AnchorPicker">
            <summary>
            AnchorPicker
            Uses the Anchor UITypeEditor to show a form where users can Anchor settings
            </summary>
        </member>
        <member name="T:C1.Util.Design.ExternalEditorWrapper">
            <summary>
            ExternalEditorWrapper
            Wraps an external UITypeEditor.
            </summary>
        </member>
        <member name="T:C1.Util.Design.CollectionEditorControl">
            <summary>
            FontPicker
            Uses the Font UITypeEditor to show a form where users can pick fonts
            </summary>
        </member>
        <member name="T:C1.Framework.Thickness">
            <summary>
            Represents padding, border or margin information associated with a 
            user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Thickness"/> class 
            using a separate thickness size for each edge. 
            </summary>
            <param name="left">Thickness of the left edge, in pixels.</param>
            <param name="top">Thickness of the top edge, in pixels.</param>
            <param name="right">Thickness of the right edge, in pixels.</param>
            <param name="bottom">Thickness of the bottom edge, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Thickness"/> class 
            using a separate thickness size for vertical and horizontal edges.
            </summary>
            <param name="leftRight">Thickness of the left and right edges, in pixels.</param>
            <param name="topBottom">Thickness of the top and bottom edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Thickness"/> class 
            using the supplied thickness size for all edges.
            </summary>
            <param name="width">Thickness of all edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified values.
            </summary>
            <param name="width">The inflate size for vertical edges.</param>
            <param name="height">The inflate size for horizontal edges.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The inflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The deflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Thickness"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Equality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Inequality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are not equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Thickness"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="P:C1.Framework.Thickness.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Thickness"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Left">
            <summary>
            Gets or sets the thickness value for the left edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Top">
            <summary>
            Gets or sets the thickness value for the top edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Right">
            <summary>
            Gets or sets the thickness value for the right edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Bottom">
            <summary>
            Gets or sets the thickness value for the bottom edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Thickness"/> object is empty. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Height">
            <summary>
            Gets the combined thickness for the top and bottom edges. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Width">
            <summary>
            Gets the combined thickness for the right and left edges. 
            </summary>
        </member>
        <member name="T:C1.Framework.ThicknessConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Thickness"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ThicknessConverter"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Thickness"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="P:C1.Util.Design.Floaties.Util.InActiveApplication">
            <summary>
            Gets the value indicating whether the caller process owns
            the current foreground window.
            </summary>
        </member>
        <member name="M:C1.Win.LicensingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlFont">
            <summary>
            Class that represents HTML 'FONT' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlSpan">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Framework.Html.Css.ParseAttribute(System.Collections.Hashtable,System.String,System.String)">
            <summary>
            Adds a StyleAttribute to a table based on a name and value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.DraggablePanel">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.DockPanel">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.DayGrid">
            <summary>
            GridPanel used to show days and times
            </summary>
        </member>
        <member name="T:C1.Framework.ColumnPanel">
            <summary>
            <para>Panel that stacks children vertically.</para>
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BaseObject">
            <summary>
            The <see cref="T:C1.C1Schedule.BaseObject"/> is a base class for resources, labels, statuses, 
            categories and contacts. It implements base UI properties and persistence.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.#ctor">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject"/> object with default settings.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.#ctor(System.String)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject"/> object with specified text.
            </summary>
            <param name="text">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.#ctor(System.String,System.String)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject"/> object with specified text and menu caption.
            </summary>
            <param name="text">The <see cref="T:System.String"/> value.</param>
            <param name="menuCaption">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Drawing.Color,System.String,System.String)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject"/> object with specified color, 
            text and menu caption.
            </summary>
            <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color"/> value.</param>
            <param name="text">The <see cref="T:System.String"/> value.</param>
            <param name="menuCaption">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Drawing.Color,System.String,System.String,C1.C1Schedule.C1Brush)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject"/> object with specified parameters.
            </summary>
            <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color"/> value.</param>
            <param name="text">The <see cref="T:System.String"/> value.</param>
            <param name="menuCaption">The <see cref="T:System.String"/> value.</param>
            <param name="brush">The <see cref="P:C1.C1Schedule.BaseObject.Brush"/> object</param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.FromXml(System.Xml.XmlNode)">
            <summary>
            Loads an object from the specified<see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.ToXml(System.Xml.XmlWriter)">
            <summary>
            Saves an object into specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseObject.ToString">
            <summary>
            Overrides the default behaviour.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1Schedule.BaseObject.Color">
            <summary>
            Gets or sets the color of the user interface object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseObject.Text">
            <summary>
            Gets or sets the text which identifies a user interface object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseObject.MenuCaption">
            <summary>
            Gets or sets the menu caption for the user interface object;
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseObject.Brush">
            <summary>
            Gets or sets the brush used to fill the user interface object's image.
            </summary>
            <remarks>Supported persistance only for System.Drawing.Drawing2D.HatchBrush
            and System.Drawing.SolidBrush</remarks>
        </member>
        <member name="T:C1.C1Schedule.BaseCollection`1">
            <summary>
            The <see cref="T:C1.C1Schedule.BaseCollection`1"/> is a base generic class for all collections 
            in C1Schedule object model.
            </summary>
            <typeparam name="T">The type of the objects which will be stored in the collection.
            It shoud be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject"/> class
            and have the default parameterless constructor.</typeparam>
        </member>
        <member name="T:C1.C1Schedule.C1ObservableKeyedCollection`2">
            <summary>
            The <see cref="T:C1.C1Schedule.C1ObservableCollection`1"/> is the base class for all 
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> derived collections. Supports notification.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:C1.C1Schedule.INotifyCollectionChanged">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added 
            and removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableKeyedCollection`2"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableKeyedCollection`2"/> class.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <param name="dictionaryCreationThreshold"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.InsertItem(System.Int32,`1)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.SetItem(System.Int32,`1)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.OnCollectionChanged(C1.C1Schedule.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.BaseCollection`1"/> class.
            </summary>
            <param name="owner">The owning storage.</param>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.Add(`0)">
            <summary>
            Adds new custom object to the collection.
            If such item already exists in the collection, returns it's index.
            </summary>
            <returns>Just created custom object.</returns>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.Contains(System.Int32)">
            <summary>
            Check if collection contains an item with specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.RefreshIndices">
            <summary>
            Call this method after removing items from the unbound storage.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.AddRange(`0[])">
            <summary>
            Adds an array of objects to the collection.
            This methods clears collection before adding new items. 
            Don't use it if you want to keep previously existed items.
            </summary>
            <param name="items">An array of items.</param>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.AddRange(System.Object[])">
            <summary>
            Adds an array of objects to the collection.
            This methods clears collection before adding new items. 
            Don't use it if you want to keep previously existed items.
            </summary>
            <param name="items">An array of items.</param>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Overrides default behaviour of collection at inserting new items.
            If specified item already exists in the collection generates an exception.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.GetKeyForItem(`0)">
            <summary>
            Extracts the key from the specified element.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.BaseCollection`1.RemoveItem(System.Int32)">
            <summary>
            Overrides base class implementation.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:C1.C1Schedule.BaseCollection`1.OwnerInternal">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BaseList`1">
            <summary>
            The <see cref="T:C1.C1Schedule.BaseList`1"/> is a base generic class for all lists 
            in C1Schedule's object model.
            Only objects existing in the owning collection can be added to this list.
            </summary>
            <typeparam name="T">The type of the objects which will be stored in the list.
            It shoud be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject"/> class.</typeparam>
        </member>
        <member name="T:C1.C1Schedule.C1ObservableCollection`1">
            <summary>
            The <see cref="T:C1.C1Schedule.C1ObservableCollection`1"/> is the base class for all 
            <see cref="T:System.Collections.ObjectModel.Collection`1"/> derived collections. Supports notification.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableCollection`1"/> class.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.C1ObservableCollection`1.OnCollectionChanged(C1.C1Schedule.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:C1.C1Schedule.BaseList`1._owner">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseList`1.InsertItem(System.Int32,`0)">
            <summary>
            Overrides default behaviour of Collection.
            Prevents from adding items non-existent in the parent collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseList`1.SetItem(System.Int32,`0)">
            <summary>
            Overrides default behaviour of Collection.
            Prevents from adding items non-existent in the parent collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseList`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.QEditForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.QEditForm"/> represents the dialog form for selecting 
            the object for editing (occurrence or all pattern).
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.QEditForm.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:C1.Win.C1Schedule.Forms.QEditForm"/> form.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.QEditForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.QEditForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.QEditForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.DataForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.DataForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.DataForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.BaseMappingControl`2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.BaseMappingControl`2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.BaseMappingControl`2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.BaseObjectMappingControl`1.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.BaseObjectMappingControl`1.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.BaseObjectMappingControl`1.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.Design.BaseDesigner.C1#Util#Design#Floaties#IFloatieOwner#Position">
            <summary>
            Position of small button with arrow for showing main floatie
            </summary>
        </member>
        <member name="T:C1.C1Schedule.ContactStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.ContactStorage"/> is the storage for <see cref="T:C1.C1Schedule.Contact"/> objects.
            It allows binding to the data source and mapping data source fields 
            to the contact properties.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BaseStorage`2">
            <summary>
            The <see cref="T:C1.C1Schedule.BaseStorage`2"/> is the base generic component 
            for all storages in C1Schedule object model.
            Represents a storage of objects derived from <see cref="T:C1.C1Schedule.BasePersistableObject"/>.
            This component implements methods of operations over the collections of objects. 
            It allows the collection to be populated programmatically 
            or automatically by retrieving data from the data source which 
            is specified by the DataSource and DataMember properties. 
            It allows mapping of data source fields to the object properties.
            </summary>
            <typeparam name="T">The type of the objects which will be stored in the storage.
            It shoud be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject"/> class
            and have the default parameterless constructor.</typeparam>
            <typeparam name="TMappingCollection">The type of the collection which
            will be used for mapping. It should be derived from 
            the <see cref="T:C1.C1Schedule.MappingCollectionBase`1"/> class
            and have the default parameterless constructor.</typeparam>
        </member>
        <member name="T:C1.C1Schedule.C1BindingSource">
            <summary>
            The <see cref="T:C1.C1Schedule.C1BindingSource"/> encapsulates the data source. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1BindingSource"/> class. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1BindingSource"/> class
            with the specified data source and data member values.
            </summary>
            <param name="dataSource"></param>
            <param name="dataMember"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Add(System.Object)">
            <summary>
            Adds an existing item to the internal list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.AddNew">
            <summary>
            Adds a new item to the underlying list. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.FinishAddNew">
            <summary>
            Commits a pending new item to the collection. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.BeginEdit(System.Object)">
            <summary>
            Starts an edit operation on the specified object.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.EndEdit(System.Object)">
            <summary>
            Applies pending changes to the underlying data source.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sorts the data source with the specified sort description or descriptions.
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the data source using the specified property descriptor and sort direction.
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Clear">
            <summary>
            Removes all elements from the list. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Contains(System.Object)">
            <summary>
            Determines whether an object is an item in the list. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the <see cref="P:C1.C1Schedule.C1BindingSource.List"/> to the specified array, 
            starting at the specified index value. 
            </summary>
            <param name="arr"></param>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:C1.C1Schedule.C1BindingSource"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Searches for the index of the item that has the given property descriptor. 
            </summary>
            <param name="prop"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Find(System.String,System.Object)">
            <summary>
            Returns the index of the item in the list with the specified property name and value. 
            </summary>
            <param name="propertyName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.GetEnumerator">
            <summary>
            Retrieves an enumerator for the <see cref="P:C1.C1Schedule.C1BindingSource.List"/>. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Retrieves an array of PropertyDescriptor objects representing 
            the bindable properties of the data source list type.
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Gets the name of the list supplying data for the binding. 
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the index of the first 
            occurrence within the entire list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item into the list at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.OnDataMemberChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.OnDataSourceChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.Remove(System.Object)">
            <summary>
            Removes the specified item from the list. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in the list.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingListView#RemoveFilter">
            <summary>
            Removes the filter associated with the <see cref="T:C1.C1Schedule.C1BindingSource"/>.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingList#RemoveSort">
            <summary>
            Removes the sort associated with the <see cref="T:C1.C1Schedule.C1BindingSource"/>. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.ResetAllowNew">
            <summary>
            Reinitializes the <see cref="P:C1.C1Schedule.C1BindingSource.AllowNew"/> property. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.ResetBindings(System.Boolean)">
            <summary>
            Causes a control bound to the <see cref="T:C1.C1Schedule.C1BindingSource"/> to reread 
            all the items in the list and refresh their displayed values. 
            </summary>
            <param name="metadataChanged"></param>
        </member>
        <member name="M:C1.C1Schedule.C1BindingSource.ResetItem(System.Int32)">
            <summary>
            Causes a control bound to the <see cref="T:C1.C1Schedule.C1BindingSource"/> to reread 
            the item at the specified index, and refresh its displayed value. 
            </summary>
            <param name="itemIndex"></param>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.AllowEdit">
            <summary>
            Gets a value indicating whether items in the underlying list can be edited.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.AllowNew">
            <summary>
            Gets or sets a value indicating whether the <see cref="M:C1.C1Schedule.C1BindingSource.AddNew"/> method 
            can be used to add items to the list. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.AllowRemove">
            <summary>
            Gets a value indicating whether items can be removed from the underlying list. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.Count">
            <summary>
            Gets the total number of items in the underlying list.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.DataMember">
            <summary>
            Gets or sets the specific list in the data source to which 
            the connector currently binds to.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.DataSource">
            <summary>
            Gets or sets the data source that the connector binds to. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.Filter">
            <summary>
            Gets or sets the expression used to filter which rows are viewed. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.IsFixedSize">
            <summary>
            Gets a value indicating whether the underlying list has a fixed size. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.IsReadOnly">
            <summary>
            Gets a value indicating whether the underlying list is read-only.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingList#IsSorted">
            <summary>
            Gets a value indicating whether the items in the underlying list are sorted.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.Item(System.Int32)">
            <summary>
            Gets or sets the list element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.List">
            <summary>
            Gets the list that the connector is bound to. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.RaiseListChangedEvents">
            <summary>
            Gets or sets a value indicating whether <see cref="E:C1.C1Schedule.C1BindingSource.ListChanged"/> events should be raised. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.Sort">
            <summary>
            Gets or sets the column names used for sorting, and the sort order 
            for viewing the rows in the data source.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingListView#SortDescriptions">
            <summary>
            Gets the collection of sort descriptions applied to the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingList#SortDirection">
            <summary>
            Gets the direction the items in the list are sorted.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.System#ComponentModel#IBindingList#SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting the list. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.SupportsAdvancedSorting">
            <summary>
            Gets a value indicating whether the data source supports multi-column sorting. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.SupportsChangeNotification">
            <summary>
            Gets a value indicating whether the data source supports change notification.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.SupportsFiltering">
            <summary>
            Gets a value indicating whether the data source supports filtering.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.SupportsSearching">
            <summary>
            Gets a value indicating whether the data source supports searching with 
            the Find method. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.SupportsSorting">
            <summary>
            Gets a value indicating whether the data source supports sorting.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the underlying list. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1BindingSource.DataKeyNamesInternal">
            <summary>
            
            </summary>
        </member>
        <member name="E:C1.C1Schedule.C1BindingSource.AddingNew">
            <summary>
            Occurs before an item is added to the underlying list. 
            </summary>
        </member>
        <member name="E:C1.C1Schedule.C1BindingSource.DataMemberChanged">
            <summary>
            Occurs when the <see cref="P:C1.C1Schedule.C1BindingSource.DataMember"/> property value has changed.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.C1BindingSource.DataSourceChanged">
            <summary>
            Occurs when the <see cref="P:C1.C1Schedule.C1BindingSource.DataSource"/> property value has changed. 
            </summary>
        </member>
        <member name="E:C1.C1Schedule.C1BindingSource.ListChanged">
            <summary>
            Occurs when the underlying list changes or an item in the list changes.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.RefreshData">
            <summary>
            Call this method each time after changing your data source 
            if it doesn't implement <see cref="T:System.ComponentModel.IBindingList"/> interface.
            Or use BaseStorage{T, TMappingCollection}.Add 
            and BaseStorage{T, TMappingCollection}.Remove 
            instead of corresponding methods of your data source class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.ShouldSerializeMappings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.System#IServiceProvider#GetService(System.Type)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Translates changes in the internal list to the Objects collection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.Remove(System.Object)">
            <summary>
            Removes object from the Objects collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.OnDataSourceItemSynchronized(C1.C1Schedule.ItemSynchronizedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.C1Schedule.BaseStorage`2.DataSourceItemSynchronized"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.SetCollectionItemBaseItem(C1.C1Schedule.BasePersistableObject,System.Object,C1.C1Schedule.ItemsMapTableRow)">
            <summary>
            Updates ItemsMap and BasePersistableObject.BaseSourceItemMap.
            <paramref name="mapRow"/> should be specified if it's known (for 
            performance purposes), if it's null then the one will be determined
            by <paramref name="sourceItem"/>
            </summary>
            <param name="collectionItem"></param>
            <param name="sourceItem"></param>
            <param name="mapRow"></param>
        </member>
        <member name="M:C1.C1Schedule.BaseStorage`2.IsSynchronizable(C1.C1Schedule.BasePersistableObject)">
            <summary>
            Indicates whether the specified collection item should be synchronized.
            </summary>
            <param name="collectionItem"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.BoundMode">
            <summary>
            Gets a value indicating if the collection is bound to data. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.Mappings">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.MappingCollectionBase`1"/> derived object 
            that allows the properties of objects maintained by the current collection 
            to be bound to the appropriate fields in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.ScheduleStorage">
            <summary>
            Gets the reference to the owning <see cref="T:C1.C1Schedule.C1ScheduleStorage"/> component.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.System#ComponentModel#ISite#Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.System#ComponentModel#ISite#Container">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.System#ComponentModel#ISite#DesignMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.System#ComponentModel#ISite#Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseStorage`2.DataKeyNamesInternal">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.ContactStorage.Contacts">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactCollection"/> object that contains 
            contact related information. 
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumn">
            <summary>
            Keeps track of column widths and positions
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumnCollection">
            <summary>
            GridColumn collection. Just an ElementList typed to get and set GridColumn objects.
            </summary>
        </member>
        <member name="T:C1.Framework.ElementList">
            <summary>
            Contains a list of Elements that belong to a parent element.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of all <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts the location of some <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
            <param name="first">Index of the first <see cref="T:C1.Framework.Element"/> to be offset.</param>
            <param name="count">Number of elements to offset.</param>
        </member>
        <member name="M:C1.Framework.ElementList.OnListChanged">
            <summary>
            Called when elements are added or removed from the list.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Add(System.Object)">
            <summary>
            Adds an <see cref="T:C1.Framework.Element"/> to the list.
            </summary>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
            <returns>The index of the new object in the list.</returns>
        </member>
        <member name="M:C1.Framework.ElementList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an <see cref="T:C1.Framework.Element"/> at a specified index.
            </summary>
            <param name="index">Index where the <see cref="T:C1.Framework.Element"/> will be inserted.</param>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
        </member>
        <member name="M:C1.Framework.ElementList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the list at the specified index. 
            </summary>
            <param name="index">Index where the elements will be inserted.</param>
            <param name="c"><see cref="T:System.Collections.ICollection"/> whose elements will be inserted.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Framework.Element"/> at the specified index from the list.
            </summary>
            <param name="index">The index of the <see cref="T:C1.Framework.Element"/> to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the list.
            </summary>
            <param name="index">Index of the first element to remove from the list.</param>
            <param name="count">Number of elements to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
            <param name="index">Index where the reversal should start.</param>
            <param name="count">Number of elements to reverse.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Owner">
            <summary>
            Gets a reference to the <see cref="T:C1.Framework.Element"/> that owns this <see cref="T:C1.Framework.ElementList"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the element to get or set</param>.
            <returns>The <see cref="T:C1.Framework.Element"/> at the specified index.</returns>
        </member>
        <member name="P:C1.Framework.ElementList.Last">
            <summary>
            Gets or sets the last <see cref="T:C1.Framework.Element"/> on the list.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.ScheduleViewEnum">
            <summary>
            Determines the type of view to display in the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.DayView">
            <summary>
            Day view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.WeekView">
            <summary>
            Week view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.WorkWeekView">
            <summary>
            Work week view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.ScheduleViewEnum.MonthView">
            <summary>
            Month view.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.WeekViewStyleEnum">
            <summary>
            Determines the type of week view to display in the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.WeekViewStyleEnum.Office2003">
            <summary>
            Office 2003 week view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.WeekViewStyleEnum.Office2007">
            <summary>
            Office 2007 week view (7 full days as in Day View).
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.EditOptions">
            <summary>
            Determines the set of edit options avalable to the the end-user.	
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.None">
            <summary>
            None of edit options are available to the end-user.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.AllowInplaceEdit">
            <summary>
            Allows activation of an inplace editor for an appointment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.AllowDrag">
            <summary>
            Allows dragging and resizing operations for an appointment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.AllowAppointmentEdit">
            <summary>
            Allows editing of an appointment by an end-user. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.AllowAppointmentCreate">
            <summary>
            Allows creating of new appointments by an end-user. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.AllowAppointmentDelete">
            <summary>
            Allows deleting of an appointment by an end-user. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.EditOptions.All">
            <summary>
            Allows all edit operations. It is the default value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.C1Schedule">
            <summary>
            <para>The <see cref="T:C1.Win.C1Schedule.C1Schedule"/> is the main control which is used to implement 
            interactions between end-users and the scheduling application.</para>
            <para>The main purpose of this control is to show the scheduled data (appointments) 
            on a form using one of the possible data views.</para>
            <para>It allows appointments to be created, edited and deleted, 
            and all other actions required by end-users to schedule their timetables 
            to be performed.</para>
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.GetCallingAssembly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.ShouldSerializeTheme">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate">
            <summary>
            Prevents the control from drawing until the <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate"/> method 
            is called.
            </summary>
            <remarks>Call to <see cref="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate"/> method must be paired with 
            a call to <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate"/> method.
            Use try ... finally statements to ensure that <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate"/> method
            is always called.</remarks>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.EndUpdate">
            <summary>
            Resumes drawing of the control after drawing is suspended by 
            the <see cref="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate"/> method.
            </summary>
            <remarks>Call to <see cref="M:C1.Win.C1Schedule.C1Schedule.BeginUpdate"/> method must be paired with 
            a call to <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate"/> method.
            Use try ... finally statements to ensure that <see cref="M:C1.Win.C1Schedule.C1Schedule.EndUpdate"/> method
            is always called.</remarks>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.CreateAppointment">
            <summary>
            Creates a new <see cref="T:C1.C1Schedule.Appointment"/> object with default settings, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments"/> collection. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.CreateAllDayEvent">
            <summary>
            Creates a new all-day <see cref="T:C1.C1Schedule.Appointment"/> object, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments"/> collection. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.CreateReccuringAllDayEvent">
            <summary>
            Creates a new recurring all-day <see cref="T:C1.C1Schedule.Appointment"/> object, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments"/> collection. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.CreateReccuringAppointment">
            <summary>
            Creates a new recurring <see cref="T:C1.C1Schedule.Appointment"/> object, 
            shows it in the Edit Appointment dialog, and then adds it 
            to the <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments"/> collection. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.EditAppointment(C1.C1Schedule.Appointment)">
            <summary>
            Shows specified <see cref="T:C1.C1Schedule.Appointment"/> object in the Edit Appointment dialog. 
            </summary>
            <param name="app">The <see cref="T:C1.C1Schedule.Appointment"/> object to edit.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.RemoveAppointment(C1.C1Schedule.Appointment)">
            <summary>
            Removes specified <see cref="T:C1.C1Schedule.Appointment"/> object from the <see cref="T:C1.C1Schedule.AppointmentStorage"/>. 
            </summary>
            <param name="app">The <see cref="T:C1.C1Schedule.Appointment"/> object to remove.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.GoToDate(System.DateTime)">
            <summary>
            Sets the specified date as the start date of the scheduler, 
            meaning that on this date the scheduler will show its data. 
            This operation doesn't change the type of view.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.ShowDates(System.DateTime[])">
            <summary>
            Shows specified dates in the scheduler choosing appropriate type of view.
            </summary>
            <param name="dates">The array of <see cref="T:System.DateTime"/> values.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.OnHandleCreated(System.EventArgs)">
            <summary>
            Overrides the default behaviour.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.System#IServiceProvider#GetService(System.Type)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.C1Schedule.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Schedule.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.BoldedDatesChanged">
            <summary>
            Occurs when the list of dates which have any <see cref="T:C1.C1Schedule.Appointment"/> objects
            is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeViewChange">
            <summary>
            Fired immediately before next actions:
            <para> - when range of visible dates and(or) view type is changed by the associated C1Calendar control;</para>
            <para> - when range of visible dates and(or) view type is changed by the <see cref="M:C1.Win.C1Schedule.C1Schedule.ShowDates(System.DateTime[])"/> method.</para>
            </summary>
            <remarks>Change BeforeViewChangeEventArgs properties to cancel action, to set other
            view type or to set other range of dates.</remarks>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.SelectionChanged">
            <summary>
            Occurs when the range of visible days is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.SelectedDaysChanged">
            <summary>
            Occurs when the range of available days is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeReminderShow">
            <summary>
            Occurs immediately before the Reminder dialog box is displayed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentShow">
            <summary>
            Occurs immediately before the Appointment dialog box is displayed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentCreate">
            <summary>
            Occurs immediately before the Appointment dialog box for the newly created 
            <see cref="T:C1.C1Schedule.Appointment"/> object is displayed.
            </summary>
            <remarks><para>CancelAppointmentEventArgs for this event is initialized according to
            the currently selected view and date. For example: </para>
            <para> - if there are some selected slots in 
            the DayView, then <see cref="P:C1.C1Schedule.Appointment.Start"/> and <see cref="P:C1.C1Schedule.Appointment.End"/> 
            properties will be initialized accordingly;</para>
            <para> - if there is a selected day in a WeekView or in a MonthView, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent"/> property will be set to true.</para>
            <para>Use this event to prevent the embedded Appointment dialog box showing. </para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.BeforeAppointmentDelete">
            <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment"/> object is deleted by end-user by pressing
            'Delete' button.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentsLoaded">
            <summary>
            Occurs when <see cref="T:C1.C1Schedule.AppointmentCollection"/> has been loaded by <see cref="M:C1.C1Schedule.C1ScheduleStorage.Import(System.String,C1.C1Schedule.FileFormatEnum)"/> method.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentRecurrenceStateChanged">
            <summary>
            Occurs when the <see cref="P:C1.C1Schedule.Appointment.RecurrenceState"/> property of 
            an <see cref="T:C1.C1Schedule.Appointment"/> object is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentCustomAction">
            <summary>
            Occurs when a custom action of an <see cref="T:C1.C1Schedule.Appointment"/> object executes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentAdded">
            <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment"/> object is added.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentDeleted">
            <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment"/> object is deleted.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.AppointmentChanged">
            <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment"/> object is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderAdd">
            <summary>
            Occurs after a <see cref="T:C1.C1Schedule.Reminder"/> object is added.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderChange">
            <summary>
            Occurs after a <see cref="T:C1.C1Schedule.Reminder"/> object has been modified.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderFire">
            <summary>
            Occurs before the <see cref="T:C1.C1Schedule.Reminder"/> object is executed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderSnooze">
            <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder"/> object is dismissed using the Snooze button.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.C1Schedule.ReminderRemove">
            <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder"/> object has been removed from the collection.
            </summary>
            <remarks>A reminder can be removed from the <see cref="T:C1.C1Schedule.ReminderCollection"/> collection 
            by any of the following means:
            - the <see cref="T:C1.C1Schedule.ReminderCollection"/>'s Remove method. 
            - the <see cref="M:C1.C1Schedule.Reminder.Dismiss"/> method. 
            - when the user clicks the Dismiss button. 
            - when a user turns off a meeting reminder from within the associated item.
            - when a user deletes an item that contains a reminder. </remarks>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.Theme">
            <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Schedule.Theme"/> object determining the control appearance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.VisualStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.C1Schedule.VisualStyle"/> value determining 
            control's visual style.
            The default is <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue"/>.
            </summary>
            <remarks><para>Setting this property to any value changes the value 
            of the <see cref="P:C1.Win.C1Schedule.C1Schedule.Theme"/> property. </para>
            <para>Setting this property to <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom"/> value 
            results in creating the editable copy of currently used theme.
            The new theme has <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom"/> style
            and an unique string as the Name property.</para></remarks>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.LargeButtons">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether the control 
            and its dialogs should use large icons and buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.WeekViewStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Schedule.WeekViewStyleEnum"/> value determining 
            Week View style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.ShowTitle">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether the control 
            shows the title panel.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.ViewType">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Schedule.ScheduleViewEnum"/> value determining 
            currently displayed view.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.ShowWorkTimeOnly">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating whether the control should show 
            only working hours in a Day View.  
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.EditOptions">
            <summary>
            Gets or sets a <see cref="P:C1.Win.C1Schedule.C1Schedule.EditOptions"/> value, determining which 
            actions are allowed to the end-user.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.ShowContextMenu">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating whether the control 
            should show context menu.  
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.ShowAppointmentToolTip">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating whether the control should show 
            tooltip when mouse is over an appointment.  
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.ShowReminderForm">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating whether the control 
            should show the reminder form when when a reminder alerts.  
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.CalendarInfo">
            <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Schedule.CalendarInfo"/> object for the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.DataStorage">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.C1ScheduleStorage"/> object for the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.BoldedDates">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.DateList"/> object that determines 
            which dates contain appointments. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.SelectedDates">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.DateList"/> object that determines 
            currently selected dates in the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.CurrentDate">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value that determines 
            currently selected date in the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.System#ComponentModel#ISite#Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.System#ComponentModel#ISite#Container">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.System#ComponentModel#ISite#DesignMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Schedule.System#ComponentModel#ISite#Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.SelectionChanged"/> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.SelectionChangedEventArgs.Selection">
            <summary>
            Gets an array of selected dates.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.BeforeViewChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Schedule.C1Schedule.BeforeViewChange"/> event 
            of the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.BeforeViewChangeEventArgs.ViewType">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Schedule.ScheduleViewEnum"/> value determining 
            which type of view should be selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.BeforeViewChangeEventArgs.Dates">
            <summary>
            Gets or sets the range of dates which should be selected in the view. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.ResourceMappingControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ResourceMappingControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ResourceMappingControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.DayCollectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.DayCollectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.DayCollectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Framework.XView">
            <summary>
            <para>Control that hosts X elements.</para>
            
            <para>The control has an <see cref="P:C1.Framework.XView.Element"/> property that gets or
            sets the element to be displayed.</para>
            
            <para>The control is responsible for displaying the element, providing
            scrolling, and routing mouse and keyboard events to the hosted element.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollableControl">
            <summary>
            Defines an abstract base class for controls that support auto-scrolling behavior. 
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.#ctor">
            <summary>
            Initializes the <see cref="T:C1.Framework.ScrollableControl"/> properties.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Override this method to get notifications when the control scrolls.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
            This method is used to set the scroll rectangle.
            Override it to customize the scrolling behavior.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.HandleScrollMessage(System.Windows.Forms.Message)">
            <summary>
            Handles scroll messages.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)"/>.
            Override this method to account for scrollbars size.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollSize(System.Int32)">
            <summary>
            Retrieves the specified scroll bar range.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollPos(System.Int32)">
            <summary>
            Gets the scroll position of the specified scroll bar.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetTrackPos(System.Int32)">
            <summary>
            Gets the immediate position of the specified scroll box that the user is dragging.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.SetScrollPos(System.Int32,System.Int32)">
            <summary>
            Sets the position of the specified scroll bar.
            </summary>
            <param name="nBar"></param>
            <param name="pos">Specifies the new position of the scroll box. 
            The position must be within the scrolling range. </param>
            <returns>The previous position of the scroll box indicates success. 
            Zero indicates failure</returns>
        </member>
        <member name="P:C1.Framework.ScrollableControl.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollBars">
            <summary>
            Gets or sets which scroll bars should appear on the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollPosition">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Point"/> value determining the current scroll position.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollSize">
            <summary>
            Gets or sets the size of the document.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollTrack">
            <summary>
            Gets or sets whether the control should scroll as the user drags the scrollbar thumb.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.BorderStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.BorderStyle"/> value determining 
            the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.Cursor">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.Cursor"/> that appears when 
            the mouse moves over the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollableRectangle">
            <summary>
            This property is used to set the scroll page size.
            Override it to customize the scrolling behavior.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.SmallChange">
            <summary>
            Gets or sets the distance to move a scroll bar in response to 
            a small scroll command.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.UseScrollWindow">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value determining whether control shows scroll bars.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.XView"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.Invalidate(C1.Framework.Element)">
            <summary>
            Invalidate a contained element.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to locate.</param>
            <returns>Element bounds in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.XView.GetBounds(C1.Framework.Element,System.Boolean)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to locate.</param>
            <param name="clipToClient">Whether to clip the rectangle to the control's client area.</param>
            <returns>Element bounds in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.XView.GetIsScrollable(C1.Framework.Element)">
            <summary>
            Checks whether a given element is in the main element's scrolling area.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to check.</param>
            <returns>True if the whole element is within the main element's scrolling area.</returns>
            <remarks>
            The main element's scrolling area is the area below and to the right of the point
            returned by the <see cref="M:C1.Framework.Element.GetScrollOrigin"/> method.</remarks>
        </member>
        <member name="M:C1.Framework.XView.Focus(C1.Framework.Element)">
            <summary>
            Set the focus to a given element.
            </summary>
            <param name="e">Element to receive the focus.</param>
            <returns>True if the focus was set to the given element.</returns>
        </member>
        <member name="M:C1.Framework.XView.HitTest">
            <summary>
            Gets the hit-testable element under the mouse.
            </summary>
            <returns>Element under the mouse.</returns>
        </member>
        <member name="M:C1.Framework.XView.HitTest(System.Drawing.Point)">
            <summary>
            Gets the hit-testable element at a given position.
            </summary>
            <param name="pt">Position to test.</param>
            <returns>Element at the given position.</returns>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(C1.Framework.Element)">
            <summary>
            Scrolls a given element into view.
            </summary>
            <param name="e">Element to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Point)">
            <summary>
            Scrolls a given point into view.
            </summary>
            <param name="pt">Point to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Rectangle)">
            <summary>
            Scrolls a given rectangle into view.
            </summary>
            <param name="r">Rectangle to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the control. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Framework.XView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or 
            a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XView.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Invalidated"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.InvalidateEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
             Sets the scroll rectangle.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.XView.Element">
            <summary>
            Element hosted by this XView.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.AutoSizeElement">
            <summary>
            Gets or sets how the XView should resize the hosted element to match its size.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ShowFocusRectangle">
            <summary>
            Gets or sets whether the XView should show draw a focus rectangle around 
            the element with focus.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ShowToolTips">
            <summary>
            Gets or sets whether the XView should display tooltips for elements that 
            implement the <see cref="T:C1.Framework.IToolTipElement"/> interface.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.FocusedElement">
            <summary>
            Gets the element that has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ToolTip">
            <summary>
            Gets the <see cref="T:C1.Framework.C1SuperTooltip"/> component used to display tooltips for selected elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.Components">
            <summary>
            Gets a collection of public components contained in this control.
            This is used by the <see cref="!:XViewDesigner"/> designer.
            </summary>
        </member>
        <member name="T:C1.Framework.XView.HostedElement">
            <summary>
            Element that serves as an interface between the host XView control
            and the content elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.ScheduleView.GoToDate(System.DateTime)">
            <summary>
            Sets the specified date as the start date of the scheduler, 
            meaning that on this date the scheduler will show its data. 
            This operation doesn't change the type of view.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.ScheduleView.ShowDates(System.DateTime[])">
            <summary>
            Shows specified dates in the scheduler choosing appropriate type of view.
            </summary>
            <param name="dates">The array of <see cref="T:System.DateTime"/> values.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.ScheduleView.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.ScheduleView.OnSizeChanged(System.EventArgs)">
            <summary>
            set element's width and mark element as dirty (to trigger Layout methods)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.ScheduleView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            handle scrolling with a wheel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.ScheduleView.HandleScrollMessage(System.Windows.Forms.Message)">
            <summary>
             handle scroll messages
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.ErrorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ErrorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ErrorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BinaryExchanger">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.C1Schedule.C1ScheduleExchanger">
            <summary>
            The base class for all importers/exporters in C1Schedule
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleExchanger.Export(System.String)">
            <summary>
            Exports the scheduler's data to a file. 
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the full path 
            (including the file name and extension) to export the scheduler's data to. </param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleExchanger.Export(System.IO.Stream)">
            <summary>
            Exports the scheduler's data to a stream. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the scheduler's data will be exported.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleExchanger.Export(System.String,System.Collections.Generic.IList{C1.C1Schedule.Appointment})">
            <summary>
            Exports the appointments's data to a file. 
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the full path 
            (including the file name and extension) to export. </param>
            <param name="appointments">A <see cref="T:System.Collections.Generic.IList`1"/> object.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleExchanger.Export(System.IO.Stream,System.Collections.Generic.IList{C1.C1Schedule.Appointment})">
            <summary>
            Exports the appointments's data to a stream. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the appointments's data will be exported.</param>
            <param name="appointments">A <see cref="T:System.Collections.Generic.IList`1"/> object.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleExchanger.Import(System.String)">
            <summary>
            Imports data into the scheduler from a file.
            </summary>
            <param name="path">A <see cref="T:System.String"/> value containing the full path 
            (including the file name and extension) to a file which contains 
            the data to be imported into the scheduler.</param>
        </member>
        <member name="M:C1.C1Schedule.C1ScheduleExchanger.Import(System.IO.Stream)">
            <summary>
            Imports the scheduler's data from a stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
        </member>
        <member name="M:C1.C1Schedule.BinaryExchanger.ExportInternal(System.IO.Stream)">
            <summary>
            Exports the appointments's data to a stream in the XML format. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the appointments's data will be exported.</param>
        </member>
        <member name="M:C1.C1Schedule.BinaryExchanger.ImportInternal(System.IO.Stream)">
            <summary>
            Imports the scheduler's data from a stream whose data is in the XML format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.QRemoveForm">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.QRemoveForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.QRemoveForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.QRemoveForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.QRemoveForm.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.ContactListForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ContactListForm"/> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ContactList"/> object.
            Use this form for editing the list of contacts assigned 
            to the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.ContactListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ContactListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ContactListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ContactListForm.#ctor(C1.C1Schedule.ContactList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ContactListForm"/> form.
            </summary>
            <param name="list">The <see cref="T:C1.C1Schedule.ContactList"/> list to edit.</param>
        </member>
        <member name="P:C1.Win.C1Schedule.Forms.ContactListForm.List">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactList"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.BackgroundEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BackgroundEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BackgroundEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Design.BackgroundEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit thickness properties. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BackgroundEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Design.BackgroundEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BackgroundEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Schedule.Design.BackgroundEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.BackgroundEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A <see cref="T:C1.Framework.Style"/> value containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Win.C1Schedule.Design.C1ScheduleActionList">
            <summary>
            Summary description for C1ScheduleActionList.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.StatusStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.StatusStorage"/> is the storage for <see cref="T:C1.C1Schedule.Status"/> objects.
            It allows binding to the data source and mapping data sources fields 
            to the status properties.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.StatusStorage.Statuses">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.StatusCollection"/> object 
            that contains status related information. 
            </summary>
        </member>
        <member name="T:C1.Framework.AutoSizeElement">
            <summary>
            Apecifies how the XView control should size the element it contains.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRow">
            <summary>
            Keeps track of row heights and positions, stores cells in Children member.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRowCollection">
            <summary>
            GridRow collection. Just an ElementList typed to get and set GridRow objects.
            </summary>
        </member>
        <member name="T:C1.Framework.CellSpanInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.FloatieBase.FloatieConstructed">
            <summary>
            This method MUST be called by the inheritor's ctor before exiting!
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.FloatieBase.CanShow">
            <summary>
            Returns false if the floatie should not be shown for reasons such as:
            - the designer is hidden;
            - ???
            Returning true does not mean that the floatie must show, only that it can.
            </summary>
            <returns></returns>
        </member>
        <member name="F:C1.Util.Design.Floaties.PopupFloatie.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie.#ctor(C1.Util.Design.Floaties.IFloatieOwner,System.Type)">
            <summary>
            ctor for inherited classes
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:C1.Util.Design.Floaties.PopupFloatie.AutoPopupDelay">
            <summary>
            Gets or sets the timespan between the moment the floatie is ready to be shown
            and the moment it is actually shown.
            </summary>
        </member>
        <member name="F:C1.Util.Design.Floaties.MainFloatie.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.MainFloatie.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Design.Floaties.MainFloatie.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHyperlink">
            <summary>
            Class that represents HTML 'A' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HyperlinkElement">
            <summary>
            Invisible elements inserted in the HTML stream to delimit hyperlinks.
            To use this, the viewer should handle the MouseDown event, use HitTest to 
            find the element clicked, then scan the Children collection to determine
            whether the click was on a link and what the link parameters are.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Resource">
            <summary>
            The <see cref="T:C1.C1Schedule.Resource"/> class represents the resource which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Resource.#ctor">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Resource"/> object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Resource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:C1.C1Schedule.ResourceCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.ResourceCollection"/> is a collection of <see cref="T:C1.C1Schedule.Resource"/> 
            objects which represents all available resources in C1Schedule object model.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ResourceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ResourceCollection"/> class.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.ResourceList">
            <summary>
            The <see cref="T:C1.C1Schedule.ResourceList"/> is a list of <see cref="T:C1.C1Schedule.Resource"/> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.ResourceCollection"/> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.ResourceList"/> to associate the set of <see cref="T:C1.C1Schedule.Resource"/> objects 
            with an <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Reminder">
            <summary>
            The <see cref="T:C1.C1Schedule.Reminder"/> class represents an object which allows users to keep track 
            of upcoming appointments by scheduling a pop-up dialog box to appear at a given time. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Reminder.#ctor(C1.C1Schedule.Appointment)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Reminder"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)">
            <summary>
            The <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)"/> method notifies the scheduler to defer the triggering 
            of a reminder by the specified interval.
            </summary>
            <param name="delay">The <see cref="T:System.TimeSpan"/>value specifying the interval
            of time to wait before displaying the reminder again.</param>
        </member>
        <member name="M:C1.C1Schedule.Reminder.Dismiss">
            <summary>
            Dismisses the current <see cref="T:C1.C1Schedule.Reminder"/> object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Reminder.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:C1.C1Schedule.Reminder.ParentAppointment">
            <summary>
            Gets the owning <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Reminder.Caption">
            <summary>
            Gets the <see cref="T:System.String"/> value representing the window caption text 
            of the <see cref="T:C1.C1Schedule.Appointment"/> object which 
            the <see cref="T:C1.C1Schedule.Reminder"/> object is applied to.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Reminder.IsActive">
            <summary>
            Gets a value that determines if the <see cref="T:C1.C1Schedule.Reminder"/> object 
            is currently active (visible). 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Reminder.NextReminderDate">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value indicating the next time the specified 
            reminder will occur. 
            </summary>
            <remarks>The <see cref="P:C1.C1Schedule.Reminder.NextReminderDate"/> property value changes every time 
            the object's <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)"/> method is executed or when the user 
            clicks the Snooze button.</remarks>
        </member>
        <member name="P:C1.C1Schedule.Reminder.OriginalReminderDate">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value specifying the original date and time 
            that the specified reminder is set to occur. 
            It is calculated using the following formula: 
            <see cref="P:C1.C1Schedule.Reminder.OriginalReminderDate"/> = <see cref="P:C1.C1Schedule.Appointment.Start"/> 
              - <see cref="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart"/>.
            </summary>
            <remarks>This value corresponds to the original date and time 
            value before the <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)"/> method is executed or the user 
            clicks the Snooze button.</remarks>
        </member>
        <member name="T:C1.C1Schedule.ReminderCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.ReminderCollection"/> is a collection of all <see cref="T:C1.C1Schedule.Reminder"/> objects 
            that represents the reminders for all pending items.
            </summary>
            <remarks>Use the <see cref="P:C1.C1Schedule.C1ScheduleStorage.Reminders"/> property to get a reference  
            to the Reminders collection. 
            Reminders are created programmatically when a new <see cref="T:C1.C1Schedule.Appointment"/> object 
            is created with a reminder. For example, a reminder is created when 
            an <see cref="T:C1.C1Schedule.Appointment"/> object is created and the <see cref="P:C1.C1Schedule.Appointment.ReminderSet"/>
            property is set to true. 
            </remarks>
        </member>
        <member name="M:C1.C1Schedule.ReminderCollection.#ctor">
            <summary>
            Initialize new <see cref="T:C1.C1Schedule.ReminderCollection"/> object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ReminderCollection.InsertItem(System.Int32,C1.C1Schedule.Reminder)">
            <summary>
            Overrides default behaviour.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.ReminderCollection.RemoveItem(System.Int32)">
            <summary>
            Overrides default behaviour.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.ReminderCollection.ClearItems">
            <summary>
            Overrides default behaviour.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ReminderCollection.SetItem(System.Int32,C1.C1Schedule.Reminder)">
            <summary>
            Overrides default behaviour.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.ReminderCollection.WaitProc(System.Object,System.Boolean)">
            <summary>
            Method to be called when it is time to show reminder.
            </summary>
            <param name="state"></param>
            <param name="timedOut"></param>
        </member>
        <member name="E:C1.C1Schedule.ReminderCollection.ReminderAdd">
            <summary>
            Occurs after a reminder is added.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.ReminderCollection.ReminderChange">
            <summary>
            Occurs after a reminder has been modified.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.ReminderCollection.ReminderFire">
            <summary>
            Occurs before the reminder is executed.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.ReminderCollection.ReminderSnooze">
            <summary>
            Occurs when a reminder is dismissed using the Snooze button.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.ReminderCollection.ReminderRemove">
            <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder"/>  object has been removed from the collection.
            </summary>
            <remarks>A reminder can be removed from the Reminders collection 
            by any of the following means:
            - The Reminders collection's Remove method. 
            - The Reminder object's Dismiss method. 
            - When the user clicks the Dismiss button. 
            - When a user turns off a meeting reminder from within the associated item.
            - When a user deletes an item that contains a reminder. </remarks>
        </member>
        <member name="T:C1.C1Schedule.ReminderEventArgs">
            <summary>
            Describes event data for <see cref="F:C1.C1Schedule.ReminderEventArgs.Reminder"/> object events.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.ReminderEventArgs.Reminder">
            <summary>
            Gets the reminder which the event was raised for. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ReminderEventArgs.#ctor(C1.C1Schedule.Reminder)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ReminderEventArgs"/> 
            class with the specified <see cref="F:C1.C1Schedule.ReminderEventArgs.Reminder"/> object. 
            </summary>
            <param name="reminder">The <see cref="F:C1.C1Schedule.ReminderEventArgs.Reminder"/> object.</param>
        </member>
        <member name="T:C1.C1Schedule.CancelReminderEventHandler">
            <summary>
            Delegate for handling the cancelable event involving a single Reminder. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.C1Schedule.CancelReminderEventArgs">
            <summary>
            Describes event data for cancelable Reminder events.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.CancelReminderEventArgs.Reminder">
            <summary>
            Gets the reminder which the event was raised for. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.CancelReminderEventArgs.Cancel">
            <summary>
            Set to true to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CancelReminderEventArgs.#ctor(C1.C1Schedule.Reminder)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CancelReminderEventArgs"/>
            class with the specified <see cref="F:C1.C1Schedule.CancelReminderEventArgs.Reminder"/> object. 
            </summary>
            <param name="reminder"></param>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.RecurrenceForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.RecurrenceForm"/> represents the dialog form for editing
            the recurrence pattern properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.RecurrenceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.RecurrenceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.RecurrenceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.RecurrenceForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.RecurrencePattern,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.RecurrenceForm"/> form.
            </summary>
            <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.</param>
            <param name="pattern">The <see cref="T:C1.C1Schedule.RecurrencePattern"/> object.</param>
            <param name="isNew">The <see cref="T:System.Boolean"/> value indicating 
            if the will be used for filling the new pattern or for editing of existing one.</param>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.ScheduleSettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ScheduleSettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ScheduleSettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.StorageEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.StorageEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.StorageEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.ThicknessEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.ThicknessEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.ThicknessEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Design.ColorPickerUITypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Design.ColorPickerUITypeEditor.FormType">
            <summary>
            Gets or sets the type of the form used as the color picker.
            The form must expose the public property Color Color {get;set;}.
            </summary>
        </member>
        <member name="T:C1.Framework.ResourceLoader">
            <summary>
            Class with static methods used for enumerating and retrieving application
            resources.
            </summary>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages">
            <summary>
            Returns all images from the executing assembly. 
            </summary>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages(System.Reflection.Assembly)">
            <summary>
            Returns all images from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load images from.</param>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.String)">
            <summary>
            Loads an image from the executing assembly. 
            </summary>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an image from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load image from.</param>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.String)">
            <summary>
            Loads the specified manifest resource from the executing assembly. 
            </summary>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load resource from.</param>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.DecodeImage(System.String)">
            <summary>
            Decodes an image from a base-64-encoded string.
            </summary>
            <param name="data">String that contains the encoded image data.</param>
            <returns><see cref="T:System.Drawing.Image"/> encoded in the string.</returns>
        </member>
        <member name="T:C1.Framework.ImageElement">
            <summary>
            <para>Element that displays an <see cref="P:C1.Framework.ImageElement.Image"/>.</para>
            
            <para>Alignment and scaling are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="P:C1.Framework.ImageElement.LineDescent">
            <summary>
            No descent for images.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlElement">
            <summary>
            Class that represents a generic Html <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv">
            <summary>
            Class that represents Hhtml DIV tags.
            </summary>
        </member>
        <member name="T:C1.Framework.ParagraphElement">
            <summary>
            <see cref="T:C1.Framework.BasePanel"/> that displays paragraphs.
            </summary>
            <remarks>
            This class is a panel that wraps and aligns its child elements.
            </remarks>
        </member>
        <member name="T:C1.Framework.BorderEdges">
            <summary>
            Class that stores colors for individual border edges.
            </summary>
            <remarks>
            <para>In most cases, borders have a single color and this class is not used at all.</para>
            <para>If the members of this class are set to non-transparent colors, then the specified
            colors are used to paint over specific edges.</para>
            <para>This class paints the borders with a bevel so they line up at the corners, but
            it does not handle corners at all, so only rectangular elements can have multi-colored
            borders.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.BorderEdges.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="P:C1.Framework.BorderEdges.Left">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Top">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Right">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Bottom">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.IsEmpty">
            <summary>
            Gets a value that determines if colors have been specified for any of the edges.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdges.BorderEdgesConverter">
            <summary>
            <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> that converts <see cref="T:C1.Framework.BorderEdges"/> objects to and from strings.
            </summary>
            <remarks>
            This converter allows persisting <see cref="T:C1.Framework.BorderEdges"/> objects to Xml.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.VisualStyle">
            <summary>
            Defines the visual style for the C1Calendar and C1Schedule controls.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Custom">
            <summary>
            Custom visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.System">
            <summary>
            System visual style (uses the current desktop settings).
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue">
            <summary>
            Office 2007 Blue visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Black">
            <summary>
            Office 2007 Black visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Silver">
            <summary>
            Office 2007 Silver visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPBlue">
            <summary>
            Windows XP Blue visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPSilver">
            <summary>
            Windows XP Silver visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPOlive">
            <summary>
            Windows XP Olive Green visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Royale">
            <summary>
            Windows Media Center Royale visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Yahoo">
            <summary>
            Yahoo visual style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.VisualStyle.Aero">
            <summary>
            Aero visual style.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.BaseTheme">
            <summary>
            The base class for themes in the C1Calendar and C1Schedule controls.
            </summary>
        </member>
        <member name="T:C1.Framework.Theme">
            <summary>
            Class that contains a keyed collection of <see cref="T:C1.Framework.Style"/> objects and methods 
            to serialize the styles into Xml files and streams.
            </summary>
            <remarks>
            <para>The Theme class is a named/keyed collection of <see cref="T:C1.Framework.Style"/> objects.</para>
            <para>The class is designed to be used as a base class for components that need
            to add custom elements to themes in addition to a style collection.</para>
            <para>Inheritors should override the following methods:</para>
            <code>
            // specify the name of the component that will use this theme
            protected virtual string ComponentType
            
            // save component-specific elements to xml
            protected virtual void WriteCustomData(XmlWriter writer)
            
            // load component-specific elements from xml
            protected virtual void ReadCustomData(XmlNode node)
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
            <param name="name">Name of the new theme.</param>
        </member>
        <member name="M:C1.Framework.Theme.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)">
            <summary>
            Saves a collection of themes into an Xml file.
            </summary>
            <param name="themes">Array containing <see cref="T:C1.Framework.Theme"/> objects.</param>
            <param name="fileName">Name of the Xml file where the themes will be saved.</param>
            <remarks>
            Use the <see cref="M:C1.Framework.Theme.LoadThemes(System.String)"/> method to load the saved themes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadThemes(System.String)">
            <summary>
            Loads a collection of themes from an Xml file.
            </summary>
            <param name="fileName">Name of the Xml file that contains the themes.</param>
            <returns>An array containing the themes loaded from the file.</returns>
            <remarks>
            Use this method to load themes saved with the <see cref="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> that contains the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.String)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml file.
            </summary>
            <param name="fileName">Name of the file where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.IO.Stream)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml file.
            </summary>
            <param name="fileName">File that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.IO.Stream)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteCustomData(System.Xml.XmlWriter)">
            <summary>
            Writes component-specific data into the theme.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> where custom theme data is saved.</param>
            <remarks>
            Derived classes should override this method to save any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadCustomData(System.Xml.XmlNode)">
            <summary>
            Reads component-specific theme data.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
            <remarks>
            Derived classes should override this method to read any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.SaveImage(System.Xml.XmlWriter,System.String,System.Drawing.Image)">
            <summary>
            Saves an image into the Xml output stream.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that contains the theme definition.</param>
            <param name="propertyName">Name of the node where the image will be stored.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> that will be saved in the stream.</param>
            <remarks>
            The default implementation keeps a list of the images that have been saved. If any
            images are saved more than once, only the index is stored for the repeated instances.
            For example:
            <code>
            SaveImage(writer, "MyImageProperty", img);
            SaveImage(writer, "MyImagePropertyAgain", img);
            SaveImage(writer, "MyImagePropertyAndAgain", img);
            
            [MyImageProperty]base64data[/MyImageProperty]
            [MyImagePropertyAgain index="0"/]
            [MyImagePropertyAndAgain index="0"/]
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadImage(System.Xml.XmlNode)">
            <summary>
            Loads an image from the Xml stream.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the image information.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object.</returns>
            <remarks>
            <para>The first instance of each image is stored as node data (base 64-encoded). When this
            instance is loaded for the first time, the image is stored in an internal image list.</para>
            <para>Subsequent instances of the same image are not stored in the node as binary data;
            an "index" attribute is used instead that specifies the index of the image in the
            internal image collection.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.GetKeyForItem(C1.Framework.Style)">
            <summary>
            Styles are indexed by style name.
            </summary>
            <param name="style">Collection member.</param>
            <returns>Style name (must be unique within collection).</returns>
        </member>
        <member name="M:C1.Framework.Theme.WriteStyle(System.Xml.XmlWriter,C1.Framework.Style,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Saves a <see cref="T:C1.Framework.Style"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the style data.</param>
            <param name="style"><see cref="T:C1.Framework.Style"/> that will be saved.</param>
            <param name="images">List of images whose indices will be saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being saved.</param>
            <remarks>
            <para>To save space, the following rules apply:</para>
            <para>Properties of the main style are saved only if they are set to values different from the default.</para>
            <para>Properties of substyles (hot, pressed, etc) are saved only if they are different from the main style.</para>
            <para>Images are saved in a separate list, and only references are saved in the styles.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadStyle(System.Xml.XmlNode,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Loads a <see cref="T:C1.Framework.Style"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the style data.</param>
            <param name="images">List of images whose indices were saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being loaded.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Theme.SaveBinaryObject(System.Xml.XmlWriter,System.Object)">
            <summary>
            Saves a binary object into  the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the object data.</param>
            <param name="obj">An object to write.</param>
        </member>
        <member name="M:C1.Framework.Theme.LoadBinaryObject(System.Xml.XmlNode)">
            <summary>
            Loads a binary object from the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">A <see cref="T:System.Xml.XmlNode"/> which contains the object data.</param>
            <returns>The binary object.</returns>
        </member>
        <member name="P:C1.Framework.Theme.Name">
            <summary>
            Gets or sets the theme name (e.g. "RedMoon");
            </summary>
        </member>
        <member name="P:C1.Framework.Theme.ComponentType">
            <summary>
            Gets or sets the name of the component that owns the theme
            (e.g., "C1Schedule", "C1Calendar" or "C1Ribbon"). 
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.BaseTheme._themeStyle">
            <summary>
            The <see cref="P:C1.Win.C1Schedule.UI.BaseTheme.VisualStyle"/> value, specifying the type of the <see cref="T:C1.Win.C1Schedule.UI.BaseTheme"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.UI.BaseTheme._locked">
            <summary>
            Determines whether the theme is locked for editing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseTheme.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.UI.BaseTheme"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseTheme.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseTheme.ToString">
            <summary>
            Returns the value of a <see cref="P:C1.Framework.Theme.Name"/> property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseTheme.OnThemeChanged">
            <summary>
            Raises the <see cref="E:C1.Win.C1Schedule.UI.BaseTheme.ThemeChanged"/> event
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseTheme.SetStyle(C1.Framework.Style,System.String)">
            <summary>
            Sets the value of the named <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.BaseTheme.VisualStyle">
            <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.UI.BaseTheme.VisualStyle"/> value, specifying the type of the theme.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Locked">
            <summary>
            Gets or sets the value, determining whether the theme is locked for editing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Comparer">
            <summary>
            Gets the generic equality comparer that is used to determine equality 
            of keys in the collection.
            </summary>
        </member>
        <member name="E:C1.Win.C1Schedule.UI.BaseTheme.Disposed">
            <summary>
            Represents the method that handles the Disposed event of a component. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.BaseTheme.Site">
            <summary>
            Gets or sets the ISite associated with the IComponent. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.ResourceListForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ResourceListForm"/> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ResourceList"/> object.
            Use this form for editing the list of resources assigned 
            to the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.ResourceListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ResourceListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ResourceListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ResourceListForm.#ctor(C1.C1Schedule.ResourceList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ResourceListForm"/> form.
            </summary>
            <param name="list">The <see cref="T:C1.C1Schedule.ResourceList"/> list to edit.</param>
        </member>
        <member name="P:C1.Win.C1Schedule.Forms.ResourceListForm.List">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceList"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.ContactCollectionForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ContactCollectionForm"/> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ContactCollection"/> object.
            Use this form for editing the full list of available contacts.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ContactCollectionForm.#ctor(C1.C1Schedule.ContactCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ContactCollectionForm"/> form.
            </summary>
            <param name="collection">The <see cref="T:C1.C1Schedule.ContactCollection"/> object.</param>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.ContactCollectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ContactCollectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ContactCollectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.AppointmentForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm"/> represents the dialog form for editing
            <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment"/> objects.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.AppointmentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.#ctor(C1.Win.C1Schedule.C1Schedule)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm"/> form
            with default settings.
            </summary>
            <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.#ctor(C1.Win.C1Schedule.C1Schedule,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm"/> form
            with default settings.
            </summary>
            <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.</param>
            <param name="start">The start of an appointment.</param>
            <param name="end">The end of an appointment.</param>
            <param name="allDay">Determines whether the new appointment should be 
            an AllDay event.</param>
            <param name="recurring">Determines whether the new appointment should be recurring.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.AppointmentForm.#ctor(C1.Win.C1Schedule.C1Schedule,C1.C1Schedule.Appointment)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.AppointmentForm"/> form
            for editing of the specified <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment"/> object.
            </summary>
            <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.</param>
            <param name="appointment">The <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment"/> object.</param>
        </member>
        <member name="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment">
            <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.Forms.AppointmentForm.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.AppointmentMappingControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.AppointmentMappingControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.AppointmentMappingControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Framework.Alignment">
            <summary>
            Specifies the text alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="T:C1.Framework.ImageAlignment">
            <summary>
            Specifies the image alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="T:C1.Framework.ImageScaling">
            <summary>
            Specifies the image scaling.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="T:C1.Framework.GradientMode">
            <summary>
            Specifies the background gradient mode.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="T:C1.Framework.Style">
            <summary>
            <para>The <see cref="T:C1.Framework.Style"/> class contains display attributes that 
            determine the appearance of content on the screen/printer. 
            It includes most elements found in Css styles.</para>
            <para>The <see cref="T:C1.Framework.Style"/> class also contains methods for rendering 
            and measuring content (strings and images) based on the style settings 
            (fonts, margings, etc).</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are not hierarchical in the sense 
            that they don't have parent styles and don't inherit attributes 
            from the parent style. To create a new style based on an existing one, 
            you would clone the original style, then apply whatever attributes 
            you want to the new style.</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are hierarchical in the sense that 
            two style attributes (<see cref="P:C1.Framework.Style.Font"/> and <see cref="P:C1.Framework.Style.ForeBrush"/>) don't 
            need to be set. If these attributes are not set, they are inherited, 
            but not from a parent <see cref="T:C1.Framework.Style"/> object. Rather, these attributes 
            are inherited from the parent UI object.</para>
            <para>This type of inheritance make it easy to define a font on 
            a <see cref="T:C1.Framework.Style"/> associated with a parent UI object and have that 
            font be automatically applied to all UI objects contained in the parent. 
            By contrast, a <see cref="P:C1.Framework.Style.BackBrush"/> attribute is not explicitly inherited. 
            Instead, the parent UI object paints its client area with a brush, 
            and child UI objects have a transparent background by default,
            so the parent background shows through by default. Other attrivutes such
            as alignment, margins, padding, etc are also not inherited.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.Style.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Style"/> class with the specified name.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.Framework.Style"/> object.</param>
        </member>
        <member name="M:C1.Framework.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Style"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, paddig and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, paddig and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Clone">
            <summary>
            Creates an instance of the <see cref="T:C1.Framework.Style"/> class that is identical 
            to the current <see cref="T:C1.Framework.Style"/> (except for the <see cref="P:C1.Framework.Style.Locked"/> property,
            which is always false for clones).
            </summary>
            <returns>The copy of the current <see cref="T:C1.Framework.Style"/>.</returns>
        </member>
        <member name="E:C1.Framework.Style.StyleChanged">
            <summary>
            Fires when any elements of the <see cref="T:C1.Framework.Style"/> change.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Name">
            <summary>
            Gets or sets the style name.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Locked">
            <summary>
            Gets or sets whether the style is locked and cannot be modified.
            </summary>
            <remarks>
            This property is useful when you want to prevent code from accidentally 
            modifying 'stock' styles.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Font">
            <summary>
            Gets or sets the font used to paint text within the element.
            </summary>
            <remarks>
            If this property is set to null, the text will be painted using the font
            specified by the parent element's font.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.BackBrush">
            <summary>
            Gets or sets the brush used to render the element background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImage">
            <summary>
            Gets or sets the background image for the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageAlignment">
            <summary>
            Gets or sets the alignment used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageScaling">
            <summary>
            Gets or sets the scaling used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeBrush">
            <summary>
            Gets or sets the brush used to paint the text within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderBrush">
            <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Padding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Border">
            <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to draw the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderEdges">
            <summary>
            Gets <see cref="P:C1.Framework.Style.BorderEdges"/> object that defines the colors used to paint each edge of the borders.
            </summary>
            <remarks>
            <para>Normally, this property is empty, and the border is drawn using the color specified by the <see cref="P:C1.Framework.Style.BorderColor"/>
            property.</para>
            <para>If any of the members of this property are set to non-transparent colors, then the specified color
            is used to paint the specific border.</para>
            <para>This property is only applicable if the <see cref="P:C1.Framework.Style.Corners"/> are set to zero.</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Corners">
            <summary>
            Gets or sets the radii of the element corners.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Margins">
            <summary>
            Gets or sets the thickness of the margins around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Clip">
            <summary>
            Gets or sets whether long text should be clipped to the element area.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HorizontalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the horizontal direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.VerticalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the vertical direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageAlignment">
            <summary>
            Gets or sets how images should be aligned within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageScaling">
            <summary>
            Gets or sets how images should be scaled within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.WordWrap">
            <summary>
            Gets or sets whether text should be allowed to wrap within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Trimming">
            <summary>
            Gets or sets how to trim characters that do not fit in the space available.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Format">
            <summary>
            Gets or sets the format string used to convert the element value into a string.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Indent">
            <summary>
            Gets or sets the indentation for the first text element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ChildSpacing">
            <summary>
            Gets or sets the amount of space between child elements.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Width">
            <summary>
            Gets or sets the style width (set to -1 to use the default width).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Height">
            <summary>
            Gets or sets the style height (set to -1 to use the default height).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Cursor">
            <summary>
            Gets or sets the cursor that should be dispayed when the mouse is over an element with this style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotkeyPrefix">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.HotkeyPrefix"/> value determining how to display hot keys. 
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Hot">
            <summary>
            Gets or sets the style to be used when the element is hot.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Pressed">
            <summary>
            Gets or sets the style to be used when the element is pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotPressed">
            <summary>
            Gets or sets the style to be used when the element is hot and pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Disabled">
            <summary>
            Gets or sets the style to be used when the element is disabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Shadow">
            <summary>
            Gets or sets whether the style includes a shadow.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.DefaultStyle">
            <summary>
            Gets a reference to the default style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.GradientMode"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientBlend">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.Blend"/> used to paint the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientCenter">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient background in percentage units.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor2">
            <summary>
            Gets or sets the secondary color used to build the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GammaCorrection">
            <summary>
            Gets or sets whether to apply gamma correction to the background gradient.
            </summary>
        </member>
        <member name="T:C1.Framework.RowPanel">
            <summary>
            <para>Panel that stacks children horizontally.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlTable">
            <summary>
            <para>HtmlTable derives from HtmlDiv and contains a single GridPanel, exposed by
            the <see cref="P:C1.Framework.Html.HtmlTable.Table"/> property.</para>
            
            <para>HtmlTable does not derive directly from GridPanel for two reasons:</para>
            
            <para>1) To allow horizontal alignment of the table within the paragraph, and</para>
            <para>2) Because this is simpler than using an interface and different parent classes.</para>
            
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlCell">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.BaseView">
            <summary>
            The base view for all C1Schedule views.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseView.RefreshData(System.Boolean)">
            <summary>
            Refreshes all appointments
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseView.GoToDate(System.DateTime)">
            <summary>
            Moves view to the new date. 
            Base implementation sets first visible date to the specified value.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseView.DragToPoint(C1.Win.C1Schedule.UI.AppointmentElement,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="point"></param>
            <returns>return true if AppointmentElement has been recreated</returns>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseView.InterimDragToPoint(C1.Win.C1Schedule.UI.AppointmentElement,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="point"></param>
            <returns>return true if AppointmentElement has been recreated</returns>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.BaseView.AddAppointment(C1.C1Schedule.Appointment)">
            <summary>
            Adds a new AppointmentElement for the specified appointment
            </summary>
            <param name="appointment"></param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.BaseView.Item(System.Guid)">
            <summary>
            Returns AppointmentElement for the specified appointment Id if any.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm"/> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.CategoryCollection"/> object.
            Use this form for editing the full list of available categories.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.CategoryCollectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.CategoryCollectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.CategoryCollectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.CategoryCollectionForm.#ctor(C1.C1Schedule.CategoryCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm"/> form.
            </summary>
            <param name="collection">The <see cref="T:C1.C1Schedule.CategoryCollection"/> object.</param>
        </member>
        <member name="T:C1.C1Schedule.ICalExchanger">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ICalExchanger.ExportInternal(System.IO.Stream)">
            <summary>
            Exports the appointments's data to a stream in the iCal format. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the appointments's data will be exported.</param>
        </member>
        <member name="M:C1.C1Schedule.ICalExchanger.ImportInternal(System.IO.Stream)">
            <summary>
            Imports the scheduler's data from a stream whose data is in the ICal format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
        </member>
        <member name="T:C1.C1Schedule.AppointmentMappingCollection">
            <summary>
            Represents a generic collection of mappings for properties of 
            <see cref="T:C1.C1Schedule.BaseObject"/> derived objects to appropriate data fields. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.MappingCollectionBase`1">
            <summary>
            Represents a collection of mappings for properties of the 
            <see cref="T:C1.C1Schedule.BasePersistableObject"/> object to the appropriate data fields. 
            Names of properties are keys in this collection.
            </summary>
            <typeparam name="T">The type of the objects for mapping.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject"/>class 
            and have the default parameterless constructor.</typeparam>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.MappingCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.GetKeyForItem(C1.C1Schedule.MappingInfo)">
            <summary>
            Returns property name as the key for collection.
            </summary>
            <param name="item">The <see cref="T:C1.C1Schedule.MappingInfo"/> object.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.ReadObject(`0,System.Object,System.Boolean)">
            <summary>
            Fills internal object derived from BasePersistableObject 
            with values from specified bound object.
            </summary>
            <param name="internalObject"></param>
            <param name="boundObject"></param>
            <param name="raiseChanged">Specifies if internalObject should raise Changed 
            event during this method call</param>
            <returns>Value indicating if bound object was changed by this method.</returns>
            <remarks>Overriding method of derived class should call the base 
            class's ReadObject method or fill BasePersistableObject
            properties on it's own.</remarks>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.WriteObject(`0,System.Object)">
            <summary>
            When implemented in a derived class fills boundObject 
            with values from specified internalObject.
            </summary>
            <param name="internalObject">object from C1Schedule collection</param>
            <param name="boundObject">object from custom datasource</param>
            <remarks>Overriding method of derived class should call 
            the base class's WriteObject method or fill boundObject
            properties on it's own.</remarks>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.NewItem">
            <summary>
            Implementation in derived classes should return new object of type T.
            </summary>
            <returns>New object of type T.</returns>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.InsertItem(System.Int32,C1.C1Schedule.MappingInfo)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.MappingCollectionBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.BasePersistableObject.Id"/> property.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BasePersistableObject.Id"/> property  
            to be bound to the appropriate field in the data source. 
            </summary>
             <remarks> Each object derived from <see cref="T:C1.C1Schedule.BasePersistableObject"/> is identified 
            by either Id or Index property. 
            To allow data to be correctly restored from your data sources you should specify mapping 
            either for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping"/> or 
            for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping"/>.
            It makes sence in case if you bind to your data storages of Resources, Labels, 
            Contacts or Categories. 
            C1Schedule saves only Ids or Indexes of these objects in AppointmentSorage. 
            If there is no mapping for IdMapping or IndexMapping, C1Schedule won't be able to 
            identify Appointment's properties correctly in storages initialized by your data.
            </remarks>
        </member>
        <member name="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.BasePersistableObject.Index"/> property.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BasePersistableObject.Index"/> property 
            to be bound to the appropriate field in the data source. 
            </summary>
             <remarks> Each object derived from <see cref="T:C1.C1Schedule.BasePersistableObject"/> is identified 
            by either Id or Index property. 
            To allow data to be correctly restored from your data sources you should specify mapping 
            either for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping"/> or 
            for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping"/>.
            It makes sence in case if you bind to your data storages of Resources, Labels, 
            Contacts or Categories. 
            C1Schedule saves only Ids or Indexes of these objects in AppointmentSorage. 
            If there is no mapping for IdMapping or IndexMapping, C1Schedule won't be able to 
            identify Appointment's properties correctly in storages initialized by your data.
            </remarks>
        </member>
        <member name="P:C1.C1Schedule.MappingCollectionBase`1.Count">
            <summary>
            Gets the number of elements actually contained in 
            the <see cref="T:C1.C1Schedule.MappingCollectionBase`1"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingCollectionBase`1.Comparer">
            <summary>
            Gets the generic equality comparer that is used to determine equality 
            of keys in the collection.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.MappingCollectionBase`1.Disposed">
            <summary>
            Represents the method that handles the Disposed event of a component. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingCollectionBase`1.Site">
            <summary>
            Gets or sets the ISite associated with the IComponent. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.AppointmentMappingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.AppointmentMappingCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.AppointmentMappingCollection.ReadObject(C1.C1Schedule.Appointment,System.Object,System.Boolean)">
            <summary>
            Fills BaseObject object with values from specified boundObject.
            </summary>
            <param name="internalObject"></param>
            <param name="boundObject"></param>
            <param name="raiseChanged"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentMappingCollection.WriteObject(C1.C1Schedule.Appointment,System.Object)">
            <summary>
            Fills boundObject with values from specified BaseObject object.
            </summary>
            <param name="internalObject">Contact object</param>
            <param name="boundObject">object from custom datasource</param>
        </member>
        <member name="P:C1.C1Schedule.AppointmentMappingCollection.Body">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.Appointment.Body"/> 
            property of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of the <see cref="P:C1.C1Schedule.AppointmentMappingCollection.Body"/> allow 
            the <see cref="P:C1.C1Schedule.Appointment.Body"/> property 
            to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentMappingCollection.End">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.Appointment.End"/> 
            property of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.End"/> property 
            to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentMappingCollection.Location">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.Appointment.Location"/>
            property of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Location"/> property 
            to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentMappingCollection.Start">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.Appointment.Start"/>
            property of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Start"/> property 
            to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentMappingCollection.Subject">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.Appointment.Subject"/>
            property of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Subject"/> property 
            to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentMappingCollection.AppointmentProperties">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the memory field 
            which is intended to store the other properties of the <see cref="T:C1.C1Schedule.Appointment"/> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the the other properties of 
            the <see cref="T:C1.C1Schedule.Appointment"/> object to be bound to 
            the appropriate field in the data source. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BaseEnumEditor">
            <summary>
            Base UITypeEditor for all dynamic enums.
            </summary>
        </member>
        <member name="T:C1.Framework.XViewPopup">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.XViewPopup.XViewPopupMessageFilter">
            <summary>
            Message filter to detect mouse events while the popUp is shown and 
            close the form when a mouse click outside the popUp occurs.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewPopup.XViewPopupMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Checks the message loop for mouse messages while the popUp is displayed.
            If one is detected the position is checked to see if it is outside the form, 
            in which case the owner is notified.
            </summary>
        </member>
        <member name="T:C1.Framework.TextElement">
            <summary>
            <para>Element that displays a string.</para>
            
            <para>Alignment and formatting are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initalizes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style and contents.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style)">
            <summary>
            Initalizes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(System.String)">
            <summary>
            Initalizes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given text.
            </summary>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor">
            <summary>
            Initalizes a new instance of an empty <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.GetValue">
            <summary>
            Gets the string represented by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
            <returns>The string represented by this <see cref="T:C1.Framework.TextElement"/>.</returns>
        </member>
        <member name="P:C1.Framework.TextElement.Text">
            <summary>
            Gets or sets the string displayed by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TextElement.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.TextElement"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.FlowPanel">
            <summary>
            <para>Panel that stacks children horizontally or vertically.</para>
            </summary>
        </member>
        <member name="T:C1.Util.Design.Floaties.IFloatieOwnerExt">
            <summary>
            Additional stuff required (so far - Aug 2006) for C1Command only.
            </summary>
        </member>
        <member name="P:C1.Util.Design.Floaties.IFloatieOwnerExt.LogicalParent">
            <summary>
            Gets the control that is to be used instead of the real parent
            when checking that the parent is in focus etc.
            Used for popup menus.
            </summary>
        </member>
        <member name="P:C1.Util.Design.Floaties.IFloatieOwnerExt.DesignedComponent">
            <summary>
            Gets the designer component if it is distinct from what
            is returned by Control property.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Label">
            <summary>
            The <see cref="T:C1.C1Schedule.Label"/> class represents the label which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Label.#ctor">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Label"/> object with default parameters.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Label.#ctor(System.String)">
            <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label"/> object with specified text.
            </summary>
            <param name="text">The text of the label.</param>
        </member>
        <member name="M:C1.C1Schedule.Label.#ctor(System.String,System.String)">
            <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label"/> object with specified text and menu caption.
            </summary>
            <param name="text">The text of the label.</param>
            <param name="menuCaption">The menu caption for displaying label in dialogs.</param>
        </member>
        <member name="M:C1.C1Schedule.Label.#ctor(System.Drawing.Color,System.String,System.String)">
            <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label"/> object with specified color, text and menu caption.
            </summary>
            <param name="color">The color of the label.</param>
            <param name="text">The text of the label.</param>
            <param name="menuCaption">The menu caption for displaying label in dialogs.</param>
        </member>
        <member name="M:C1.C1Schedule.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:C1.C1Schedule.LabelCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.LabelCollection"/> is a collection of <see cref="T:C1.C1Schedule.Label"/> 
            objects which represents all available labels in C1Schedule object model.
            By default it contains the set of predefined labels. 
            Predefined labels are:
            	None
            	Important 
            	Business
            	Personal
            	Vacation
            	Must Attend
            	Deadline
            	Travel Required
            	Needs Preparation
            	Birthday
            	Anniversary
            	Phone Call
            It allows adding of custom labels.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.LabelCollection.NoneLabelId">
            <summary>
            Defines Id of the None label.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.LabelCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.LabelCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.LabelCollection.LoadDefaults">
            <summary>
            Restores the collection to its default state.
            </summary>
            <remarks>The <see cref="M:C1.C1Schedule.LabelCollection.LoadDefaults"/> method removes all 
            custom labels from the collection and leaves only the standard ones.
            </remarks>
        </member>
        <member name="T:C1.C1Schedule.LabelList">
            <summary>
            The <see cref="T:C1.C1Schedule.LabelList"/> is a list of <see cref="T:C1.C1Schedule.Label"/> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.LabelCollection"/> object 
            may be added to this list.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.ReminderForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ReminderForm"/> represents the dialog form for displaying
            all active <see cref="T:C1.C1Schedule.Reminder"/> objects. Once created it automatically 
            keeps track of all <see cref="T:C1.C1Schedule.Reminder"/> objects in the <see cref="T:C1.C1Schedule.ReminderCollection"/>
            collection. It pops up if there is an active <see cref="T:C1.C1Schedule.Reminder"/> object 
            and hides in other case. It shows information about active reminders 
            and allows user to snooze or dismiss selected reminders.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ReminderForm.#ctor(C1.Win.C1Schedule.C1Schedule)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ReminderForm"/> form.
            </summary>
            <param name="schedule">The owning <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ReminderForm.Initialize">
            <summary>
            Initializes controls with active reminders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.ReminderForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ReminderForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ReminderForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.CategoryListForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.CategoryListForm"/> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.CategoryList"/> object.
            Use this form for editing the list of categories assigned 
            to the <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.CategoryListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.CategoryListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.CategoryListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.CategoryListForm.#ctor(C1.C1Schedule.CategoryList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.CategoryCollectionForm"/> form.
            </summary>
            <param name="list">The <see cref="T:C1.C1Schedule.CategoryList"/> list to edit.</param>
        </member>
        <member name="P:C1.Win.C1Schedule.Forms.CategoryListForm.List">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryList"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.LabelMappingControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.LabelMappingControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.LabelMappingControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.CategoryMappingControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.CategoryMappingControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.CategoryMappingControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.DayElement">
            <summary>
            ColumnPanel used to show one day
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.AppointmentElementEx">
            <summary>
            AppointmentElement for DayView
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Category">
            <summary>
            The <see cref="T:C1.C1Schedule.Category"/> class represents the category which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Category.#ctor">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Category"/> object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Category.#ctor(System.String)">
            <summary>
            Creates custom <see cref="T:C1.C1Schedule.Category"/> object with specified text.
            </summary>
            <param name="text">The text of category.</param>
        </member>
        <member name="M:C1.C1Schedule.Category.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:C1.C1Schedule.CategoryCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.CategoryCollection"/> is a collection of <see cref="T:C1.C1Schedule.Category"/> 
            objects which represents all available categories in C1Schedule object model.
            By default it contains the set of predefined categories. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CategoryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CategoryCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CategoryCollection.LoadDefaults">
            <summary>
            Restores the collection to its default state.
            </summary>
            <remarks>The <see cref="M:C1.C1Schedule.CategoryCollection.LoadDefaults"/> method removes all 
            custom categories from the collection and leaves only the standard ones.
            </remarks>
        </member>
        <member name="T:C1.C1Schedule.CategoryList">
            <summary>
            The <see cref="T:C1.C1Schedule.CategoryList"/> is a list of <see cref="T:C1.C1Schedule.Category"/> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.CategoryCollection"/> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.CategoryList"/> to associate the set of <see cref="T:C1.C1Schedule.Category"/> objects 
            with an <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.PaletteForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.PaletteForm"/> represents the dialog form for selecting 
            background colors for the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.PaletteForm.#ctor(C1.Win.C1Schedule.C1Schedule)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.PaletteForm"/> form.
            </summary>
            <param name="schedule">The reference to the owning <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component.</param>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.PaletteForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.PaletteForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.PaletteForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Design.ThicknessEditor">
            <summary>
            <see cref="T:System.Drawing.Design.UITypeEditor"/> used to edit thickness properties. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.ThicknessEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Design.ThicknessEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.ThicknessEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Schedule.Design.ThicknessEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.ThicknessEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A <see cref="T:C1.Framework.Thickness"/> value containing the new value of the object.</returns>
        </member>
        <member name="T:C1.C1Schedule.C1BrushStyleEnum">
            <summary>
            Specifies the different patterns available for bruches.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.Transparent">
            <summary>
            Represents transparent brush.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.Solid">
            <summary>
            Represents solid brush.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.BackwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.Cross">
            <summary>
            Specifies horizontal and vertical lines that cross.  
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.DiagonalCross">
            <summary>
            A pattern of crisscross diagonal lines. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.ForwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper left to lower right. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.Horizontal">
            <summary>
            A pattern of horizontal lines. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.Vertical">
            <summary>
            A pattern of vertical lines. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.Wave">
            <summary>
            Specifies horizontal lines that are composed of tildes. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.C1BrushStyleEnum.ZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.C1Brush">
            <summary>
            Wrapper class for brushes. Only for serialization/deserialization purposes.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.#ctor">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush"/> object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Drawing.Brush)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush"/> object.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Drawing.Color,System.Drawing.Color,C1.C1Schedule.C1BrushStyleEnum)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush"/> object.
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new solid <see cref="T:C1.C1Schedule.C1Brush"/> object.
            </summary>
            <param name="backColor"></param>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.C1Brush.GetARGBstring(System.Drawing.Color)">
            <summary>
            Returns string representation of color in ARGB format.
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:C1.C1Schedule.C1Brush.ForeColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1Brush.BackColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1Brush.Style">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1Brush.Brush">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.C1Schedule.C1Brush.BrushInternal">
            <summary>
            Gets or sets WinForms/WebForms specific brush object based on the C1Brush definition. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.LabelStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.LabelStorage"/> is the storage for <see cref="T:C1.C1Schedule.Label"/> objects.
            It allows binding to the data source and mapping data source fields 
            to the label properties.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.LabelStorage.Labels">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.LabelCollection"/> object 
            that contains label related information. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.MappingInfo">
            <summary>
            This class provides information on the mapping of the single property 
            of the object to the appropriate data field. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.MappingInfo.#ctor(System.Type,System.String,System.Boolean,System.Object)">
            <summary>
            Use this ctor for simple properties that has the same types 
            in the internal object and in the bound object.
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <param name="required"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:C1.C1Schedule.MappingInfo.#ctor(System.Type,System.Type,System.String,System.Boolean,System.Object)">
            <summary>
            Use this ctor when property of bound object has to have the type other than 
            type of the internal object's property.
            </summary>
            <param name="type"></param>
            <param name="dataType"></param>
            <param name="propName"></param>
            <param name="required"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:C1.C1Schedule.MappingInfo.GetPropertyValue(System.Object)">
            <summary>
            Returns the property of specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.MappingInfo.SetPropertyValue(System.Object,System.Object)">
            <summary>
            Sets property of specified object to the specified value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1Schedule.MappingInfo.DataType">
            <summary>
            Gets the <see cref="T:System.Type"/> value determining the type of the data field 
            or property which can be bound to this object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingInfo.MappingName">
            <summary>
            Gets the <see cref="T:System.String"/> value determining the name of the data field 
            or property to be bound to this object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingInfo.IsMapped">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value indicating if this objects is mapped 
            to the data field or property.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingInfo.Required">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value indicating if mapping for this property is required or optional.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.MappingInfo.PropertyName">
            <summary>
            Gets the <see cref="T:System.String"/> value determining the name of the property 
            which should be mapped.
            </summary>
        </member>
        <member name="T:C1.Framework.TextBoxElement.EmbeddedTextBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Framework.IControlElement.Element">
            <summary>
            Gets a reference to the <see cref="P:C1.Framework.IControlElement.Element"/> that owns this <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.Clear">
            <summary>
            Removes all tabs and content from the TabElement.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.GetParentTab(C1.Framework.Element)">
            <summary>
            Gets the TabPageElement that contains a given child element.
            </summary>
            <param name="childElement">Child element in the Tab.</param>
            <returns>The TabPageElement that contains the given child element, or
            null if the element does not belong to any tab pages.</returns>
        </member>
        <member name="P:C1.Framework.TabElement.TabArea">
            <summary>
            Gets the RowPanel that contains the tabs.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.ContentArea">
            <summary>
            Gets the element that is currently displayed in the content area.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.SelectedTab">
            <summary>
            Gets or sets the selected TabPageElement.
            </summary>
        </member>
        <member name="T:C1.Framework.TabPageElement">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.RadioButtonElement">
            <summary>
            Radio button with text and image.
            </summary>
        </member>
        <member name="T:C1.Framework.CheckButtonElement">
            <summary>
            Check (toggle) button.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetCheckboxImage(System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
            Gets a check box image as a function of the current checkbox state.
            </summary>
            <param name="state">A value from the <see cref="T:System.Windows.Forms.VisualStyles.CheckBoxState"/> enumeration.</param>
            <returns>A checkbox image to be displayed in the element.</returns>
            <remarks>
            Override this method to provide your own images for checkboxes in various states.
            </remarks>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.ShowCheckBox">
            <summary>
            Gets or sets whether the button should display a checkbox image.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckBoxIndex">
            <summary>
            Gets or sets the index of the CheckBox element within the button.
            </summary>
            <remarks>
            <para>If there is no CheckBox element, this property returns -1. Setting the property to -1 removes the CheckBox element.</para>
            <para>Setting this property value greater than the number of children does not throw an exception. In this case, the
            maximum valid value (Children.Count) is used instead (e.g. CheckBoxIndex = 1000).</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.Checked">
            <summary>
            Gets or sets whether the button is checked.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckState">
            <summary>
            Gets or sets the button's CheckState (can be checked, unchecked, or indeterminate). 
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHr">
            <summary>
            Extends Element to provide a horizontal rule across the document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.GoToDate">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.GoToDate"/> represents the dialog form for specifying 
            target date and view to switch the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> component to.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.GoToDate.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.GoToDate"/> form.
            </summary>
            <param name="dateFormat">Format string for dispalying dates.</param>
            <param name="initialDate">Initial date selected in the dialog.</param>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.GoToDate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.GoToDate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.GoToDate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.Forms.GoToDate.Date">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value specifying the target date selected by user.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.Forms.GoToDate.ViewType">
            <summary>
            Gets the <see cref="T:C1.Win.C1Schedule.ScheduleViewEnum"/> value specifying the target view type selected by user.
            </summary>
        </member>
        <member name="M:C1.Win.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParser">
            <summary>
            Class used to parse that HTML into tags and text.
            </summary>
            <remarks>
            The main method in this class is <see cref="M:C1.Framework.Html.HtmlParser.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlParser.Tag"/> and <see cref="P:C1.Framework.Html.HtmlParser.Text"/> properties.
            </remarks>
        </member>
        <member name="T:C1.C1Schedule.XmlExchanger">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1Schedule.XmlExchanger.ExportInternal(System.IO.Stream)">
            <summary>
            Exports the appointments's data to a stream in the XML format. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream into which the appointments's data will be exported.</param>
        </member>
        <member name="M:C1.C1Schedule.XmlExchanger.ImportInternal(System.IO.Stream)">
            <summary>
            Imports the scheduler's data from a stream whose data is in the XML format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
        </member>
        <member name="T:C1.C1Schedule.SourceToCollectionItemsMap">
            <summary>
            Represents a mapping between data source and collection items and holds a cache
            of source items in order as they are represented in a source list. The latter
            necessary to get an instance of a deleted item.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SourceToCollectionItemsMap._mapTable">
            key - source item, value - SourceCollectionItemPair, 
            item[int].SourceItem - the same as source.item[int]
        </member>
        <member name="M:C1.C1Schedule.SourceToCollectionItemsMap.SetSourceItems(System.Collections.IList)">
            <summary>
            Initialize a source items cache.
            </summary>
            <param name="sourceList"></param>
        </member>
        <member name="M:C1.C1Schedule.SourceToCollectionItemsMap.UpdateByListChange(System.ComponentModel.ListChangedEventArgs,System.Collections.IList,System.Boolean@)">
            <summary>
            Updates the source items cache based on the specified list change action in
            the specified source list.
            Returns a map row affected by this change.
            </summary>
            <param name="e"></param>
            <param name="sourceList"></param>
            <param name="duplicateAdd"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.SourceToCollectionItemsMap.IsValidIndex(System.Int32)">
            <summary>
            Indicates whether the specified index is valid.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1Schedule.SourceToCollectionItemsMap.SourceCollectionItemPair">
            <summary>
            Represents a Source Item - Collection Item pair.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.SyncBatchInfo.ResetState">
            <summary>
            Finished means not Reset state.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.AppointmentStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.AppointmentStorage"/> is the storage 
            for <see cref="T:C1.C1Schedule.Appointment"/> objects. It allows binding to the data source 
            and mapping data source fields to the appointment properties.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentStorage.Appointments">
            <summary>
            Gets an <see cref="T:C1.C1Schedule.AppointmentCollection"/> object that contains appointment related information. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.BaseObjectMappingCollection`1">
            <summary>
            Represents a generic collection of mappings for properties 
            of the <see cref="T:C1.C1Schedule.BaseObject"/> derived objects to appropriate data fields. 
            </summary>
            <typeparam name="T">The type of the objects for mapping.
            It should be derived from the <see cref="T:C1.C1Schedule.BaseObject"/>class 
            and have the default parameterless constructor.</typeparam>
        </member>
        <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.BaseObjectMappingCollection`1"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.ReadObject(`0,System.Object,System.Boolean)">
            <summary>
            Fills BaseObject object with values from specified boundObject.
            </summary>
            <param name="internalObject"></param>
            <param name="boundObject"></param>
            <param name="raiseChanged"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.WriteObject(`0,System.Object)">
            <summary>
            Fills boundObject with values from specified BaseObject object.
            </summary>
            <param name="internalObject">Contact object</param>
            <param name="boundObject">object from custom datasource</param>
        </member>
        <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.TextMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.BaseObject.Text"/> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Text"/> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.ColorMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the <see cref="P:C1.C1Schedule.BaseObject.Color"/> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Color"/> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.CaptionMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for <see cref="P:C1.C1Schedule.BaseObject.MenuCaption"/> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.MenuCaption"/> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.PlatformIndependenceHelper.GetColor(System.UInt32)">
            <summary>
            Gets a platform specific Color object based on its integer representation.
            The byte ordering in the <paramref name="color"/> is ARGB, for example
            the constant 0x01020304 represents the color with the following components:
            A = 0x01
            R = 0x02
            G = 0x03
            B = 0x04
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.PlatformIndependenceHelper.IsEmptyColor(System.Drawing.Color)">
            <summary>
            Indicates whether the specified <paramref name="color"/> is transparent.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.Html.HtmlLoader">
            <summary>
            Utility class with static methods used for loading (and caching)
            text and images from the web, from disk, or from app resources.
            </summary>
        </member>
        <member name="T:C1.Framework.Corners">
            <summary>
            Represents corners associated with a user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Corners"/> class 
            using a separate radius for each corner. 
            </summary>
            <param name="leftTop">Radius of the left top corner, in pixels.</param>
            <param name="rightTop">Radius of the right top corner, in pixels.</param>
            <param name="leftBottom">Radius of the left bottom corner, in pixels.</param>
            <param name="rightBottom">Radius of the right bottom corner, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Corners"/> class 
            using the supplied radius for all corners.
            </summary>
            <param name="radius">Radius of all corners, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Corners.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Corners"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Equality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Inequality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are not equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Corners"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="P:C1.Framework.Corners.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Corners"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftTop">
            <summary>
            Gets or sets the radius for the left top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightTop">
            <summary>
            Gets or sets the radius for the right top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftBottom">
            <summary>
            Gets or sets the radius for the left bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightBottom">
            <summary>
            Gets or sets the radius for the right bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Corners"/> object is empty. 
            </summary>
        </member>
        <member name="T:C1.Framework.CornersConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Corners"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.CornersConverter"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Corners"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.BackgroundBrushProvider">
            <summary>
            Class that encapsulates <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> objects used to paint element backgrounds.
            It exposes properties that can be used to create and serialize <see cref="T:System.Drawing.SolidBrush"/>, 
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>, and <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> objects.
            </summary>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Gets an updated <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to fill a given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rc">Rectangle used to build the gradient brush if the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> 
            property is set to a value other than <b>None</b>.</param>
            <returns>A <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to paint an element's background.</returns>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.</returns>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> for this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GammaCorrection">
            <summary>
            Gets or sets whether gamma correction is applied to the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.BackColor">
            <summary>
            Gets or sets the main color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientColor">
            <summary>
            Gets or sets the secondary color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to a value other than <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.Blend"/> used to create the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Center">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Brush">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> object that may be something other than a <see cref="T:System.Drawing.SolidBrush"/> or 
            </summary>
        </member>
        <member name="T:C1.Framework.BlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to and from strings.
            </summary>
            <remarks>
            <para>The <see cref="T:System.Drawing.Drawing2D.Blend"/> object is converted to a string with the following format:</para>
            <para>[p1],[f1];[p2],[f2];...;[pn],[fn]</para>
            <para>Where the 'pi' are positions between 0 and 1 along the blend line and
            'fi' are factors between 0 and 1 that correspond to the amount of the 
            secondary color in the blend.</para>
            <para>The positions must be increasing, and the last one must be 1.</para>
            <para>This converter allows persisting <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to Xml.</para>
            </remarks>
            <example>
            These are some simple blend strings:
            <para>"0,0;1,1": default blend, starting with color1 (0,0) and finishing with color2 (1,1).</para>
            <para>"0,1;1,0": reverse blend, starting with color2 (1,0) and finishing with color1 (0,1).</para>
            <para>"0,0;.5,1;1,0": starts with color1, switches to color2 halfway, then back to color1.</para>
            <para>"0,0;.1,1;.9,1;1,0": starts with color1, switches to color2 at 10%, continues with color2 up to 90%, then switches back to color1.</para>
            </example>
        </member>
        <member name="T:C1.C1Schedule.StatusTypeEnum">
            <summary>
            Determines the type of status.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.StatusTypeEnum.Busy">
            This status means that a person is in the office but unavailable to others.
        </member>
        <member name="F:C1.C1Schedule.StatusTypeEnum.Free">
            This status means that a person is in the office and available to others. 
        </member>
        <member name="F:C1.C1Schedule.StatusTypeEnum.OutOfOffice">
            This status means that a person is out of the office and unavailable to others.
        </member>
        <member name="F:C1.C1Schedule.StatusTypeEnum.Tentative">
            This status means that a person is in the office and tentatively available to others.
        </member>
        <member name="F:C1.C1Schedule.StatusTypeEnum.Custom">
            This status represents all custom statuses added to the StatusCollection.
        </member>
        <member name="T:C1.C1Schedule.Status">
            <summary>
            The <see cref="T:C1.C1Schedule.Status"/> class represents an availability status 
            for the <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor">
            <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status"/> object with default parameters.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor(C1.C1Schedule.StatusTypeEnum)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Schedule.Status"/> class 
            and initializes it with the specified type. 
            </summary>
            <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor(System.String)">
            <summary>
            Creates a new instance of the custom <see cref="T:C1.C1Schedule.Status"/> object with the specified text.
            </summary>
            <param name="text">The <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor(System.String,System.String)">
            <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status"/> object with specified text and menu caption.
            </summary>
            <param name="text">The <see cref="T:System.String"/> value.</param>
            <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor(System.Drawing.Color,System.String,System.String)">
            <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status"/> object with specified color, 
            text and menu caption.
            </summary>
            <param name="color">The color which will be used for displaying status.</param>
            <param name="text">The <see cref="T:System.String"/> value.</param>
            <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor(System.Drawing.Color,System.String,System.String,C1.C1Schedule.C1Brush)">
            <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status"/> object with specified parameters.
            </summary>
            <param name="color">The color which will be used for displaying status.</param>
            <param name="text">The <see cref="T:System.String"/> value.</param>
            <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
            <param name="brush">The brush which will be used for displaying status.</param>
        </member>
        <member name="M:C1.C1Schedule.Status.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:C1.C1Schedule.Status.StatusType">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.StatusTypeEnum"/> value determining the type of the status. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.StatusCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.StatusCollection"/> is a collection of <see cref="T:C1.C1Schedule.Status"/> 
            objects which represents all available statuses in C1Schedule object model.
            By default it contains the set of predefined statuses. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.StatusCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.StatusCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.StatusCollection.LoadDefaults">
            <summary>
            Restores the collection to its default state.
            </summary>
            <remarks>The <see cref="M:C1.C1Schedule.StatusCollection.LoadDefaults"/> method removes all the custom 
            appointment statuses from the collection and leaves only the standard ones.
            </remarks>
        </member>
        <member name="P:C1.C1Schedule.StatusCollection.Item(C1.C1Schedule.StatusTypeEnum)">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.Status"/> object specified by the appointment status type. 
            For custom statuses returns the first occurrence.
            If there is no such <see cref="T:C1.C1Schedule.Status"/> object in the collection, returns null.
            </summary>
            <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum"/> value.</param>
            <returns>The <see cref="T:C1.C1Schedule.Status"/> object.</returns>
        </member>
        <member name="T:C1.C1Schedule.StatusList">
            <summary>
            The <see cref="T:C1.C1Schedule.StatusList"/> is a list of <see cref="T:C1.C1Schedule.Status"/> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.StatusCollection"/> object 
            may be added to this list.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.RecurrenceTypeEnum">
            <summary>
            Determines the types of recurrent appointments.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Daily">
            <summary>
            The recurring appointment reoccurs on a daily basis.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Workdays">
            <summary>
            The recurring appointment reoccurs every working day.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly">
            <summary>
            The recurring appointment reoccurs on a monthly basis. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.MonthlyNth">
            <summary>
            The recurring appointment reoccurs every N months. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Weekly">
            <summary>
            The recurring appointment reoccurs on a weekly basis.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly">
            <summary>
            The recurring appointment reoccurs on an yearly basis.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth">
            <summary>
            The recurring appointment reoccurs every N years.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.WeekDaysEnum">
            <summary>
            Determines the set of days and groups of days for recurrence patterns. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.None">
            <summary>
            No specific value; the actual value is obtained from 
            the root <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Sunday">
            <summary>
            Specifies Sunday.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Monday">
            <summary>
            Specifies Monday.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Tuesday">
            <summary>
            Specifies Tuesday. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Wednesday">
            <summary>
            Specifies Wednesday.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Thursday">
            <summary>
            Specifies Thursday.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Friday">
            <summary>
            Specifies Friday.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.Saturday">
            <summary>
            Specifies Saturday.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.WeekendDays">
            <summary>
            Specifies Saturday and Sunday (or what ever days according 
            to the settings of the C1Schedule).
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.WorkDays">
            <summary>
            Specifies work days (all days except weekend).
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekDaysEnum.EveryDay">
            <summary>
            Specifies every day of the week.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.WeekOfMonthEnum">
            <summary>
            Determines the week in a month in which the appointment will occur.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekOfMonthEnum.First">
            <summary>
            The recurring appointment will occur on the specified 
            day or days of the first week in the month. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekOfMonthEnum.Second">
            <summary>
            The recurring appointment will occur on the specified 
            day or days of the second week in the month. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekOfMonthEnum.Third">
            <summary>
            The recurring appointment will occur on the specified 
            day or days of the third week in the month. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekOfMonthEnum.Fourth">
            <summary>
            The recurring appointment will occur on the specified 
            day or days of the fourth week in the month. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.WeekOfMonthEnum.Last">
            <summary>
            The recurring appointment will occur on the specified 
            day or days of the last week in the month. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.RecurrencePattern">
            <summary>
            The <see cref="T:C1.C1Schedule.RecurrencePattern"/> class contains information 
            that describes the recurrence pattern and range 
            of the associated <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.RecurrencePattern.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:C1.C1Schedule.RecurrencePattern.GetOccurrence(System.DateTime,C1.C1Schedule.CalendarInfo)">
            <summary>
            Returns a specific instance of the Appointment object on the specified date.
            </summary>
            <param name="startDate"></param>
            <param name="info">CalendarInfo</param>
            <returns></returns>
            <remarks>The GetOccurrence method generates an exception if no appointment 
            of that series exists on the specified date.</remarks>
        </member>
        <member name="M:C1.C1Schedule.RecurrencePattern.FromXml(System.Xml.XmlNode)">
            <summary>
            Reconstructs recurrence pattern properties from an <see cref="T:System.Xml.XmlNode"/>. 
            </summary>
            <param name="node"></param>
            <returns>True if pattern has been changed.</returns>
        </member>
        <member name="M:C1.C1Schedule.RecurrencePattern.ToXml(System.Xml.XmlWriter)">
            <summary>
            Creates an XML encoding of the recurrence pattern properties. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.ParentAppointment">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.Appointment"/> object which represents
            the master appointment for this <see cref="T:C1.C1Schedule.RecurrencePattern"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.Description">
            <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.RecurrenceType">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.RecurrenceTypeEnum"/> value
            determining the type of recurrence (daily, monthly, etc.).
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.Interval">
             <summary>
             Gets or sets the <see cref="T:System.Int32"/> value specifying 
             the interval between occurrences of the recurrence. 
             The <see cref="P:C1.C1Schedule.RecurrencePattern.Interval"/> property works in conjunction with 
             the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> property to determine the cycle of the recurrence. 
             The maximum allowable value is 99.
             </summary>
            <remarks>For example, if the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> is set 
             to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Daily"/>, and the <see cref="P:C1.C1Schedule.RecurrencePattern.Interval"/> is set to 3, 
             the recurrence will occur every third day.</remarks> 
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.EndTime">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value indicating 
            the end time for the given occurrence of the recurrence pattern. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.StartTime">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value indicating 
            the start time for the given occurrence of the recurrence pattern. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.Duration">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> value indicating 
            the duration of each occurrence in the recurrence pattern.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.PatternStartDate">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value indicating 
            the start date of the recurrence pattern. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.PatternEndDate">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value indicating 
            the end date of the recurrence pattern. 
            </summary>
            <remarks>This property is optional but must be coordinated 
            with other properties when setting up a recurrence pattern. 
            If this property or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences"/> property is set, 
            the pattern is considered to be finite, and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate"/> 
            property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate"/> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences"/> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate"/> is true. 
            The <see cref="P:C1.C1Schedule.RecurrencePattern.Interval"/> property must be set before 
            setting <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate"/>.</remarks>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.Occurrences">
            <summary>
            Gets or sets the number of occurrences for the recurrence pattern.
            This property allows the definition of a recurrence pattern that 
            is only valid for the specified number of subsequent occurrences. 
            For example, you can set this property to 10 for a formal training 
            course that will be held on the next ten Thursday evenings.
            </summary>
            <remarks>This property must be coordinated with other properties 
            when setting up a recurrence pattern. 
            If the <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate"/> property 
            or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences"/> property is set, the pattern 
            is considered to be finite and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate"/> property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate"/> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences"/> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate"/> is true.</remarks>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.Instance">
            <summary>
            Get or sets the <see cref="T:C1.C1Schedule.WeekOfMonthEnum"/> value specifying 
            the count for which the recurrence pattern is valid for a given interval. 
            This property is only valid for recurrences of 
            the <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.MonthlyNth"/> and 
            <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth"/> types and allows the definition 
            of a recurrence pattern that is only valid for the Nth occurrence, 
            such as "the 2nd Sunday in March" pattern. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.WeekDaysEnum"/> value representing the mask 
            for week days on which the recurring appointment occurs. 
            Monthly and yearly patterns are only valid for a single day. 
            Weekly patterns are only valid as the Or of the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask"/>.
            </summary>
            <remarks>
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Daily"/>, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask"/> property 
              can only be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.EveryDay"/>; setting the property 
              to any other value will result in an exception.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Workdays"/>, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask"/> property 
              can only be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.WorkDays"/>; setting the property 
              to any other value will result in an exception.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Weekly"/>, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask"/> property 
              cannot be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.None"/>; doing so will result 
              in an exception being thrown.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly"/> or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly"/>
              the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask"/> property is not applicable.</remarks>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.DayOfMonth">
            <summary>
            Gets or sets the number of the day in its respective month on which 
            each occurrence will occur. Applicable only when the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> 
            property is set to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly"/> 
            or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly"/>.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.MonthOfYear">
            <summary>
            Gets or sets the value indicating which month of the year is valid 
            for the specified recurrence pattern. Can be a number from 1 to 12.
            This property is only valid for recurrence patterns whose <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType"/> 
            property is set to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth"/> 
            or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly"/>.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.NoEndDate">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating if
            the recurrence pattern is endless.
            </summary>
            <remarks>This property must be coordinated with other properties when 
            setting up a recurrence pattern. If the <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate"/> property 
            or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences"/> property is set, the pattern is considered 
            to be finite and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate"/> property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate"/> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences"/> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate"/> is true.</remarks>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.Exceptions">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList"/> object which holds the list 
            of <see cref="T:C1.C1Schedule.Appointment"/> objects that define the exceptions to that series 
            of appointments. <see cref="T:C1.C1Schedule.Appointment"/> objects are added to 
            the <see cref="P:C1.C1Schedule.RecurrencePattern.Exceptions"/> whenever a property in the corresponding 
            <see cref="T:C1.C1Schedule.Appointment"/> object is altered.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.RecurrencePattern.RemovedOccurrences">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList"/> object which holds the list 
            of <see cref="T:C1.C1Schedule.Appointment"/> objects removed from that series of appointments. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Day">
            <summary>
            Represents one day in the C1Schedule. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Day.#ctor(System.DateTime)">
            <summary>
            Creates new Day object.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.DayCollection">
            <summary>
            Collection of all days in the C1Schedule component.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.DayCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.DayCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.DayCollection.GetKeyForItem(C1.C1Schedule.Day)">
            <summary>
            Extracts the key from the specified element.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1Schedule.DateList">
            <summary>
            The <see cref="T:C1.C1Schedule.DateList"/> class is a collection of <see cref="T:System.DateTime"/> values.
            At addition of the new value, it cuts off the time part of the value
            and ensures that the value is not present in the list yet.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.DateList.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:C1.C1Schedule.DateList"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.DateList.InsertItem(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.DateList.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1Schedule.DateList.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:C1.C1Schedule.ActionTypeEnum">
            <summary>
            <see cref="T:C1.C1Schedule.ActionTypeEnum"/> determines the type of action. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.ActionTypeEnum.ExecuteApplication">
            <summary>
            Execute local application with specified parameters.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.ActionTypeEnum.NavigateToUrl">
            <summary>
            Open specified target in default browser.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Action">
            <summary>
            Represents an action to take when the current system time reaches 
            the start of the associated <see cref="T:C1.C1Schedule.Appointment"/> object.
            Doesn't implemented yet.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Action.#ctor(C1.C1Schedule.Appointment)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Action"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.C1Schedule.Appointment"/> object.</param>
        </member>
        <member name="M:C1.C1Schedule.Action.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Action"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Action.FromXml(System.Xml.XmlNode)">
            <summary>
            Reconstructs action properties from an <see cref="T:System.Xml.XmlNode"/>. 
            </summary>
            <param name="node"></param>
            <returns>True if an action has beed changed.</returns>
        </member>
        <member name="M:C1.C1Schedule.Action.ToXml(System.Xml.XmlWriter)">
            <summary>
            Creates an XML encoding of the action properties. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:C1.C1Schedule.Action.ParentAppointment">
            <summary>
            Gets or sets the owning <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Action.Command">
            <summary>
            Gets or sets the command string for the action.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Action.Parameters">
            <summary>
            Gets or sets parameters used when the action is invoked.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Action.Enabled">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating 
            whether the action is enabled. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.Action.Type">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.ActionTypeEnum"/> value determining 
            the type of action that will occur. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.StatusMappingControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.StatusMappingControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.StatusMappingControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Framework.ScaleMode">
            <summary>
            Specifies how to scale (or flow) the element to fit the pages.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ActualSize">
            <summary>
            Render element as it appears on the screen.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ScaleToPageWidth">
            <summary>
            Scale element so its width fits on a page.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ScaleToPageSize">
            <summary>
            Scale element to fit on a single page.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.FlowToPageWidth">
            <summary>
            Flow element to fit the available page width.
            </summary>
        </member>
        <member name="T:C1.Framework.ElementPrintDocument">
            <summary>
            Class that extends <see cref="T:System.Drawing.Printing.PrintDocument"/> to print <see cref="T:C1.Framework.Element"/> objects.
            </summary>
        </member>
        <member name="M:C1.Framework.IMnemonicElement.HandleMnemonic">
            <summary>
            Method that gets called when the user presses the hot key that corresponds to this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <returns>True if the hot key was handled by the element, false otherwise.</returns>
        </member>
        <member name="T:C1.Framework.Html.HtmlImage">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.WeekView">
            <summary>
            Panel that contains a grid background and positions appointment elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.WeekView.GoToDate(System.DateTime)">
            <summary>
            Moves view to the new date. 
            Base implementation sets first visible date to the specified value.
            </summary>
            <param name="date"></param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.WeekView.Item(System.Guid)">
            <summary>
            Returns AppointmentElement for the specified appointment Id if any.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.WeekGrid">
            <summary>
            GridPanel used to show days
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.TimeScaleEnum">
            <summary>
            Determines the time interval which is used for 
            displaying time slots in the DayView.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.FiveMinutes">
            <summary>
            5 minutes.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.SixMinutes">
            <summary>
            6 minutes.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.TenMinutes">
            <summary>
            10 minutes.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.FifteenMinutes">
            <summary>
            15 minutes.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.TwentyMinutes">
            <summary>
            20 minutes.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.ThirtyMinutes">
            <summary>
            30 minutes.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.TimeScaleEnum.OneHour">
            <summary>
            60 minutes.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.CalendarInfo">
            <summary>
            The <see cref="T:C1.C1Schedule.CalendarInfo"/> class class manages and exposes 
            all date-related data to C1Schedule controls. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CalendarInfo"/> component.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.GetDay(System.DateTime)">
            <summary>
            Returns Day object for specified date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.FillDayCollection(C1.C1Schedule.DayCollection)">
            <summary>
            Returns DayCollection for all dates from the FirstDate till the LastDate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.GetDays(System.DateTime,System.DateTime)">
            <summary>
            Returns list of Day objects for all dates from the start till the end.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.GetOrdinalNumber(System.Int32)">
            <summary>
            Returns string representation of the specified ordinal number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.GetDayOfWeekName(System.DayOfWeek)">
            <summary>
            Returns the culture-specific full name of the specified day of the week
            based on the current UI culture.
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.GetMonthName(System.Int32)">
            <summary>
            Returns the culture-specific full name of the specified month based on the 
            current UI culture.
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CalendarInfo.GetInstanceName(C1.C1Schedule.WeekOfMonthEnum)">
            <summary>
            Returns the culture-specific full name of the specified instance based on the 
            current UI culture.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="E:C1.C1Schedule.CalendarInfo.SelectedDaysChanged">
            <summary>
            Occurs when the range of selected days was changed.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.CalendarInfo.PropertyChanged">
            <summary>
            Occurs when the property of <see cref="T:C1.C1Schedule.CalendarInfo"/> object was changed.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo"/> object which 
            holds culture-specific information used by C1Schedule components.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.DateFormatString">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value determining display format 
            of date values to use in appointments and built-in dialogs.
            </summary>
            <remarks>The actual representation depends on the value 
            of the <see cref="P:C1.C1Schedule.CalendarInfo.Culture"/> property.</remarks>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.TimeFormatString">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value determining display format 
            of time values to use in appointments and built-in dialogs.
            </summary>
            <remarks>The actual representation depends on the value 
            of the <see cref="P:C1.C1Schedule.CalendarInfo.Culture"/> property.</remarks>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.WeekStart">
            <summary>
            Gets or sets the <see cref="T:System.DayOfWeek"/> value determining
            the first day of the week. Default is system settings.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.WorkDays">
            <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.WorkDays"/> object containing the 
            set of working days in one week.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.NoWorkingDays">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether
            the <see cref="T:C1.C1Schedule.CalendarInfo"/> object has any working days.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.TimeScale">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> value specifying the time interval 
            which is used for displaying time slots in the DayView.
            </summary>
            <remarks>The <see cref="P:C1.C1Schedule.CalendarInfo.TimeScale"/> property cannot be set to any 
            arbitrary value. When assigning a value to this property it is 
            automatically calculated so as to be equal to the nearest 
            <see cref="T:C1.C1Schedule.TimeScaleEnum"/> value.</remarks>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.TimeInterval">
            <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.TimeScaleEnum"/> value specifying the time interval 
            which is used for displaying time slots in the DayView.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.StartDayTime">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> value specifying the beginning 
            of the working time.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.EndDayTime">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> value specifying 
            the end of the working time.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.FirstDate">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value specifying minimum date allowed. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.LastDate">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> value specifying maximum date allowed. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.Holidays">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> object which holds
            the list of holidays (non-working days in addition to weekends).
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CalendarInfo.WeekendExceptions">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> object which holds
            the list of of weekend days which should be working.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.WorkDays">
            <summary>
            The <see cref="T:C1.C1Schedule.WorkDays"/> class is a list of working days for the single week.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.WorkDays.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.WorkDays"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.WorkDays.AddRange(System.DayOfWeek[])">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.WorkDays"/> object.
            </summary>
            <param name="items">The array of <see cref="T:System.DayOfWeek"/> objects.</param>
        </member>
        <member name="T:C1.Win.C1Schedule.Design.C1CalendarActionList">
            <summary>
            Summary description for C1ScheduleActionList.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.FileFormatEnum">
            <summary>
            Specifies the format of the exported or imported file.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.FileFormatEnum.XML">
            <summary>
            XML format (ComponentOne's own format).
            </summary>
        </member>
        <member name="F:C1.C1Schedule.FileFormatEnum.iCal">
            <summary>
            iCal format according to RFC 2445.
            Format specification could be found here:
            http://tools.ietf.org/rfc/rfc2445.txt
            </summary>
        </member>
        <member name="F:C1.C1Schedule.FileFormatEnum.Binary">
            <summary>
            Binary format.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.ResourceStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.ResourceStorage"/> is the storage for <see cref="T:C1.C1Schedule.Resource"/> objects.
            It allows binding to the data source and mapping data source fields 
            to the resource properties.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.ResourceStorage.Resources">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceCollection"/> object 
            that contains resource related information. 
            </summary>
        </member>
        <member name="T:C1.C1Schedule.CategoryMappingCollection">
            <summary>
            Represents a generic collection of mappings for properties of 
            <see cref="T:C1.C1Schedule.BaseObject"/> derived objects to appropriate data fields. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CategoryMappingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CategoryMappingCollection"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CategoryMappingCollection.ReadObject(C1.C1Schedule.Category,System.Object,System.Boolean)">
            <summary>
            Fills BaseObject object with values from specified boundObject.
            </summary>
            <param name="internalObject"></param>
            <param name="boundObject"></param>
            <param name="raiseChanged"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Schedule.CategoryMappingCollection.WriteObject(C1.C1Schedule.Category,System.Object)">
            <summary>
            Fills boundObject with values from specified BaseObject object.
            </summary>
            <param name="internalObject">Contact object</param>
            <param name="boundObject">object from custom datasource</param>
        </member>
        <member name="P:C1.C1Schedule.CategoryMappingCollection.TextMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for the 
            <see cref="P:C1.C1Schedule.BaseObject.Text"/> property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Text"/> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CategoryMappingCollection.CaptionMapping">
            <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo"/> object for 
            the <see cref="P:C1.C1Schedule.BaseObject.MenuCaption"/> property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.MenuCaption"/> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParagraph">
            <summary>
            Class that represents an HTML paragraph.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.AppointmentCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.AppointmentCollection"/> is a collection of all 
            <see cref="T:C1.C1Schedule.Appointment"/> objects in the C1Schedule component.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.Add">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment"/> object 
            with default settings and adds it to the collection.
            </summary>
            <returns>The <see cref="T:C1.C1Schedule.Appointment"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.DateTime)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment"/> object 
            with specified parameters and adds it to the collection.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="end">The <see cref="T:System.DateTime"/> value which specifies 
            the end date and time of the appointment.</param>
            <returns>The <see cref="T:C1.C1Schedule.Appointment"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.TimeSpan)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment"/> object 
            with specified parameters and adds it to the collection.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="duration">The <see cref="T:System.TimeSpan"/> value which specifies 
            the duration of the appointment.</param>
            <returns>The <see cref="T:C1.C1Schedule.Appointment"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.DateTime,System.String)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment"/> object 
            with specified parameters and adds it to the collection.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="end">The <see cref="T:System.DateTime"/> value which specifies 
            the end date and time of the appointment.</param>
            <param name="subject">The <see cref="T:System.String"/> value wich contains 
            the subject of the appointment.</param>
            <returns>The <see cref="T:C1.C1Schedule.Appointment"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment"/> object 
            with specified parameters and adds it to the collection.
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the appointment.</param>
            <param name="duration">The <see cref="T:System.TimeSpan"/> value which specifies 
            the duration of the appointment.</param>
            <param name="subject">The <see cref="T:System.String"/> value wich contains 
            the subject of the appointment.</param>
            <returns>The <see cref="T:C1.C1Schedule.Appointment"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrence(C1.C1Schedule.Appointment,System.DateTime,C1.C1Schedule.CalendarInfo)">
            <summary>
            Returns a specific instance of the Appointment object on the specified date.
            </summary>
            <param name="pattern"></param>
            <param name="startDate"></param>
            <param name="info"></param>
            <returns></returns>
            <remarks>The GetOccurrence method generates an exception if no appointment 
            of that series exists on the specified date.</remarks>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(System.DateTime,System.DateTime)">
            <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList"/> object which contains 
            the full list of <see cref="T:C1.C1Schedule.Appointment"/> objects in the specified time interval. 
            </summary>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the interval.</param>
            <param name="end">The <see cref="T:System.DateTime"/> value which specifies 
            the end date and time of the interval.</param>
            <returns>The <see cref="T:C1.C1Schedule.AppointmentList"/> object.</returns>
            <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment"/>
            object for recurring appointments if they haven't been created yet.
            </remarks>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(C1.C1Schedule.Appointment,System.DateTime,System.DateTime)">
            <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList"/> object which contains 
            the list of occurences of the specified master appointment 
            in the specified time interval. 
            </summary>
            <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment"/> object 
            representing the master appointment.</param>
            <param name="start">The <see cref="T:System.DateTime"/> value which specifies 
            the start date and time of the interval.</param>
            <param name="end">The <see cref="T:System.DateTime"/> value which specifies 
            the end date and time of the interval.</param>
            <returns>The <see cref="T:C1.C1Schedule.AppointmentList"/> object.</returns>
            <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment"/>
            object for recurring appointments if they haven't been created yet.</remarks>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.GetConflicts(C1.C1Schedule.Appointment)">
            <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList"/> object which contains 
            the list of occurences of <see cref="T:C1.C1Schedule.Appointment"/> objects 
            which are in conflict with the specified appointment.
            </summary>
            <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment"/> object.</param>
            <returns>The <see cref="T:C1.C1Schedule.AppointmentList"/> object.</returns>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.ClearItems">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.RemoveItem(System.Int32)">
            <summary>
            Overrides the default behaviour.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.InsertItem(System.Int32,C1.C1Schedule.Appointment)">
            <summary>
            Overrides the default behaviour.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.SetItem(System.Int32,C1.C1Schedule.Appointment)">
            <summary>
            Overrides the default behaviour.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.C1Schedule.AppointmentCollection.AddRange(C1.C1Schedule.Appointment[])">
            <summary>
            Adds an array of <see cref="T:C1.C1Schedule.Appointment"/> objects to the collection.
            This methods clears collection before adding new items. 
            Don't use it if you want to save previously existed items.
            </summary>
            <param name="items">An array of <see cref="T:C1.C1Schedule.Appointment"/> objects.</param>
        </member>
        <member name="E:C1.C1Schedule.AppointmentCollection.AppointmentRecurrenceStateChanged">
            <summary>
            Occurs when RecurrenceState of an appointment is changed.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.AppointmentCollection.AppointmentBeforeDelete">
            <summary>
            Occurs before an apointment is deleted.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.AppointmentCollection.AppointmentCustomAction">
            <summary>
            Occurs when a custom action of an appointment executes. 
            </summary>
        </member>
        <member name="E:C1.C1Schedule.AppointmentCollection.AppointmentAdded">
            <summary>
            Occurs when an appointment was added.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.AppointmentCollection.AppointmentRemoved">
            <summary>
            Occurs when an appointment was removed.
            </summary>
        </member>
        <member name="E:C1.C1Schedule.AppointmentCollection.AppointmentChanged">
            <summary>
            Occurs when an appointment was changed.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.AppointmentCollection.ParentStorage">
            <summary>
            Gets the reference to the owning <see cref="T:C1.C1Schedule.AppointmentStorage"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.AppointmentList">
            <summary>
            The <see cref="T:C1.C1Schedule.AppointmentList"/> is a sortable collection of 
            <see cref="T:C1.C1Schedule.Appointment"/> objects.
            </summary>
            <remarks>The <see cref="T:C1.C1Schedule.AppointmentList"/> is not guaranteed to be sorted. 
            You must sort the <see cref="T:C1.C1Schedule.AppointmentList"/> before performing operations
            that require the <see cref="T:C1.C1Schedule.AppointmentList"/> to be sorted.</remarks>
        </member>
        <member name="M:C1.C1Schedule.AppointmentList.Sort">
            <summary>
            Sorts the elements in the entire AppointmentList using the default comparer
            (by the Appointment.Start value).
            </summary>
        </member>
        <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Comparison{C1.C1Schedule.Appointment})">
            <summary>
            Sorts the elements in the entire AppointmentList using 
            the specified System.Comparison. 
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> 
            to use when comparing elements.</param>
        </member>
        <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Collections.Generic.IComparer{C1.C1Schedule.Appointment})">
            <summary>
            Sorts the elements in the entire AppointmentList using 
            the specified comparer. 
            </summary>
            <param name="comparer">The IComparer{Appointment} implementation to use 
            when comparing elements, or a null reference (Nothing in Visual Basic) 
            to use the default comparer.</param>
        </member>
        <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{C1.C1Schedule.Appointment})">
            <summary>
            Sorts the elements in a range of elements in AppointmentList using 
            the specified comparer. 
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer{Appointment} implementation to use 
            when comparing elements, or a null reference (Nothing in Visual Basic) 
            to use the default comparer.</param>
        </member>
        <member name="T:C1.C1Schedule.AppointmentEventArgs">
            <summary>
            The <see cref="T:C1.C1Schedule.AppointmentEventArgs"/> class describes event data for <see cref="F:C1.C1Schedule.AppointmentEventArgs.Appointment"/> events.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.AppointmentEventArgs.Appointment">
            <summary>
            Gets the appointment which the event was raised for. 
            </summary>
        </member>
        <member name="M:C1.C1Schedule.AppointmentEventArgs.#ctor(C1.C1Schedule.Appointment)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.AppointmentEventArgs"/>
            class with the specified appointment. 
            </summary>
            <param name="appointment"></param>
        </member>
        <member name="T:C1.C1Schedule.CancelAppointmentEventHandler">
            <summary>
            Delegate for handling the cancelable event involving a single <see cref="T:C1.C1Schedule.Appointment"/> object. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.C1Schedule.CancelAppointmentEventArgs">
            <summary>
            The <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs"/> class describes event data 
            for <see cref="F:C1.C1Schedule.CancelAppointmentEventArgs.Appointment"/> events.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.CancelAppointmentEventArgs.Appointment">
            <summary>
            Gets the <see cref="F:C1.C1Schedule.CancelAppointmentEventArgs.Appointment"/> object which the event was raised for. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.CancelAppointmentEventArgs.Cancel">
            <summary>
            Set to true to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.CancelAppointmentEventArgs.#ctor(C1.C1Schedule.Appointment)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs"/>
            class with the specified appointment. 
            </summary>
            <param name="appointment">The <see cref="F:C1.C1Schedule.CancelAppointmentEventArgs.Appointment"/> object.</param>
        </member>
        <member name="T:C1.C1Schedule.CategoryStorage">
            <summary>
            The <see cref="T:C1.C1Schedule.CategoryStorage"/> is the storage for <see cref="T:C1.C1Schedule.Category"/> objects.
            It allows binding to the data source and mapping data source fields 
            to the category properties.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.CategoryStorage.Categories">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryCollection"/> object that contains 
            category related information. 
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SC">
            <summary>
            System Menu Command Values
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SWP">
            <summary>
            SetWindowPos flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CDS">
            <summary>
            Flags for ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DISP">
            <summary>
            Return values of the ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WM">
            <summary>
            Windows messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.EM">
            <summary>
            EditControl window messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SB">
            <summary>
            WM_HSCROLL and WM_VSCROLL notifications codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BST">
            <summary>
            BM_GETSTATE flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BM">
            <summary>
            BM_XXX flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODT">
            <summary>
            DRAWITEMSTRUCT control types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODA">
            <summary>
            DRAWITEMSTRUCT drawing actions.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODS">
            <summary>
            DRAWITEMSTRUCT visual states.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.C1">
            <summary>
            ComponentOne constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOperationCodes">
            <summary>
            Specifies a raster-operation code, used by BitBlt function and other.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SW">
            <summary>
            ShowWindow() function codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PRF">
            <summary>
            WM_PRINT drawing options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SF">
            <summary>
            Rich edit data format types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SFF">
            <summary>
            Rich edit data format replacement options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SCF">
            <summary>
            EM_SETCHARFORMAT / EM_GETCHARFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFM">
            <summary>
            CHARFORMAT mask values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFE">
            <summary>
            CHARFORMAT effects.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TO">
            <summary>
            EM_SETTYPOGRAPHYOPTIONS flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TA">
            <summary>
            Text Alignment Options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DCX">
            <summary>
            GetDCEx() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GW">
            <summary>
            GetWindow() Constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GA">
            <summary>
            GetAncestor() constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ETO">
            <summary>
            ExtTextOut() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SetBkModeConsts">
            <summary>
            SetBkMode modes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OBJ">
            <summary>
            GetObjectType() returning values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TMPF">
            <summary>
            TEXTMETRIC tmPitchAndFamily flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OLE">
            <summary>
            OLE constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS">
            <summary>
            CreateWindow() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS_EX">
            <summary>
            Extended Window Styles
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ES">
            <summary>
            CreateWindow() flags for edit controls.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFC">
            <summary>
            DrawFrameControl(), type of frame control to draw.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFCS">
            <summary>
            DrawFrameControl(), state of control.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PS">
            <summary>
            CreatePen() flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GWL">
            <summary>
            SetWindowLong() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GR">
            <summary>
            GetGuiResources() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RGN">
            <summary>
            ExtSelectClipRgn() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ScrollWindowFlags">
            <summary>
            ScrollWindowEx flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MA">
            <summary>
            WM_MOUSEACTIVATE Return Codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOp">
            <summary>
            Constants for SetROP2
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.AtomName">
            <summary>
            Name of Atom create by GDI+ for current thread.
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.IsShutdown">
            <summary>
            Gets true if GDI+ currently shutdown.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DM">
            <summary>
            Fiels of DEVMODE structure.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GetDeviceCapsConsts">
            <summary>
            GetDeviceCaps() constants
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SORT">
            <summary>
            Sorting IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LANG">
            <summary>
            Primary language IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SUBLANG">
             <summary>
              Sublanguage IDs.
            
              The name immediately following SUBLANG_ dictates which primary
              language ID that sublanguage ID can be combined with to form a
              valid language ID.
             </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LOCALE">
            <summary>
            Locale Types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.FixFpu">
            <summary>
            usage:
             using (FixFpu ff = new FixFpu())
             { do printer stuff }
            or
             do printer stuff
             FixFpu.Doit();
            </summary>
        </member>
        <member name="T:C1.Framework.GridCell">
            <summary>
            This class is an accessor for getting and setting elements at intersections
            of grid rows and columns. The actual elements are stored in the rows.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlReader">
            <summary>
            <para>Class used to parse that HTML into tags and text.</para>
            
            <para>The main method is <see cref="M:C1.Framework.Html.HtmlReader.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlReader.Tag"/> and <see cref="P:C1.Framework.Html.HtmlReader.Text"/> properties.</para>
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.ScheduleTheme">
            <summary>
            The <see cref="T:C1.Framework.Theme"/> class represents the theme for the C1Schedule control.
            It is a set of <see cref="T:C1.Framework.Style"/> objects which contain display attributes 
            that determine the appearance of control. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.ReadCustomData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.WriteCustomData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.OnThemeChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.ScheduleTheme.LoadThemes(System.String)">
            <summary>
            Loads a collection of themes from an Xml file.
            </summary>
            <param name="fileName">Name of the Xml file that contains the themes.</param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ComponentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.System">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.System"/> type.
            </summary>
            <remarks>Use this theme to let your application automatically change its appearance
            in accordance with the current desktop settings.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WinXPBlue">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPBlue"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007Blue">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007Black">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Black"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Office2007Silver">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Silver"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WinXPSilver">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPSilver"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WinXPOlive">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPOlive"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Royale">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Royale"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Yahoo">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Yahoo"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Aero">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Aero"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.XmlDefinition">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value representing the VisualStyle in xml encoding.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.BaseFont">
            <summary>
            Set this property in order to change <see cref="P:C1.Framework.Style.Font"/>values
            in all <see cref="T:C1.Framework.Style"/> objects at once.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TitleImage">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> object which should be used 
            for displaying the image in the right corner of the title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TimeRulerMinutesFont">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> object which should be used 
            for displaying minutes on the Time Ruler.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ToolTipBackgroundGradient">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.BackgroundGradient"/> value which determines
            tooltips background.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ToolTipRoundedCorners">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value determining whether
            to show tooltips with rounded corners.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TitleText">
            <summary>
            Gets or sets the string which is displayed in the title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowMinuteLine">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value determining whether to
            show line between minutes on the time ruler.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.ShowDayStatus">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value determining whether to
            show day availability status in the Day View.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.BubbleLook">
            <summary>
            Gets aor sets a <see cref="T:System.Boolean"/> value determining
            how to show appointments. Set this property to true to
            show bubble look appointments with gradient background.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.BackGround">
            <summary>
            Set this property in order to change the base palette color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.BackGround2">
            <summary>
            Set this property in order to change the complementary palette color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Common">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the main style of control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Header">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the header. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Title">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the title. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Info">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of information in the header of the control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Today">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the current day header in the month view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.CurrentTime">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the current time label on the time ruler. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.MonthDayHeader">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the day header in the month view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.MonthDayHeaderSelected">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the selected day header in the month view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WeekDayHeader">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the day header in the week view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WeekDayHeaderSelected">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the selected day header in the week view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.DayViewHeader">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the day header in the day view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.DayViewDayName">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the day name part of the day header in the day view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.DayViewHeaderSelected">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the selected day header in the day view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.TimeRuler">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the time ruler in the day view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.MonthViewGridHeader">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the grid header in the month view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.Appointment">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of the appointment element. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.WorkHour">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of work hours in the day view. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.ScheduleTheme.FreeHour">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the appearance of free hours in the day view. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.MonthView">
            <summary>
            Panel that contains a grid background and positions appointment elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.MonthView.GoToDate(System.DateTime)">
            <summary>
            Moves view to the new date. 
            Base implementation sets first visible date to the specified value.
            </summary>
            <param name="date"></param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.MonthView.Item(System.Guid)">
            <summary>
            Returns AppointmentElement for the specified appointment Id if any.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.MonthGrid">
            <summary>
            GridPanel used to show days
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.DayView">
            <summary>
            Panel that contains a grid background and positions appointment elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.DayView.GoToDate(System.DateTime)">
            <summary>
            Moves view to the new date. 
            Base implementation sets first visible date to the specified value.
            </summary>
            <param name="date"></param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.DayView.WeekView">
            <summary>
            Gets or sets value indicating view mode of this view.
            If true, the view shows all working of the single week.
            If false, the view shows only one day.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.DayView.Item(System.Guid)">
            <summary>
            Returns AppointmentElement for the specified appointment Id if any.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Schedule.UI.CalendarTheme">
            <summary>
            The <see cref="T:C1.Framework.Theme"/> class represents the theme for the C1Calendar control.
            It is a set of <see cref="T:C1.Framework.Style"/> objects which contain display attributes 
            that determine the appearance of control. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.LoadThemes(System.String)">
            <summary>
            Loads a collection of themes from an Xml file.
            </summary>
            <param name="fileName">Name of the Xml file that contains the themes.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.OnThemeChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.ReadCustomData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.UI.CalendarTheme.WriteCustomData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.System">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.System"/> type.
            </summary>
            <remarks>Use this theme to let your application automatically change its appearance
            in accordance with the current desktop settings.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.WinXPBlue">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPBlue"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2007Blue">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2007Black">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Black"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Office2007Silver">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Silver"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.WinXPSilver">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPSilver"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.WinXPOlive">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.WinXPOlive"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Royale">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Royale"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Yahoo">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Yahoo"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Aero">
            <summary>
            Gets the predefined theme of the <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Aero"/> type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.ComponentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.XmlDefinition">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value representing the VisualStyle in xml encoding.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.BaseFont">
            <summary>
            Set this property in order to change <see cref="P:C1.Framework.Style.Font"/>values
            in all <see cref="T:C1.Framework.Style"/> objects at once.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.ImagePrevious">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> object which should be used 
            for displaying the "Previous" button.
            If this property isn't null, the <see cref="P:C1.Win.C1Schedule.UI.CalendarTheme.SymbolPrevious"/> property
            will be ignored.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.ImageNext">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/> object which should be used 
            for displaying the "Next" button.
            If this property isn't null, the <see cref="P:C1.Win.C1Schedule.UI.CalendarTheme.SymbolNext"/> property
            will be ignored.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.SymbolPrevious">
            <summary>
            Gets or sets the <see cref="T:System.Char"/> value determining 
            the symbol which should be used for the "Previous" button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.SymbolNext">
            <summary>
            Gets or sets the <see cref="T:System.Char"/> value determining 
            the symbol which should be used for the "Next" button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Common">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the main style of control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Day">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the ordinal day.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.DaySelected">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the selected day.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.DaySelectedBold">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the day which is selected and bold at the same time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.DayBold">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the bold day.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.DayTrail">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the trail day. Trail day is a day which doesn't belong to the currently
            displayed month (i.e. the day before the first or after the last day of the month).
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.DayHeader">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the day header.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.DayToday">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the displaying style of the current day.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Header">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of the month header.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.UI.CalendarTheme.Button">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> object determining 
            the style of navigation buttons.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.Contact">
            <summary>
            The <see cref="T:C1.C1Schedule.Contact"/> class represents the person information.
            Not real class just sample for prototyping.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Contact.#ctor">
            <summary>
            Creates the new <see cref="T:C1.C1Schedule.Contact"/> object.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.Contact.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:C1.C1Schedule.ContactCollection">
            <summary>
            The <see cref="T:C1.C1Schedule.ContactCollection"/> is a collection of <see cref="T:C1.C1Schedule.Contact"/> 
            objects which represents all available contacts in C1Schedule object model.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ContactCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ContactCollection"/> class.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.ContactList">
            <summary>
            The <see cref="T:C1.C1Schedule.ContactList"/> is a list of <see cref="T:C1.C1Schedule.Contact"/> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.ContactCollection"/> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.ContactList"/> to associate the set of <see cref="T:C1.C1Schedule.Contact"/> objects
            with an <see cref="T:C1.C1Schedule.Appointment"/> object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Design.Forms.ContactMappingControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ContactMappingControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.Forms.ContactMappingControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.NotifyCollectionChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged"/> event. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Add">
            <summary>
            One or more items were added to the collection. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Remove">
            <summary>
            One or more items were removed from the collection. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Replace">
            <summary>
            One or more items were replaced in the collection.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Move">
            <summary>
            One or more items were moved within the collection.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.NotifyCollectionChangedAction.Reset">
            <summary>
            The content of the collection changed dramatically.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.NotifyCollectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="changedItems"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="changedItem"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="newItems"></param>
            <param name="oldItems"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="changedItems"></param>
            <param name="startingIndex"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="changedItem"></param>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="newItem"></param>
            <param name="oldItem"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="newItems"></param>
            <param name="oldItems"></param>
            <param name="startingIndex"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="changedItems"></param>
            <param name="index"></param>
            <param name="oldIndex"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="changedItem"></param>
            <param name="index"></param>
            <param name="oldIndex"></param>
        </member>
        <member name="M:C1.C1Schedule.NotifyCollectionChangedEventArgs.#ctor(C1.C1Schedule.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.NotifyCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action"></param>
            <param name="newItem"></param>
            <param name="oldItem"></param>
            <param name="index"></param>
        </member>
        <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.NewItems">
            <summary>
            Gets the list of new items involved in the change.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            Gets the index at which the change occurred.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.OldItems">
            <summary>
            Gets the list of items affected by a Replace, Remove, or Move action.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.NotifyCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            Gets the index at which a Move, Remove, ore Replace action occurred.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.NotifyCollectionChangedEventHandler">
            <summary>
            The delegate type for the event handlers of the <see cref="E:C1.C1Schedule.INotifyCollectionChanged.CollectionChanged"/> event. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Framework.Html.HtmlList">
            <summary>
            REVIEW: Replace with 2-column table?
            The current setup works but makes the document dirty when it renders...
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlListItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Schedule.C1Calendar">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.C1Calendar"/> is the supplementary control 
            which lets end-users navigate through the dates in the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> control. 
            It does the same as the corresponding control in MS Outlook. 
            Scheduling application can be created without using the <see cref="T:C1.Win.C1Schedule.C1Calendar"/>.
            The <see cref="T:C1.Win.C1Schedule.C1Calendar"/> shows dates for one or more months at a time. 
            The number of months shown at a time in the control is selected 
            automatically according to the control's current size, 
            and can be changed every time a control is resized.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Calendar.GetCallingAssembly">
            <summary>
            C1.Win.IC1LibrarySupport
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Calendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.C1Calendar"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Calendar.ShouldSerializeTheme">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Calendar.OnSizeChanged(System.EventArgs)">
            <summary>
            set element's width and mark element as dirty (to trigger Layout methods)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Calendar.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw 
            itself and any child controls.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.C1Calendar._calendar_SelectionChanged(System.Object,C1.Win.C1Schedule.SelectionChangedEventArgs)">
            Navigates associated C1Schedule control to the selected date.
        </member>
        <member name="E:C1.Win.C1Schedule.C1Calendar.SelectionChanged">
            <summary>
            Occurs when the range of selected days is changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.Schedule">
            <summary>
            Gets or sets the reference to the <see cref="T:C1.Win.C1Schedule.C1Schedule"/> 
            control associated with the <see cref="T:C1.Win.C1Schedule.C1Calendar"/> control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.ShowWeekNumbers">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating whether 
            <see cref="T:C1.Win.C1Schedule.C1Calendar"/> control displays week numbers to 
            the left of each row of days.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.CalendarDimensions">
            <summary>
            Gets or sets the maximum number of months to display in control.
            Actual number of months depends on the available space.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.Theme">
            <summary>
            Gets the <see cref="P:C1.Win.C1Schedule.C1Calendar.Theme"/> object determining the control appearance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.SelectedDates">
            <summary>
            Gets or sets an array of selected dates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.BoldedDates">
            <summary>
            Gets or sets an array of bolded dates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Schedule.C1Calendar.VisualStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Schedule.C1Calendar.VisualStyle"/> value determining 
            control's visual style.
            The default is <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Office2007Blue"/>.
            </summary>
            <remarks><para>Setting this property to any value changes the value 
            of the <see cref="P:C1.Win.C1Schedule.C1Calendar.Theme"/> property. </para>
            <para>Setting this property to <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom"/> value 
            results in creating the editable copy of currently used theme.
            The new theme has <see cref="F:C1.Win.C1Schedule.UI.VisualStyle.Custom"/> style
            and an unique string as the Name property.</para></remarks>
        </member>
        <member name="T:C1.C1Schedule.SynchronizationActionEnum">
            <summary>
            Describes the version of data in a data storage. 
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SynchronizationActionEnum.Added">
            <summary>
            A new item.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SynchronizationActionEnum.Deleted">
            <summary>
            A deleted item.
            </summary>
        </member>
        <member name="F:C1.C1Schedule.SynchronizationActionEnum.Changed">
            <summary>
            A changed item.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.ItemSynchronizedEventArgs">
            <summary>
            Provides data for the DataSourceItemSynchronized event.
            </summary>
        </member>
        <member name="M:C1.C1Schedule.ItemSynchronizedEventArgs.#ctor(C1.C1Schedule.C1BindingSource,C1.C1Schedule.BasePersistableObject,System.Object,C1.C1Schedule.SynchronizationActionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs"/> class.
            </summary>
            <param name="storage">Reference to the changed <see cref="T:C1.C1Schedule.C1BindingSource"/> object.</param>
            <param name="collectionItem">Reference to the <see cref="T:C1.C1Schedule.BasePersistableObject"/> derived object.</param>
            <param name="dataSourceItem">Reference to the corresponding item in the data source.</param>
            <param name="action">The <see cref="T:C1.C1Schedule.SynchronizationActionEnum"/> value.</param>
        </member>
        <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.Storage">
            <summary>
            Gets the reference to the changed <see cref="T:C1.C1Schedule.C1BindingSource"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.DataSourceItem">
            <summary>
            Gets the reference to the data source item.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.CollectionItem">
            <summary>
            Gets the reference to the <see cref="T:C1.C1Schedule.BasePersistableObject"/> derived object.
            </summary>
        </member>
        <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.Action">
            <summary>
            Gets the <see cref="T:C1.C1Schedule.SynchronizationActionEnum"/> value.
            </summary>
        </member>
        <member name="T:C1.C1Schedule.DataSourceItemSynchronizedEventHandler">
            <summary>
            The delegate type for the event handlers of the DataSourceItemSynchronized event. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm">
            <summary>
            The <see cref="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm"/> represents the dialog form for editing
            <see cref="T:C1.C1Schedule.ResourceCollection"/> object.
            Use this form for editing the full list of available resources.
            </summary>
        </member>
        <member name="F:C1.Win.C1Schedule.Forms.ResourceCollectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ResourceCollectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ResourceCollectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Forms.ResourceCollectionForm.#ctor(C1.C1Schedule.ResourceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Forms.ResourceCollectionForm"/> form.
            </summary>
            <param name="collection">The <see cref="T:C1.C1Schedule.ResourceCollection"/> object.</param>
        </member>
        <member name="T:C1.Win.C1Schedule.Design.DataSourceEditor">
            <summary>
            <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor"/> used to edit data source properties. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.DataSourceEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Schedule.Design.DataSourceEditor"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.DataSourceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Schedule.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Schedule.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> through which editing services may be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>A <see cref="T:C1.Framework.Thickness"/> value containing the new value of the object.</returns>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            ------------------------------------------------------------------------
            C1Localizer contains static methods to load and look up resources
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundImageLayout.None">
            <summary>
            The image is left-aligned at the top across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundImageLayout.Tile">
            <summary>
            The image is tiled across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundImageLayout.Center">
            <summary>
            The image is centered within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundImageLayout.Stretch">
            <summary>
            The image is streched across the control's client rectangle. 
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundImageLayout.Zoom">
            <summary>
            The image is enlarged within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.BackgroundImageLayout.TileStretch">
            <summary>
            The image is split into nine pieces and tiled within the control's client rectangle.
            Center tiles are stretched, corner tiles are rendered with the original size.
            </summary>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.C1SuperTooltip"/> component.
            </summary>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.C1SuperTooltip"/> component.
            </summary>
            <param name="container">An <see cref="T:System.ComponentModel.IContainer"/>that represents the container of the <see cref="T:C1.Framework.C1SuperTooltip"/>.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates tooltip HTML text with the specified control.
            <param name="control">The <b>Control</b> to associate the tooltip text with.</param>
            <param name="text">The tooltip text to display when the mouse cursor is over the control.</param>
            </summary>
            <remarks>
            
            <para>In addition to specifying the tooltip text to display for a control, you can also use 
            this method to modify the tooltip text for a control. Calling the <b>SetToolTip</b> 
            method more than once for a given control does not specify multiple tooltip text to 
            display for a control but instead changes the current tooltip text for the control.</para>
            <para>To determine the tooltip text that is associated with a control at run time, you can 
            use the <see cref="M:C1.Framework.C1SuperTooltip.GetToolTip(System.Windows.Forms.Control)"/> method.</para>
            
            <para><see cref="T:C1.Framework.C1SuperTooltip"/> can display HTML text, including cascading style sheets,
            lists, tables, and images. To include images in your tooltips, use an &lt;img&gt; tag as
            usual, and set the 'src' attribute to a string with the following format:</para>
            
            <code>'res://[resourcename]'</code>
            
            <para>where <code>[resourcename]</code> is is the name of an embedded resource that
            contains the image. The example below illustrates this.</para>
            
            </remarks>
            <example>
            The code below associates an HTML snippet with a <b>ListBox</b> control. The HTML
            contains two lines of text with some bold words in it.
            <code>
            _C1SuperTooltip1.SetToolTip(this.listBox1,
              "This is a tip &lt;b&gt;with bold&lt;/b&gt; text in it&lt;br&gt;it is also multi-line...");
            </code>
            The code below associates an HTML snippet with a <b>RichTextBox</b> control. The HTML
            contains a table with two columns. The first column contains an image, loaded from the
            application's resources. In this case, the application must include an embedded resource 
            named 'tips.gif'. The second column contains some formatted text.
            <code>
            _C1SuperTooltip1.SetToolTip(richTextBox1,
              @"&lt;table&gt;&lt;tr&gt;
              &lt;td&gt;&lt;img src='res://tips.gif'/&gt;&lt;/td&gt;
              &lt;td&gt;This is a multiline&lt;br&gt;tooltip&lt;br&gt;&lt;b&gt;associated
              &lt;/b&gt;&lt;br&gt;with the rich text box...&lt;/td&gt;
              &lt;/tr&gt;&lt;/table&gt;");
            </code>
            </example>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.RemoveAll">
            <summary>
            Removes all tooltip text currently associated with the <see cref="T:C1.Framework.C1SuperTooltip"/> component.
            </summary>
            <remarks>
            You can use this method to remove all tooltip text that is associated with the 
            <see cref="T:C1.Framework.C1SuperTooltip"/> component. To disable the display of text instead of removing all 
            tooltip text from the <b>C1SuperTooltip</b> control, use the <see cref="P:C1.Framework.C1SuperTooltip.Active"/> property.
            </remarks>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Show(System.String,System.Windows.Forms.Control)">
            <summary>
            Shows the tooltip with the specified text for the specified control.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Hide">
            <summary>
            Hides the <see cref="T:C1.Framework.C1SuperTooltip"/> if it is currently visible.
            </summary>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Framework.C1SuperTooltip.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Framework.C1SuperTooltip.Hide(System.Windows.Forms.Control)">
            <summary>
            Hides the <see cref="T:C1.Framework.C1SuperTooltip"/> if it is currently visible.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that the <see cref="T:C1.Framework.C1SuperTooltip"/> is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Framework.C1SuperTooltip.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="T:C1.Framework.C1SuperTooltip.ToolStripItemControl">
            <summary>
            Proxy control to allow adding tooltips to ToolStripItems.
            </summary>
        </member>
        <member name="T:C1.Framework.ToolTipWindow">
            <summary>
            Popup control that shows the tooltip content
            </summary>
        </member>
    </members>
</doc>
